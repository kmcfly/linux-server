/***********************************************************************
** Copyright (C) Tongwei Video Technology Co.,Ltd. All rights reserved.
** Author       : 袁石维
** Date         : 2009-05-08
** Name         : Product.h
** Version      : 1.0
** Description  :
** Modify Record:
1:
***********************************************************************/
#include "Product.h"
#include "assert.h"
#include "math.h"  
#include "ItemDefine.h"
#include "LocalDevice.h"
#include "dvrdvsdef.h"
#ifdef __TDFH__
#include "MemPool.h"
#endif
#ifdef __ENVIRONMENT_LINUX__
extern CRYTOINFO_STATUS g_crytoStatus;
extern bool g_bUse1104A1108ChipColor;
#endif

#if defined(__PRIMARY_WRDISK__)
#include "rec_file.h"
#endif

#include "NetStreamAllotDevice.h"
#include "EncodeCheck.h"
#include "LocalSubStreamAllot.h"

extern unsigned int g_support_hd_type;

extern  unsigned long REC_DATA_READ_BUF_SIZE;
extern  unsigned long REC_DATA_WRITE_BUF_SIZE;

extern  int g_bufsize;		//缓存大小，即预录像文件的大小
extern  int g_buffFileNum;	//预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

extern unsigned char g_coverAreaCountLimit;	//现场下遮挡允许的最大值，默认为MAX_COVER_AREA_NUM，根据产品不同会有不同

extern bool g_bRu042304SEMETo2504HE_M;
extern int g_Ru04OldProductType;
extern bool g_b2316SETo2316ME;


unsigned long PRE_RECORD_MAX_LEN = 0;
unsigned long PRE_RECORD_MAX_TIME = 10;
bool g_preRecErrSleep = true;

#if defined(__PACKID_9__) || defined(__PACKID_14__) || defined(__PACKID_27__)
unsigned long MAX_RECORD_FILE_LEN_M        = 512; //录像文件的大小以MB为单位
#else
unsigned long  MAX_RECORD_FILE_LEN_M        = 128; //录像文件的大小以MB为单位
#endif  

#ifdef __DVR_ULTIMATE__
unsigned long			MAX_VIDEO_FRAME_LEN			= 1.5 * 1024 *1024;
#elif defined(__PACKID_9__) || defined(__PACKID_14__) || defined(__PACKID_27__)
unsigned long			MAX_VIDEO_FRAME_LEN			= 1024 * 1024;
#else
unsigned long			MAX_VIDEO_FRAME_LEN			= 512 * 1024;
#endif

const unsigned long g_resolutionNum = 9;

VIDEO_SIZE_BITRATE_INFO g_vsBitRateInfo[] = 
{
	{DVRVIDEO_SIZE_QCIF,	256},
	{DVRVIDEO_SIZE_CIF,		256},
	{DVRVIDEO_SIZE_HD1,		512},
	{DVRVIDEO_SIZE_D1,		1024},
	{DVRVIDEO_SIZE_HD1080,	6144},
	{DVRVIDEO_SIZE_HD720,	4096},
	{DVRVIDEO_SIZE_960H,	1024},
	{DVRVIDEO_SIZE_VGA,		1024},
	{DVRVIDEO_SIZE_QVGA,	256},

	{DVRVIDEO_SIZE_960P,	4096},
	{DVRVIDEO_SIZE_SXGA,	4096},
	{DVRVIDEO_SIZE_3M,		6144},
	{DVRVIDEO_SIZE_16_9_3M,		6144},
	{DVRVIDEO_SIZE_4M,		6144},
	{DVRVIDEO_SIZE_5M,		6144},
	{DVRVIDEO_SIZE_NONE,	0},
};

//////////////////////////////////////////////////////////////////////////
CProduct::CProduct()
{
	//////////////////////////////////////////////////////////////////////////
	m_localVideoInputNum		= 8;
	m_videoOutputNum	= 4;
	m_netVideoOutputNum = 4;
	m_audioInputNum		= 4;
	m_sensorInputNum	= 4;
	m_sensorOutputNum	= 4;
	m_localKeyboardType = KEYBOARD_1UA;
	m_netVideoInputNum	= 0;
	m_preRecordType     = PRERECORD_MODE_DISK;
	m_preAlarmTime		= 5;
	m_External485KeyboardType = KEYBOARD_MY1003K;
	m_maxFFSpeed        = m_videoOutputNum;

	//////////////////////////////////////////////////////////////////////////
	m_bSupportRedunRec  = false;
	m_bSupportESATA		= false;
	m_eSataIndex        = 4;
	m_pciToEsataNum     = 0;
	m_pPciToEsataIndex  = NULL;
	m_bHaveUsbToEsata   = false;
	m_bDoDiskIODetect	= false;
	m_bAudioAction		= false;
	m_bSupportMCU		= true;
	m_bHaveSpot         = true;
	m_bUseMCUSpot       = false;
	m_speekType         = 0;
	m_bNetworkWiFi		= false;
	m_bNetwork3G		= false;
	m_bAutoReport       = false;
	m_bOrientateGPS		= false;
	m_maxNetClientNum	= 5;	
	m_netSendCopies     = INVALID_INDEX(unsigned long);
	m_netlimitSendCopies   = INVALID_INDEX(unsigned long);

	m_bLimitSecondStreamForFirstStreamNum = false;
	m_firstStreamNumForLimitSecondStream  = m_localVideoInputNum;
	m_limitTypeForFirstStreamNum          = 0;
	m_netLimitRatForFirstStreamNum        = 7;
	m_netLimitAllRatForFirstStreamNum     = 3*16;

	
	m_videoOutDevice	= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
	m_displayResolutionMask	= VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
    m_defDispResolutionMask = VGA_800X600;

	m_snapJpegRate = 1;
	m_snapJpegRateTime = 1;
	m_emailSnapTimeInterValNum = 1;
	m_pEmailSnapTimeInterVal = NULL;
	m_SnapDefaTimeIntervalValue = 1;

	m_bSupportDoblueStream = true;
	m_chnnSendFirstStreamMaxNum = 1;
	m_bLimitFirstStreamSendNum = false;
	m_sendFirstStreamMaxNum = 0;
	m_maxStreamIDNumForPlayOrBackup = 1;
	m_bSupportSnapPic      = true;

	//////////////////////////////////////////////////////////////////////////
    //	
	m_local_rate.rate_size_all_ch       = 0;
	m_local_rate.rate_total_pal_on_cif	= 25*1;
	m_local_rate.rate_chnn_pal_on_cif  	= 25;
	m_local_rate.rate_total_ntsc_on_cif	= 30*1;
	m_local_rate.rate_chnn_ntsc_on_cif 	= 30;
	m_local_rate.max_rate_total			= 1024*16;
	m_local_rate.max_rate_chnn			= 1024;
	m_localDefaChnnRateNumPal			= 25;
	m_localDefaChnnRateNumNtsc			= 30;
	m_localVideoSize					= DVRVIDEO_SIZE_CIF;
	m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
	m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR;
	m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_VBR;
	m_localBitRateCount                 = 1;
	m_pLocalBitRateRange                = NULL;
	m_localDefaBitRateValue             = 768;

	m_ipcVideoDefaSize					= DVRVIDEO_SIZE_HD720;
	m_ipcDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
	m_ipcDefaChnnRate					= 25;
	m_ipcDefaBitRate					= 5120;

	m_bIPCUseStaticBitRate = false;

// #if defined(__AP_AU27__)
// 	m_ipcNetVideoDefaSize				= DVRVIDEO_SIZE_D1;
// 	m_ipcNetDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
// 	m_ipcNetDefaChnnRate				= 25;
// 	m_ipcNetDefaBitRate					= 1024;
// #else
	m_ipcNetVideoDefaSize				= DVRVIDEO_SIZE_CIF;
	m_ipcNetDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
	m_ipcNetDefaChnnRate				= 25;
	#if defined(__CUSTOM_IL03__)
		m_ipcNetDefaChnnRate			= 6;
	#endif
	m_ipcNetDefaBitRate					= 512;
//#endif
	m_bLocalVideoSizeSpecial            = 0;
	m_localVideoSizeCIFChnnBits         = 0;
	m_localVideoSizeD1ChnnBits          = 0;

	m_bCanChangLocalVideoInfo           = true;
	
	m_net_rate.rate_size_all_ch         = 0;
	m_net_rate.rate_total_pal_on_cif	= 25*1;
	m_net_rate.rate_chnn_pal_on_cif	    = 25;
	m_net_rate.rate_total_ntsc_on_cif	= 30*1;
	m_net_rate.rate_chnn_ntsc_on_cif    = 30;
	m_net_rate.max_rate_total			= 1024*16;
	m_net_rate.max_rate_chnn			= 1024;
	m_netDefaChnnRateNumPal			    = 25;
	m_netDefaChnnRateNumNtsc			= 30;
	m_netVideoSize						= DVRVIDEO_SIZE_CIF;
	m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
	m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR;
	m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
	m_netBitRateCount                   = 1;
	m_pNetBitRateRange                  = NULL;
	m_netDefaBitRateValue               = 768;

	//////////////////////////////////////////////////////////////////////////
	{
		m_local_BitStream.lowest	= 64;
		m_local_BitStream.lower		= 128;
		m_local_BitStream.low		= 256;
		m_local_BitStream.medium	= 512;
		m_local_BitStream.high		= 1024;
		m_local_BitStream.highest	= 2048;

		m_net_BitStream.lowest		= 64;
		m_net_BitStream.lower		= 128;
		m_net_BitStream.low			= 256;
		m_net_BitStream.medium		= 512;
		m_net_BitStream.high		= 1024;
		m_net_BitStream.highest		= 2048;
	}
	//////////////////////////////////////////////////////////////////////////
	{
		m_imageParam_PAL.cif_width		= 352;
		m_imageParam_PAL.cif_height		= 288;
		m_imageParam_PAL.hd1_width		= 704;
		m_imageParam_PAL.hd1_height		= 288;
		m_imageParam_PAL.d1_width		= 704;
		m_imageParam_PAL.hd1_height		= 576;
	}

	{
		m_imageParam_NTSC.cif_width		= 320;
		m_imageParam_NTSC.cif_height	= 240;
		m_imageParam_NTSC.hd1_width		= 640;
		m_imageParam_NTSC.hd1_height	= 240;
		m_imageParam_NTSC.d1_width		= 640;
		m_imageParam_NTSC.hd1_height	= 480;
	}

	{
		m_pSupportVideoSize				= NULL;
	}

	m_ipcTransferChnnNum				= 0;

	memset(m_szKeyBoardName, 0, sizeof(m_szKeyBoardName));
	memset(m_szExternal485KeyBoardName, 0, sizeof(m_szExternal485KeyBoardName));
	memset(m_funcCustomInfo, 0, sizeof(m_funcCustomInfo));
	m_bHardwareS7 = false;
	m_b2704HDNewHardWare = false;

	m_productType = TD_DEVICE_NONE;

	m_pEncodeCheck = CEncodeCheck::Instance();
	m_pSubEncodeCheck = CCalculateSubEncode::Instance();

}

CProduct::~CProduct()
{

}

CProduct * CProduct::Instance()
{
	static CProduct s_Product;
	return &s_Product;
}

bool CProduct::Initial(const char * pFilePath, unsigned long productID, unsigned long subProductID, unsigned long sdkProductID)
{
	m_bNetwork3G              = false;
	m_bAutoReport             = true;
	m_bHaveSpot               = true;
	m_bCanChangLocalVideoInfo = true;
	m_productSubID            = subProductID;
	m_sdkProductType			= (PRODUCT_TYPE)sdkProductID;
	memset(m_szKeyBoardName, 0, sizeof(m_szKeyBoardName));
	memset(m_szExternal485KeyBoardName, 0, sizeof(m_szExternal485KeyBoardName));

	g_video_format = (VIDEO_FORMAT)CLocalDevice::GetVideoFormatFromFlash();

	m_preRecordType           = PRERECORD_MODE_DISK;

	{
		m_bHardwareS7 = false;
		//如果硬件版本号中有's7'或'S7'，那么就调整为分辨率默认值为800X600		
		char szHardVersion[16] = {0};
		CLocalDevice::GetHardWareVersion(szHardVersion, 6);
		for (int i = 0; i < 6; ++i)
		{
			if ((szHardVersion[i] == 's') || (szHardVersion[i] == 'S'))
			{
				if (i + 1 < 6)
				{
					if (szHardVersion[i + 1] == '7')
					{						
						m_bHardwareS7 = true;
						break;
					}
				}					
			}
		}				
	}

#if 0/*!(defined __ENVIRONMENT_LINUX__)*/

	printf("(%s,%d)from product.def\n",__FILE__,__LINE__);
	assert (NULL != pFilePath);

	ifstream product(pFilePath);  

	if (!product.is_open())
	{
		printf("Can not open file:%s\n", pFilePath);
		return false;
	}

	string str;
	unsigned char num = 0;

	while(getline(product, str))
	{ 
		if (0 == str.compare(PRODUCT_NAME_START))
		{
			if (!GetProductType(product))
			{
				printf("%s, %d\n", __FILE__, __LINE__);
				return false;
			}

			++ num;
			continue;
		}

		if (0 == str.compare(PRODUCT_COLLOCATE))
		{
			if (!GetProductCollocate(product))
			{
				printf("%s, %d\n", __FILE__, __LINE__);
				return false;
			}

			++ num;
			continue;
		}

		if (0 == str.compare(SUPPORT_COLLOCATE))
		{
			if (!GetSupportCollocate(product))
			{
				printf("%s, %d\n", __FILE__, __LINE__);
				return false;
			}

			++ num;
			continue;
		}

		if (0 == str.compare(LOCAL_FRAME_RATE_TABLE))
		{
			if (!GetFrameTable(product, m_local_rate, 
				m_localVideoSize, m_localVideoDefaSize, 
				m_localDefaChnnRateNumPal, m_localDefaChnnRateNumNtsc, 
				m_localVideoEncodeModeMask, m_localDefaVideoEncodeMode, 
				m_localBitRateCount, &m_pLocalBitRateRange, 
				m_localDefaBitRateValue))
			{
				printf("%s, %d\n", __FILE__, __LINE__);
				return false;
			}

			++ num;
			continue;
		}

		if (0 == str.compare(NET_FRAME_RATE_TABLE))
		{
			if (!GetFrameTable(product, m_net_rate, 
				m_netVideoSize, m_netVideoDefaSize, 
				m_netDefaChnnRateNumPal, m_netDefaChnnRateNumNtsc, 
				m_netVideoEncodeModeMask, m_netDefaVideoEncodeMode, 
				m_netBitRateCount, &m_pNetBitRateRange, 
				m_netDefaBitRateValue,false))
			{
				printf("%s, %d\n", __FILE__, __LINE__);
				return false;
			}

			++ num;
			continue;
		}

		if (0 == str.compare(LOCAL_BIT_STREAM_TABLE))
		{
			if (!GetBitStream(product, m_local_BitStream))
			{
				printf("%s, %d\n", __FILE__, __LINE__);
				return false;
			}

			++ num;
			continue;
		}

		if (0 == str.compare(NET_BIT_STREAM_TABLE))
		{
			if (!GetBitStream(product, m_net_BitStream))
			{
				printf("%s, %d\n", __FILE__, __LINE__);
				return false;
			}

			++ num;
			continue;
		}

		if (0 == str.compare(IMAGE_PARAM_TABLE))
		{
			if (!GetImageParam(product))
			{
				printf("%s, %d\n", __FILE__, __LINE__);
				return false;
			}

			++ num;
			continue;
		}
	}

	product.close();


	if (m_productType != productID)
	{
		printf("XXXXXXXX%s,%d,m_productType:%d, productID:%d,加密错误\n",__FILE__,__LINE__,m_productType,productID);
		//return false;
	}


	return (8 == num) ? true : false;
#else
	m_poeInputNum = 0;
	m_ipcMaxTotalBitRate = 0;
	m_ipcMaxVideoOutNum = 0;
	m_defaLiveAudioState = NET_LIVE_AUDIO_OPEN;
	m_pbChannelNumForLimitFirstStream = 100;
	m_preRecordType           = PRERECORD_MODE_DISK;
	m_bSupportDisplayMinor = false;
	m_bLimitByBitRate		= true;

	m_firstStreamLimitBitRate = INVALID_INDEX(unsigned long);
    printf("product Item (%s,%d)from programe\n",__FILE__,__LINE__);

//#ifndef __DVR_ULTIMATE__
	if (TD_2316SE_S == productID)
	{
		m_productType			= TD_2316SE_S;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 5;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = false;
		m_chnnSendFirstStreamMaxNum = 1;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = m_netVideoOutputNum;// m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1; //DVR最大支持多少个客户端请求的streamID数


#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = 8;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_CIF;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//
		m_local_rate.rate_total_ntsc_on_cif	= 16*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 3;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_localDefaBitRateValue             = 512;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 2*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 2;
		m_net_rate.rate_total_ntsc_on_cif	= 3*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 3;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 6;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_netDefaBitRateValue               = 256;


		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}	
		g_coverAreaCountLimit = 2;

    }
	else if (TD_2324SE_S == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 24;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
		m_preAlarmTime          = 5;

		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();


		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 16;//m_netVideoOutputNum;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 24;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 3;
		m_limitTypeForFirstStreamNum          = 1;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 1*24;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_CIF;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;		
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 24 * 25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25;	
		m_local_rate.rate_total_ntsc_on_cif	= 24 * 30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30;

		m_localBitRateCount                 = 5;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;         //在2424上，1,9,17,24,可以配置成D1或CIF,而其他通道只能是CIF
		m_localVideoSizeCIFChnnBits         = INVALID_INDEX(ULONGLONG);
		m_localVideoSizeD1ChnnBits          = 0x0810101;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*24;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*24;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 128 * 1024;

			g_bufsize		= 0x20000;		//缓存大小，即预录像文件的大小
			g_buffFileNum	= 60;			//预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
			g_coverAreaCountLimit = 1;

			m_preRecordType = PRERECORD_MODE_MEMORY;
		}
	}
	else if (TD_2304SS_C == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 2;

		m_sensorInputNum		= 0; //该产品不支持，报警输入，但是不能为0，要通过其他域，来控制FUNC_NO_ALARM_CTRL
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif

		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
		m_local_rate.max_rate_total			= 1024*4;
		m_local_rate.max_rate_chnn			= 1024;

// 		m_localBitRateCount                 = 6;
// 		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 		m_pLocalBitRateRange[0]             = 768;
// 		m_pLocalBitRateRange[1]             = 1024;
// 		m_pLocalBitRateRange[2]             = 1536;
// 		m_pLocalBitRateRange[3]             = 2048;
// 		m_pLocalBitRateRange[4]             = 2304;
// 		m_pLocalBitRateRange[5]             = 2560;

		m_localBitRateCount					= 21;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2304;
		m_pLocalBitRateRange[10]            = 2560;
		m_pLocalBitRateRange[11]			= 3072;
		m_pLocalBitRateRange[12]			= 4096;
		m_pLocalBitRateRange[13]			= 5120;
		m_pLocalBitRateRange[14]			= 6144;
		m_pLocalBitRateRange[15]            = 7168;
		m_pLocalBitRateRange[16]            = 8192;
		m_pLocalBitRateRange[17]            = 9216;
		m_pLocalBitRateRange[18]            = 10240;
		m_pLocalBitRateRange[19]            = 11264;
		m_pLocalBitRateRange[20]            = 12288;

		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;

		REC_DATA_READ_BUF_SIZE	= 256 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 256 * 1024;
#if defined(__PRIMARY_WRDISK__)
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 4*1024; //8MB
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 12;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 12;
		m_ipcFrameRate.max_rate_chnn_on_vga = 38;
		m_ipcFrameRate.max_rate_total_on_vga = 38;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}


		m_ipcTransferChnnNum = 1;
	}
	else if (TD_2308SS_C == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 2;

		m_sensorInputNum		= 0;//该产品不支持，报警输入，但是不能为0，要通过其他域，来控制FUNC_NO_ALARM_CTRL
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;

		m_localDefaChnnRateNumPal960H		= 12;
		m_localDefaChnnRateNumNtsc960H		= 15;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;

// 		m_localBitRateCount                 = 9;
// 		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 		m_pLocalBitRateRange[0]             = 256;
// 		m_pLocalBitRateRange[1]             = 384;
// 		m_pLocalBitRateRange[2]             = 512;
// 		m_pLocalBitRateRange[3]             = 768;
// 		m_pLocalBitRateRange[4]             = 1024;
// 		m_pLocalBitRateRange[5]             = 1280;
// 		m_pLocalBitRateRange[6]             = 1536;
// 		m_pLocalBitRateRange[7]             = 1792;
// 		m_pLocalBitRateRange[8]             = 2048;

		m_localBitRateCount					= 21;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2304;
		m_pLocalBitRateRange[10]            = 2560;
		m_pLocalBitRateRange[11]			= 3072;
		m_pLocalBitRateRange[12]			= 4096;
		m_pLocalBitRateRange[13]			= 5120;
		m_pLocalBitRateRange[14]			= 6144;
		m_pLocalBitRateRange[15]            = 7168;
		m_pLocalBitRateRange[16]            = 8192;
		m_pLocalBitRateRange[17]            = 9216;
		m_pLocalBitRateRange[18]            = 10240;
		m_pLocalBitRateRange[19]            = 11264;
		m_pLocalBitRateRange[20]            = 12288;

		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 8*12;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 8*15;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		REC_DATA_WRITE_BUF_SIZE = 512 * 1024;
		REC_DATA_READ_BUF_SIZE	= 512 * 1024;

#if defined(__PRIMARY_WRDISK__)
		
		CRecord_file::SetBufSize(512 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;
		AdjustParam();

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 4*1024; //8MB
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 12;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 12;
		m_ipcFrameRate.max_rate_chnn_on_vga = 38;
		m_ipcFrameRate.max_rate_total_on_vga = 38;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}


		m_ipcTransferChnnNum = 1;
	}
	else if (TD_2316SS_C == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 2;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 2;

		m_sensorInputNum		= 0;//该产品不支持，报警输入，但是不能为0，要通过其他域，来控制FUNC_NO_ALARM_CTRL
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 2;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 6;
		m_localDefaChnnRateNumNtsc			= 7;
		m_localDefaChnnRateNumPal960H		= 6;
		m_localDefaChnnRateNumNtsc960H		= 7;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 6 * 4 + 16;
		m_local_rate.rate_chnn_pal_on_cif  	= 25 * 4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 7 * 4 + 16 * 2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30 * 4;		//D1帧
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;

// 		m_localBitRateCount                 = 9;
// 		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 		m_pLocalBitRateRange[0]             = 256;
// 		m_pLocalBitRateRange[1]             = 384;
// 		m_pLocalBitRateRange[2]             = 512;
// 		m_pLocalBitRateRange[3]             = 768;
// 		m_pLocalBitRateRange[4]             = 1024;
// 		m_pLocalBitRateRange[5]             = 1280;
// 		m_pLocalBitRateRange[6]             = 1536;
// 		m_pLocalBitRateRange[7]             = 1792;
// 		m_pLocalBitRateRange[8]             = 2048;

		m_localBitRateCount					= 21;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2304;
		m_pLocalBitRateRange[10]            = 2560;
		m_pLocalBitRateRange[11]			= 3072;
		m_pLocalBitRateRange[12]			= 4096;
		m_pLocalBitRateRange[13]			= 5120;
		m_pLocalBitRateRange[14]			= 6144;
		m_pLocalBitRateRange[15]            = 7168;
		m_pLocalBitRateRange[16]            = 8192;
		m_pLocalBitRateRange[17]            = 9216;
		m_pLocalBitRateRange[18]            = 10240;
		m_pLocalBitRateRange[19]            = 11264;
		m_pLocalBitRateRange[20]            = 12288;

		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 6;
		m_netDefaChnnRateNumNtsc			= 7;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16*6;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 16*7;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;

		REC_DATA_READ_BUF_SIZE	= 512 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 512 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 512 * 1024;
		CRecord_file::SetBufSize(512 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(1024 * 1024 + 512 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif

		AdjustParam();

		m_preRecordType = PRERECORD_MODE_MEMORY;

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 8 *1024; //8MB
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}


		m_ipcTransferChnnNum = 2;
	}
	else if(TD_2304SS_SL_3515A == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 1;

		m_sensorInputNum		= 4; //该产品不支持，报警输入，但是不能为0，要通过其他域，来控制FUNC_NO_ALARM_CTRL
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif


#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#endif

#if defined(__ZNV_SC__)
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
#endif
		

		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
		m_local_rate.max_rate_total			= 1024*4;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
#if defined(__CUSTOM_US02__)
		m_localDefaBitRateValue             = 2048;
#else
		m_localDefaBitRateValue             = 2048;
#endif

#if defined(__ZNV_SC__)
		m_localDefaBitRateValue             = 1024;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;
	}
	else if (TD_2304SE_C == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 2;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif		
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot				= true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
		m_local_rate.max_rate_total			= 1024*4;
		m_local_rate.max_rate_chnn			= 1024;

// 		m_localBitRateCount                 = 6;
// 		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 		m_pLocalBitRateRange[0]             = 768;
// 		m_pLocalBitRateRange[1]             = 1024;
// 		m_pLocalBitRateRange[2]             = 1536;
// 		m_pLocalBitRateRange[3]             = 2048;
// 		m_pLocalBitRateRange[4]             = 2304;
// 		m_pLocalBitRateRange[5]             = 2560;
		m_localBitRateCount					= 21;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2304;
		m_pLocalBitRateRange[10]            = 2560;
		m_pLocalBitRateRange[11]			= 3072;
		m_pLocalBitRateRange[12]			= 4096;
		m_pLocalBitRateRange[13]			= 5120;
		m_pLocalBitRateRange[14]			= 6144;
		m_pLocalBitRateRange[15]            = 7168;
		m_pLocalBitRateRange[16]            = 8192;
		m_pLocalBitRateRange[17]            = 9216;
		m_pLocalBitRateRange[18]            = 10240;
		m_pLocalBitRateRange[19]            = 11264;
		m_pLocalBitRateRange[20]            = 12288;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;

		REC_DATA_WRITE_BUF_SIZE = 256 * 1024;
		REC_DATA_READ_BUF_SIZE	= 256 * 1024;

#if defined(__PRIMARY_WRDISK__)
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 4*1024; //8MB
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 12;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 12;
		m_ipcFrameRate.max_rate_chnn_on_vga = 38;
		m_ipcFrameRate.max_rate_total_on_vga = 38;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}


		m_ipcTransferChnnNum = 1;
	}
	else if (TD_2308SE_C == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot				= true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif

		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;

		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;

		m_localDefaChnnRateNumPal960H		= 12;
		m_localDefaChnnRateNumNtsc960H		= 15;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;

		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;

		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;

// 		m_localBitRateCount                 = 9;
// 		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 		m_pLocalBitRateRange[0]             = 256;
// 		m_pLocalBitRateRange[1]             = 384;
// 		m_pLocalBitRateRange[2]             = 512;
// 		m_pLocalBitRateRange[3]             = 768;
// 		m_pLocalBitRateRange[4]             = 1024;
// 		m_pLocalBitRateRange[5]             = 1280;
// 		m_pLocalBitRateRange[6]             = 1536;
// 		m_pLocalBitRateRange[7]             = 1792;
// 		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
		m_localBitRateCount					= 21;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2304;
		m_pLocalBitRateRange[10]            = 2560;
		m_pLocalBitRateRange[11]			= 3072;
		m_pLocalBitRateRange[12]			= 4096;
		m_pLocalBitRateRange[13]			= 5120;
		m_pLocalBitRateRange[14]			= 6144;
		m_pLocalBitRateRange[15]            = 7168;
		m_pLocalBitRateRange[16]            = 8192;
		m_pLocalBitRateRange[17]            = 9216;
		m_pLocalBitRateRange[18]            = 10240;
		m_pLocalBitRateRange[19]            = 11264;
		m_pLocalBitRateRange[20]            = 12288;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 8*12;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 8*15;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		REC_DATA_READ_BUF_SIZE	= 512 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 512 * 1024;

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;
		AdjustParam();

		REC_DATA_WRITE_BUF_SIZE = 512 * 1024;
		REC_DATA_READ_BUF_SIZE	= 512 * 1024;

#if defined(__PRIMARY_WRDISK__)
		CRecord_file::SetBufSize(512 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 4*1024; //8MB
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 12;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 12;
		m_ipcFrameRate.max_rate_chnn_on_vga = 38;
		m_ipcFrameRate.max_rate_total_on_vga = 38;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}


		m_ipcTransferChnnNum = 1;
	}
	else if (TD_2316SE_C == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__ 
		m_netVideoInputNum		= 2;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localDefaChnnRateNumPal960H		= 12;
		m_localDefaChnnRateNumNtsc960H		= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

// 		m_localBitRateCount                 = 9;
// 		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 		m_pLocalBitRateRange[0]             = 256;
// 		m_pLocalBitRateRange[1]             = 384;
// 		m_pLocalBitRateRange[2]             = 512;
// 		m_pLocalBitRateRange[3]             = 768;
// 		m_pLocalBitRateRange[4]             = 1024;
// 		m_pLocalBitRateRange[5]             = 1280;
// 		m_pLocalBitRateRange[6]             = 1536;
// 		m_pLocalBitRateRange[7]             = 1792;
// 		m_pLocalBitRateRange[8]             = 2048;
		m_localBitRateCount					= 21;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2304;
		m_pLocalBitRateRange[10]            = 2560;
		m_pLocalBitRateRange[11]			= 3072;
		m_pLocalBitRateRange[12]			= 4096;
		m_pLocalBitRateRange[13]			= 5120;
		m_pLocalBitRateRange[14]			= 6144;
		m_pLocalBitRateRange[15]            = 7168;
		m_pLocalBitRateRange[16]            = 8192;
		m_pLocalBitRateRange[17]            = 9216;
		m_pLocalBitRateRange[18]            = 10240;
		m_pLocalBitRateRange[19]            = 11264;
		m_pLocalBitRateRange[20]            = 12288;
		m_localDefaBitRateValue             = 1536;


		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		REC_DATA_READ_BUF_SIZE	= 512 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 512 * 1024;

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;
		AdjustParam();

		REC_DATA_READ_BUF_SIZE	= 256 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 256 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 256 * 1024;
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(1024 * 1024 + 256 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif

		AdjustParam();

		m_preRecordType = PRERECORD_MODE_MEMORY;

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 12 *1024; //8MB
		m_ipcMaxVideoOutNum		= 2;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}


		m_ipcTransferChnnNum = 2;
	}
	else if(TD_2304SS_SDI == productID)
	{
		m_productType			= TD_2304SS_SDI;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 4;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 1;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1280X1024 | VGA_1024X768 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 4;
		m_netlimitSendCopies   = 4;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

		m_pChRECP = new CHANNEL_RECP [m_localVideoInputNum];
		memset(m_pChRECP, 0, sizeof(CHANNEL_RECP) * m_localVideoInputNum);
		for(int i = 0; i < m_localVideoInputNum; i++)
		{
			unsigned long supVS = 0;
			unsigned long defVS = 0;

			if(0 == i)
			{
#if defined(__CUSTOM_US02__)
				supVS = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#else
				supVS = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#endif
				defVS = DVRVIDEO_SIZE_HD720;
			}
			else
			{
#if defined(__CUSTOM_US02__)
				supVS = DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#else
				supVS = DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#endif
				defVS = DVRVIDEO_SIZE_960H;
			}

			SetChannelRecp(i, (VIDEO_SIZE)supVS, (VIDEO_SIZE)defVS, m_pChRECP + i);
		}
		m_pvsBrr = new VS_SUPBRR[g_resolutionNum];
		memset(m_pvsBrr,0,sizeof(VS_SUPBRR)*g_resolutionNum);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_HD720);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_960H);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_D1);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_HD1);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_CIF);

#if defined(__CUSTOM_US02__)
		m_localVideoSize		= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize		= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_CIF;
#endif
		m_localVideoDefaSize	= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//960H帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//960H帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2560;
		m_pLocalBitRateRange[5]             = 3072;
		m_pLocalBitRateRange[6]             = 4096;
		m_pLocalBitRateRange[7]             = 5120;
		m_pLocalBitRateRange[8]				= 6144;
		m_localDefaBitRateValue             = 768;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE      = 512 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 1 * 1024 * 1024;
			MAX_VIDEO_FRAME_LEN = 768 * 1024;
		}

		g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
		g_buffFileNum = 36;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
	}
	else if(TD_2308SS_SDI == productID)
	{
		m_productType			= TD_2308SS_SDI;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 1;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1280X1024 | VGA_1024X768 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

		m_pChRECP = new CHANNEL_RECP [m_localVideoInputNum + m_netVideoInputNum];
		memset(m_pChRECP, 0, sizeof(CHANNEL_RECP) * (m_localVideoInputNum + m_netVideoInputNum));
		for(int i = 0; i <( m_localVideoInputNum + m_netVideoInputNum);i++)
		{
			unsigned long supVS = 0;
			unsigned long defVS = 0;

			if((0 == i)||(1 == i))
			{
#if defined(__CUSTOM_US02__)
				supVS = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#else
				supVS = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#endif
				defVS = DVRVIDEO_SIZE_HD720;
			}
			else
			{
#if defined(__CUSTOM_US02__)
				supVS = DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#else
				supVS = DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#endif
				defVS = DVRVIDEO_SIZE_960H;
			}

			SetChannelRecp(i, (VIDEO_SIZE)supVS, (VIDEO_SIZE)defVS, m_pChRECP + i);
		}
		m_pvsBrr = new VS_SUPBRR[g_resolutionNum];
		memset(m_pvsBrr,0,sizeof(VS_SUPBRR)*g_resolutionNum);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_HD720);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_960H);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_D1);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_HD1);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_CIF);

#if defined(__CUSTOM_US02__)
		m_localVideoSize		= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize		= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_CIF;
#endif
		m_localVideoDefaSize	= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//960H帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//960H帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2560;
		m_pLocalBitRateRange[5]             = 3072;
		m_pLocalBitRateRange[6]             = 4096;
		m_pLocalBitRateRange[7]             = 5120;
		m_pLocalBitRateRange[8]				= 6144;
		m_localDefaBitRateValue             = 768;
#endif
		m_bLocalVideoSizeSpecial            = 0;
		
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE      = 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 1 * 1024 * 1024;
			MAX_VIDEO_FRAME_LEN = 768 * 1024;
		}

		g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
		g_buffFileNum = 36;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
	}
	else if (TD_2304SE_B == productID)
	{
		m_productType			= TD_2304SE_B;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 10;//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;

		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE      = 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 128 * 1024;
		}
		//m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if (TD_2308SE_B == productID)
	{
		m_productType			= TD_2308SE_B;

		m_localVideoInputNum	= 8;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 40; //INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif

#if defined(__CUSTOM_TW01__) || defined(__CUSTOM_TW01TS__) 
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1;
#else
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
#endif

#if defined(__CUSTOM_TW01__) || defined(__CUSTOM_TW01TS__) 
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
#else
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
#endif

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
#if defined(__CUSTOM_TW01__) || defined(__CUSTOM_TW01TS__) 
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_VBR;
#else
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
#endif
		m_local_rate.rate_total_pal_on_cif	= 4*25*4 + 4*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4 + 4*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
#if defined(__CUSTOM_TW01__) || defined(__CUSTOM_TW01TS__) 
		m_localDefaBitRateValue             = 384;
#else
		m_netDefaBitRateValue               = 512;
#endif
		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE      = 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 128 * 1024;
		}
	}
	else if (TD_2316SE_B == productID)
	{
		m_productType			= TD_2316SE_B;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 2;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16; //INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = 8; //INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 6;
		m_netDefaChnnRateNumNtsc			= 7;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		{
			REC_DATA_READ_BUF_SIZE      = 512 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 512 * 1024;
#if defined(__PRIMARY_WRDISK__)
			CRecord_file::SetBufSize(512 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if (TD_2304SE == productID)
	{
		m_productType			= TD_2304SE;
		 
		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 128;
		
		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif

		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR; 
		m_local_rate.rate_total_pal_on_cif	= 4*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 128 * 1024;
			MAX_VIDEO_FRAME_LEN		= 256 * 1024;
		}
	}
	else if (TD_2308SE == productID)
	{
		m_productType			= TD_2308SE;

		m_localVideoInputNum	= 8;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 128;
		
		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 40;//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = 1;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 1;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif

#if defined(__CUSTOM_TW01__) || defined(__CUSTOM_TW01TS__) 
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1;
#else
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
#endif

#if defined(__CUSTOM_TW01__) || defined(__CUSTOM_TW01TS__) 
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
#else
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
#endif
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
#if defined(__CUSTOM_TW01__) || defined(__CUSTOM_TW01TS__) 
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_VBR;
#else
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR; 
#endif
		m_local_rate.rate_total_pal_on_cif	= 8*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
#if defined(__CUSTOM_TW01__) || defined(__CUSTOM_TW01TS__) 
		m_localDefaBitRateValue             = 384;
#else
		m_localDefaBitRateValue             = 768;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 128 * 1024;
			MAX_VIDEO_FRAME_LEN		= 256 * 1024;
		}
	}
	else if (TD_2316SE == productID)
	{
		m_productType			= TD_2316SE;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 16;
		
		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100; //用一个非常大的数100，表示这个参数对该产品的限制作用没有了。
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;


		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		{
			REC_DATA_READ_BUF_SIZE      = 128*1024; 
		}
		//2316ME在子产品号为1时，表示在2316ME默认功能上做下面的修改：
		//回放修改成4路，支持4D1+12CIF
#if defined (__CUSTOM_CN__) || defined(__CUSTOM_SHANGHAI__)
		//if (TD_TVT_CN == m_productSubID)
		{
			m_videoOutputNum = 4;
			m_local_rate.rate_size_all_ch       = 0;
			m_local_rate.rate_total_pal_on_cif	= 4*25*4+12*25;
			m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
			m_local_rate.rate_total_ntsc_on_cif	= 4*30*4+12*30;
			m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;				
		}
#endif
	}
	else if (TD_2304CDS == productID)
	{
		m_productType			= TD_2304CDS;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 128;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		m_bOrientateGPS			= false;
#ifdef __CUSTOM_US02__
		m_maxNetClientNum		= 10;   //2304SS的内存很少，如果连接10个客户端，DVR有可能内存不够，但是US02非要支持10，
		                                //所以修改成US02支持10个，其他支持5个
#else
		m_maxNetClientNum		= 5;
#endif

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 20;//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;  
		m_local_rate.rate_total_pal_on_cif	= 4*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 64 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 64 * 1024;
			MAX_VIDEO_FRAME_LEN		= 256 * 1024;
		}

	}
	else if (TD_2308CDS == productID)
	{
		m_productType			= TD_2308CDS;

		m_localVideoInputNum	= 8;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 128;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 40;//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = 1;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 1;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif		
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;  
		m_local_rate.rate_total_pal_on_cif	= 8*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 128 * 1024;
			MAX_VIDEO_FRAME_LEN		= 256 * 1024;
		}
	}
	else if (TD_2316CDS == productID)
	{
		m_productType			= TD_2316CDS;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;		
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 5;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = false;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = m_netVideoOutputNum;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = 8;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_CIF;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;  
		m_local_rate.rate_total_pal_on_cif	= 16*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 16*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 3;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;		
		m_localDefaBitRateValue             = 512;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 2*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 2;
		m_net_rate.rate_total_ntsc_on_cif	= 3*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 3;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 6;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_netDefaBitRateValue               = 256;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		g_coverAreaCountLimit = 1;

	}
	else if (TD_2304SS_B == productID)
	{
		m_productType			= TD_2304SS_B;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 1;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
#if defined(__TW01_RILI__)
		m_displayResolutionMask = VGA_1024X768  |  VGA_1280X1024;
#else
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 20; //INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;

		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE      = 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 128 * 1024;
		}
		//m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if (TD_2308SS_B == productID)
	{
		m_productType			= TD_2308SS_B;

		m_localVideoInputNum	= 8;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 1;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 40; //INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4 + 4*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4 + 4*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;
		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE      = 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 128 * 1024;
		}
	}
	else if (TD_2316SS_B == productID)
	{
		m_productType			= TD_2316SS_B;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 1;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16; //INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = 8; //INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;




#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 6;
		m_netDefaChnnRateNumNtsc			= 7;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		{
			REC_DATA_READ_BUF_SIZE      = 512 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 512 * 1024;
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if (TD_2304SS_SL == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 1;

		m_sensorInputNum		= 4; //该产品不支持，报警输入，但是不能为0，要通过其他域，来控制FUNC_NO_ALARM_CTRL
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
#if defined(__CHIPTI__)
		m_maxFFSpeed            = 4;
#else
		m_maxFFSpeed            = 2;
#endif

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic = false;
#endif
		m_netSendCopies		= 4;//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies= 2;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 8;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1;
#endif

		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*4;
		m_local_rate.max_rate_chnn			= 1024;


		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
#if defined(__ZNV_SC__)
		m_localDefaBitRateValue             = 1024;
#else
		m_localDefaBitRateValue             = 1536;
#endif

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25 * 4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30 * 4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		REC_DATA_READ_BUF_SIZE = 128 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 128 * 1024;
		g_bufsize = 0x40000;  //缓存大小，即预录像文件的大小
		g_buffFileNum = 40;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
	}
	else if (TD_2308SS_SL == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 1;
		m_sensorInputNum		= 1;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 15;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA  | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic = false;
#endif
		m_netSendCopies		= 8;//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies= 4;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 8;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1;
#endif

		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;


		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		
	}
	else if (TD_2304SL_C == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 1;

		m_sensorInputNum		= 4; //该产品不支持，报警输入，但是不能为0，要通过其他域，来控制FUNC_NO_ALARM_CTRL
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 2 ;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif

		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
		m_local_rate.max_rate_total			= 1024*4;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;
	}
	else if (TD_2308SL_C == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 1;

		m_sensorInputNum		= 8;//该产品不支持，报警输入，但是不能为0，要通过其他域，来控制FUNC_NO_ALARM_CTRL
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 2;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;

		m_localDefaChnnRateNumPal960H		= 12;
		m_localDefaChnnRateNumNtsc960H		= 15;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 8*12;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 8*15;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		REC_DATA_READ_BUF_SIZE	= 256 * 1024; 
		REC_DATA_WRITE_BUF_SIZE = 256 * 1024;

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;
		AdjustParam();
	}
	else if (TD_2304HS == productID)
	{
		m_productType			= TD_2304HS;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;		
		m_preAlarmTime          = 5;

		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 5;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;//m_chnnSendFirstStreamMaxNum * m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 10;//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = 5;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 1;
		m_limitTypeForFirstStreamNum          = 1;	
		m_netLimitRatForFirstStreamNum        = 2;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;  
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}


		{
			REC_DATA_READ_BUF_SIZE	= 64 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 64 * 1024;
			MAX_VIDEO_FRAME_LEN		= 256 * 1024;
		}

    }
	else if (TD_2304ME == productID)
	{
		m_productType			= TD_2304ME;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 128;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;  
		m_local_rate.rate_total_pal_on_cif	= 4*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		//2304ME在子产品号为1时，表示在2304ME默认功能上做下面的修改：
		//回放修改成4路，支持1D1+3CIF
#if defined (__CUSTOM_CN__) || defined(__CUSTOM_SHANGHAI__)
		//if (TD_TVT_CN == m_productSubID)
		{
			m_videoOutputNum = 4;
			m_local_rate.rate_size_all_ch       = 0;
			m_local_rate.rate_total_pal_on_cif	= 1*25*4+3*25;
			m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
			m_local_rate.rate_total_ntsc_on_cif	= 1*30*4+3*30;
			m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;				
		}
#endif
	}
	else if (TD_2308ME == productID)
	{
		m_productType			= TD_2308ME;

		m_localVideoInputNum	= 8;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 128;
		
		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 40;//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = 1;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 1;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;  
		m_local_rate.rate_total_pal_on_cif	= 8*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		//2308ME在子产品号为1时，表示在2308ME默认功能上做下面的修改：
		//回放修改成4路，支持1D1+7CIF
#if defined (__CUSTOM_CN__) || defined(__CUSTOM_SHANGHAI__)
		//if (TD_TVT_CN == m_productSubID)
		{
			m_videoOutputNum = 4;
			m_local_rate.rate_size_all_ch       = 0;
			m_local_rate.rate_total_pal_on_cif	= 1*25*4+7*25;
			m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
			m_local_rate.rate_total_ntsc_on_cif	= 1*30*4+7*30;
			m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;				
		}
#endif

	}
	else if (TD_2316ME == productID)
	{
		m_productType			= TD_2316ME;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 16;
		
		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 32;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;


		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	    = 128 * 1024;
			//REC_DATA_WRITE_BUF_SIZE		= 128 * 1024;
			MAX_VIDEO_FRAME_LEN			= 256 * 1024;
		}

		
		//2316ME在子产品号为1时，表示在2316ME默认功能上做下面的修改：
		//回放修改成4路，支持4D1+12CIF
#if defined (__CUSTOM_CN__) || defined(__CUSTOM_SHANGHAI__)
		//if (TD_TVT_CN == m_productSubID)
		{
			m_videoOutputNum = 4;
			m_local_rate.rate_size_all_ch       = 0;
			m_local_rate.rate_total_pal_on_cif	= 4*25*4+12*25;
			m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
			m_local_rate.rate_total_ntsc_on_cif	= 4*30*4+12*30;
			m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;				
		}
#endif
	}

//#endif
	if (TD_2504HE_B == productID)
	{
		m_productType			= TD_2504HE_B;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 16;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 16;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies			= INVALID_INDEX(unsigned long);
		m_netlimitSendCopies	= INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 1;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4 * 25 * 4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25 * 4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4 * 30 * 4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30 * 4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;


		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}


#ifdef __TDFH__
		CMemPool * pMemPool = CMemPool::Instance();
		if (!pMemPool->Initial(m_localVideoInputNum * 3 * REC_DATA_READ_BUF_SIZE + m_localVideoInputNum * MAX_VIDEO_FRAME_LEN))
		{
			return false;
		}

		if (!pMemPool->AddPool(MEM_REC_READ, REC_DATA_READ_BUF_SIZE, m_localVideoInputNum * 3))
		{
			return false;
		}

		if (!pMemPool->AddPool(MEM_NET_PB, MAX_VIDEO_FRAME_LEN, m_localVideoInputNum))
		{
			return false;
		}
#endif

	}
	else if (TD_2508HE_L == productID)
	{
		m_productType			= TD_2508HE_L;

		m_localVideoInputNum	= 8;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 8;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 16;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies			= INVALID_INDEX(unsigned long);
		m_netlimitSendCopies	= INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 1;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8 * 25 * 4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25 * 4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8 * 30 * 4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30 * 4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;


		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}


#ifdef __TDFH__
		CMemPool * pMemPool = CMemPool::Instance();
		if (!pMemPool->Initial(m_localVideoInputNum * 3 * REC_DATA_READ_BUF_SIZE + m_localVideoInputNum * MAX_VIDEO_FRAME_LEN))
		{
			return false;
		}

		if (!pMemPool->AddPool(MEM_REC_READ, REC_DATA_READ_BUF_SIZE, m_localVideoInputNum * 3))
		{
			return false;
		}

		if (!pMemPool->AddPool(MEM_NET_PB, MAX_VIDEO_FRAME_LEN, m_localVideoInputNum))
		{
			return false;
		}
#endif

	}
	else if ((TD_2316ME_BH == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 16;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 25 * 4 * 4 + 12 * 25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25 * 4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 30 * 4 * 4 + 12 * 30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30 * 4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if (TD_2304ME_A == productID)
	{
		m_productType			= TD_2304ME_A;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 8;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 16;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies			= 16;	//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies	= 8;	//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 1;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 12*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 2 * 25 * 4 + 2 * 25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25 * 4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 2 * 30 * 4 + 2 * 30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30 * 4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;


		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}


		{
			REC_DATA_READ_BUF_SIZE	= 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 128 * 1024;
		}

#ifdef __TDFH__
		CMemPool * pMemPool = CMemPool::Instance();
		if (!pMemPool->Initial(m_localVideoInputNum * 3 * REC_DATA_READ_BUF_SIZE + m_localVideoInputNum * MAX_VIDEO_FRAME_LEN))
		{
			return false;
		}

		if (!pMemPool->AddPool(MEM_REC_READ, REC_DATA_READ_BUF_SIZE, m_localVideoInputNum * 3))
		{
			return false;
		}

		if (!pMemPool->AddPool(MEM_NET_PB, MAX_VIDEO_FRAME_LEN, m_localVideoInputNum))
		{
			return false;
		}
#endif

	}
	else if (TD_2308ME_A == productID)
	{
		m_productType			= TD_2308ME_A;

		m_localVideoInputNum	= 8;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 8;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 16;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies			= 16;	//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies	= 8;	//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 1;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 6*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 2 * 25 * 4 + 6 * 25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25 * 4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 2 * 30 * 4 + 6 * 30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30 * 4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 14*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 14;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;


		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 128 * 1024;
		}

#ifdef __TDFH__
		CMemPool * pMemPool = CMemPool::Instance();
		if (!pMemPool->Initial(m_localVideoInputNum * 3 * REC_DATA_READ_BUF_SIZE + m_localVideoInputNum * MAX_VIDEO_FRAME_LEN))
		{
			return false;
		}

		if (!pMemPool->AddPool(MEM_REC_READ, REC_DATA_READ_BUF_SIZE, m_localVideoInputNum * 3))
		{
			return false;
		}

		if (!pMemPool->AddPool(MEM_NET_PB, MAX_VIDEO_FRAME_LEN, m_localVideoInputNum))
		{
			return false;
		}
#endif

	}
	else if (TD_2316ME_A == productID)
	{
		m_productType			= TD_2316ME_A;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 8;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 16;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies			= 16;	//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies	= 8;	//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 1;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 2 * 25 * 4 + 14 * 25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25 * 4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 2 * 30 * 4 + 14 * 30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30 * 4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;


		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}


 		{
 			REC_DATA_READ_BUF_SIZE	= 128 * 1024;
 			REC_DATA_WRITE_BUF_SIZE = 128 * 1024;
 		}

#ifdef __TDFH__
		CMemPool * pMemPool = CMemPool::Instance();
		if (!pMemPool->Initial(m_localVideoInputNum * 3 * REC_DATA_READ_BUF_SIZE + m_localVideoInputNum * MAX_VIDEO_FRAME_LEN))
		{
			return false;
		}

		if (!pMemPool->AddPool(MEM_REC_READ, REC_DATA_READ_BUF_SIZE, m_localVideoInputNum * 3))
		{
			return false;
		}

		if (!pMemPool->AddPool(MEM_NET_PB, MAX_VIDEO_FRAME_LEN, m_localVideoInputNum))
		{
			return false;
		}
#endif
	}
	else if ((TD_2304ME_C == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
		m_local_rate.max_rate_total			= 1024*4;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		g_buffFileNum = 60;

	}
	else if ((TD_2308ME_C == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 8;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		
		m_localDefaChnnRateNumPal960H		= 12;
		m_localDefaChnnRateNumNtsc960H		= 15;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;



		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		REC_DATA_READ_BUF_SIZE	= 1024 * 1024; 
		REC_DATA_WRITE_BUF_SIZE = 1024 * 1024;

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;
		AdjustParam();
	}
	else if ((TD_2316ME_C == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 16;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif

		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 6;
		m_localDefaChnnRateNumNtsc			= 7;
		m_localDefaChnnRateNumPal960H		= 6;
		m_localDefaChnnRateNumNtsc960H		= 7;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 6 * 4 + 16;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 7 * 4 + 16 * 2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 6;
		m_netDefaChnnRateNumNtsc			= 7;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		REC_DATA_READ_BUF_SIZE	= 512 * 1024; 
		REC_DATA_WRITE_BUF_SIZE = 512 * 1024;

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;
		AdjustParam();

		//m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if (TD_2404MD == productID)
	{
		m_productType			= TD_2404MD;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 128;
		
		m_bSupportESATA			= true;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 ;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;


		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}	

		//2404MD在子产品号为1时，表示在2404MD默认功能上做下面的修改：
		//回放修改成4路，支持1D1+3CIF
#if defined (__CUSTOM_CN__) || defined(__CUSTOM_SHANGHAI__)
		//if (TD_TVT_CN == m_productSubID)
		{
			m_videoOutputNum = 4;
			m_local_rate.rate_size_all_ch       = 0;
			m_local_rate.rate_total_pal_on_cif	= 1*25*4+3*25;
			m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
			m_local_rate.rate_total_ntsc_on_cif	= 1*30*4+3*30;
			m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;				
		}
#endif
	}	
	else if ((TD_2408MD == productID) || (TD_2408MD_4A == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
		if (TD_2408MD == productID)
		{
			m_audioInputNum     = 8;
		}
		else
		{
			m_audioInputNum     = 4;
		}
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 128;
		
		m_bSupportESATA			= true;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
        m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;


		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		//2408MD在子产品号为1时，表示在2408MD默认功能上做下面的修改：
		//回放修改成4路，支持1D1+7CIF
#if defined (__CUSTOM_CN__) || defined(__CUSTOM_SHANGHAI__)
		//if (TD_TVT_CN == m_productSubID)
		{
			m_videoOutputNum = 4;
			m_local_rate.rate_size_all_ch       = 0;
			m_local_rate.rate_total_pal_on_cif	= 1*25*4+7*25;
			m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
			m_local_rate.rate_total_ntsc_on_cif	= 1*30*4+7*30;
			m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;				
		}
#endif
	}
	else if ((TD_2416MD == productID)||(TD_2416MD_4A == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		if (TD_2416MD == productID)
		{
			m_audioInputNum			= 16;
		}
		else
		{
			m_audioInputNum			= 4;
		}		
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 16;
	
		m_bSupportESATA			= true;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;


		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		//2416MD在子产品号为1时，表示在2416MD默认功能上做下面的修改：
		//回放修改成4路，支持4D1+12CIF
#if defined (__CUSTOM_CN__)|| defined(__CUSTOM_SHANGHAI__)
		//if (TD_TVT_CN == m_productSubID)
		{
			m_videoOutputNum = 4;
			m_local_rate.rate_size_all_ch       = 0;
			m_local_rate.rate_total_pal_on_cif	= 4*25*4+12*25;
			m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
			m_local_rate.rate_total_ntsc_on_cif	= 4*30*4+12*30;
			m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;				
		}
#endif
	}
	else if (TD_2424MD == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 24;
		m_audioInputNum			= 16;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 15;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 2;
		m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
		m_pPciToEsataIndex[0]    = 9;
		m_pPciToEsataIndex[1]    = 10;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 16;// m_netVideoOutputNum;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 24;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 1;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 2*24;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;		
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4 + 20*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4 + 20*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 1;         //在2424上，1,9,17,24,可以配置成D1或CIF,而其他通道只能是CIF
		m_localVideoSizeCIFChnnBits         = INVALID_INDEX(ULONGLONG);
		m_localVideoSizeD1ChnnBits          = 0x0810101;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*24;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*24;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if ((TD_2432MD == productID)||(TD_2432MD_4A == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 32;
		if (TD_2432MD == productID)
		{
			m_audioInputNum			= 16;
		}
		else
		{
			m_audioInputNum			= 4;
		}		
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 10;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;
	
		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 2;
		m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
		m_pPciToEsataIndex[0]    = 9;
		m_pPciToEsataIndex[1]    = 10;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 16;//m_netVideoOutputNum;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 32;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 1;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 2*32;



#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;		
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4 + 28*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4 + 28*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 1;         //在2432上，1,9,17,25可以配置成D1或CIF,而其他通道只能是CIF
		m_localVideoSizeCIFChnnBits         = INVALID_INDEX(ULONGLONG);
		m_localVideoSizeD1ChnnBits          = 0x01010101;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*32;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*32;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if ((TD_2404MD_B == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;

		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*4;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 512 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 512 * 1024;
		}

		g_buffFileNum = 60;
	}
	else if ((TD_2408MD_B == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 8;

		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;

		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4 + 4*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4 + 4*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 512 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 512 * 1024;
		}

		g_buffFileNum = 60;
	}
	else if ((TD_2416MD_B == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 16;

		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;

		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif

		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4 + 12*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4 + 12*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;


		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 512 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 512 * 1024;
		}
		g_buffFileNum = 60;
	}
	else if (TD_2504HE == productID)
	{
		m_productType			= TD_2504HE;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;
	
		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if (TD_2508HE == productID)
	{
		m_productType			= TD_2508HE;

		m_localVideoInputNum	= 8;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;
				
		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;
		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		{
			REC_DATA_READ_BUF_SIZE      = 128*1024;
		}
	}
	else if (TD_2516HE == productID)
	{
		m_productType			= TD_2516HE;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;
		
		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if (TD_2504HE_M == productID)
	{
		m_productType			= TD_2504HE_M;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;//m_chnnSendFirstStreamMaxNum * m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 1;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 2;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;  
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if (TD_2508HE_B == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 4;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic = false;
#endif
		m_netSendCopies		= INVALID_INDEX(unsigned long);
		m_netlimitSendCopies= 8;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 8;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#elif defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1;
#endif
		
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;


		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if (TD_2516HE_B == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		//m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies= 2;//INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#elif defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1;
#endif

		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
#if defined(__PRIMARY_WRDISK__)
			CRecord_file::SetBufSize(756 * 1024);
#endif
		}
	}
	else if (TD_2508HE_B_3521 == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 4;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic = false;
#endif
		m_netSendCopies		= INVALID_INDEX(unsigned long);
		m_netlimitSendCopies= 12;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 8;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#elif defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1;
#endif

		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;


		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if (TD_2524HE_B == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 24;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies= INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#elif defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1;
#endif

		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 24*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 24*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*24;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*24;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*24;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*24;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
#if defined(__PRIMARY_WRDISK__)
			CRecord_file::SetBufSize(756 * 1024);
#endif
		}
	}
	else if (TD_2532HE_B == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 32;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= INVALID_INDEX(unsigned long);
		m_netlimitSendCopies= INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#elif defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
#endif

		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
#if defined(__CUSTOM_US02__)
		m_local_rate.rate_total_pal_on_cif	= 32*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 32*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
#else
		m_local_rate.rate_total_pal_on_cif	= 32*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 32*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
#endif

		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*32;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*32;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*32;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
#if defined(__PRIMARY_WRDISK__)
			CRecord_file::SetBufSize(756 * 1024);
#endif
		}
	}
	else if (TD_2504HE_B_N100 == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies= INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#elif defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1;
#endif

		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*4;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if (TD_2508HE_B_N100 == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 4;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies= 4;//INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#elif defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1;
#endif

		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if (TD_2516HE_B_N100 == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies= 4;//INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
#elif defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1;
#endif

		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
		}
	}
	else if(TD_2508HE_SDI == productID)
	{
		m_productType			= TD_2508HE_SDI;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot             = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1280X1024 | VGA_1024X768 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

		m_pChRECP = new CHANNEL_RECP [m_localVideoInputNum + m_netVideoInputNum];
		memset(m_pChRECP, 0, sizeof(CHANNEL_RECP) * (m_localVideoInputNum + m_netVideoInputNum));
		for(int i = 0; i <( m_localVideoInputNum + m_netVideoInputNum);i++)
		{
			unsigned long supVS = 0;
			unsigned long defVS = 0;

			if((0 == i)||(1 == i))
			{
#if defined(__CUSTOM_US02__)
				supVS = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#else
				supVS = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#endif
				defVS = DVRVIDEO_SIZE_HD720;
			}
			else
			{
#if defined(__CUSTOM_US02__)
				supVS = DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#else
				supVS = DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_D1 |DVRVIDEO_SIZE_CIF;
#endif
				defVS = DVRVIDEO_SIZE_960H;
			}

			SetChannelRecp(i, (VIDEO_SIZE)supVS, (VIDEO_SIZE)defVS, m_pChRECP + i);
		}
		m_pvsBrr = new VS_SUPBRR[g_resolutionNum];
		memset(m_pvsBrr,0,sizeof(VS_SUPBRR)*g_resolutionNum);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_HD720);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_960H);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_D1);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_HD1);
		SetVSFOrBrr(productID,DVRVIDEO_SIZE_CIF);

		m_localVideoSize		= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_CIF;
		m_localVideoDefaSize	= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//960H帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//960H帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2560;
		m_pLocalBitRateRange[5]             = 3072;
		m_pLocalBitRateRange[6]             = 4096;
		m_pLocalBitRateRange[7]             = 5120;
		m_pLocalBitRateRange[8]				= 6144;
		m_localDefaBitRateValue             = 768;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE      = 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 1 * 1024 * 1024;
			MAX_VIDEO_FRAME_LEN = 768 * 1024;
		}

		g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
		g_buffFileNum = 36;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
	}
	else if (TD_2504HC == productID)
	{
		m_productType			= TD_2504HC;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_15U;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if (TD_2508HC == productID)
	{
		m_productType			= TD_2508HC;

		m_localVideoInputNum	= 8;
		m_audioInputNum			= 8;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_15U;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;
		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if (TD_2516HC == productID)
	{
		m_productType			= TD_2516HC;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 16;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_15U;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if(TD_2504HS_BL == productID)
	{
		m_productType			= TD_2504HS_BL;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*4;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}


		{
			REC_DATA_READ_BUF_SIZE      = 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 128 * 1024;
		}
	}
	else if(TD_2508HS_BL == productID)
	{
		m_productType			= TD_2508HS_BL;

		m_localVideoInputNum	= 8;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 16;
		m_netlimitSendCopies= 2;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE      = 128 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 128 * 1024;
		}
	}
	else if(TD_2516HS_BL == productID)
	{
		m_productType			= TD_2516HS_BL;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 2;
		m_sensorInputNum		= 1;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 15;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_bHaveSpot				= true;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask =  VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 16;
		m_netlimitSendCopies= INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
#endif
		
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;

		m_localDefaChnnRateNumPal960H		= 12;
		m_localDefaChnnRateNumNtsc960H		= 15;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

#if defined(__CUSTOM_US02__)
		REC_DATA_READ_BUF_SIZE      = 512 * 1024;
		REC_DATA_WRITE_BUF_SIZE		= 512 * 1024;

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;

		AdjustParam();
#else
		{
			REC_DATA_READ_BUF_SIZE      = 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE		= 1024 * 1024;
		}
#endif
	}
	else if (TD_2504HD == productID)
	{
		m_productType			= TD_2504HD;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;
		
		m_bSupportESATA			= true;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if ((TD_2508HD == productID) || (TD_2508HD_4A == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		if (TD_2508HD == productID)
		{
			m_audioInputNum		= 8;
		}
		else
		{
			m_audioInputNum		= 4;
		}
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;
		
		m_bSupportESATA			= true;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if ((TD_2516HD_4A == productID)||(TD_2516HD == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		if (TD_2516HD == productID)
		{
			m_audioInputNum     = 16;
		}
		else
		{
			m_audioInputNum		= 4;
		}		
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= true;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;



#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			//由于2516HD有两种硬件，用硬件版本号中是否有字母‘a’，作为区别。
			//两种硬件在报警输出个数和对讲方式有不同的地方。
			bool bFind = false;
			char szHardVersion[16] = {0};
			CLocalDevice::GetHardWareVersion(szHardVersion, 6);
			for (int i = 0; i < 6; ++i)
			{
				if ((szHardVersion[i] == 'a') || (szHardVersion[i] == 'A'))
				{
					bFind = true;
					break;
				}
			}
			if (bFind)
			{
				m_sensorOutputNum = 4;
			}
			else
			{
				m_sensorOutputNum = 1;
			}
		}
	}
	else if ((TD_2504HD_C == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;

		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 4;
		m_netlimitSendCopies   = 2;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
#if defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
#endif
		m_local_rate.max_rate_total			= 1024*4;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
		}

		g_buffFileNum = 60;
	}
	else if ((TD_2508HD_C == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 8;

		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;

		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧

#if defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
#endif
		m_local_rate.max_rate_total			= 1024*8;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
		}

		g_buffFileNum = 60;
	}
	else if ((TD_2516HD_C == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 16;

		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;

		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
#if defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_local_rate.rate_total_pal_on_cif	= 16*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
#endif
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 2048;
		m_pLocalBitRateRange[2]  = 2304;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
		}
		g_buffFileNum = 60;
	}
	else if ((TD_2524HD_C == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 24;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 16;

		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;

		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 24;
		m_netlimitSendCopies   = 12;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 24*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 24*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
#if defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_local_rate.rate_total_pal_on_cif	= 24*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 24*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
#endif
		m_local_rate.max_rate_total			= 1024*24;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 2048;
		m_pLocalBitRateRange[2]  = 2304;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*24;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*24;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*24;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
		}

		g_buffFileNum = 60;
	}
	else if ((TD_2532HD_C == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 32;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 16;

		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;

		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 32;
		m_netlimitSendCopies   = 16;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 32*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 32*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
#if defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_local_rate.rate_total_pal_on_cif	= 32*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 32*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
#endif
		m_local_rate.max_rate_total			= 1024*32;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 2048;
		m_pLocalBitRateRange[2]  = 2304;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*32;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*32;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*32;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
			g_bufsize = 0x40000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 30;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		//g_buffFileNum = 60;
		m_preRecordType = PRERECORD_MODE_MEMORY;
		g_preRecErrSleep = false;
	}
	else if (TD_2504FD == productID)
	{
		m_productType			= TD_2504FD;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;
		
		m_bSupportESATA			= true;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 4;
		m_netlimitSendCopies   = 2;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;
		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if ((TD_2508FD_4A == productID) || (TD_2508FD == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		if (TD_2508FD == productID)
		{
			m_audioInputNum     = 8;
		}
		else
		{
			m_audioInputNum		= 4;
		}		
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;
		
		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 1;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 6*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if ((TD_2516FD_4A == productID) || (TD_2516FD == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		if (TD_2516FD == productID)
		{
			m_audioInputNum     = 16;
		}
		else
		{
			m_audioInputNum		= 4;
		}		
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 16;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;
		
		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 1;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 6*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
	}
	else if (TD_2516FD_S == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum		    = 16;
			
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= true;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI;//| VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_1920X1080;//| VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = m_sendFirstStreamMaxNum;
		m_limitTypeForFirstStreamNum          = 0;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;



#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1638;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1638;
#else
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1536;
#endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		

	}
	else if (TD_2604LE == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 4;
		m_netlimitSendCopies   = 2;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
#if defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
#endif
		m_local_rate.max_rate_total			= 1024*4;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 2048;
		m_pLocalBitRateRange[2]  = 2304;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
		}

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;
	}
	else if (TD_2608LE == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#endif
		
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
#if defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
#endif
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 2048;
		m_pLocalBitRateRange[2]  = 2304;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
		}

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;

		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 8*1024 * 4; //8MB
		m_ipcMaxVideoOutNum		= 4;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 720;
		m_ipcFrameRate.max_rate_total_on_vga = 720;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}


		m_ipcTransferChnnNum = 8;
	}
	else if (TD_2616LE == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 24;
		m_netlimitSendCopies   = 24;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#endif
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
#if defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_local_rate.rate_total_pal_on_cif	= 16*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
#endif
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 2048;
		m_pLocalBitRateRange[2]  = 2304;
		m_localDefaBitRateValue = 1536;
#else
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
#if defined(__CUSTOM_US02__)
		m_localDefaBitRateValue             = 2048;
#else
		m_localDefaBitRateValue             = 2048;
#endif


		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;

		REC_DATA_READ_BUF_SIZE	= 1024 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		CRecord_file::SetBufSize(1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 48 *1024; //64M
		m_ipcMaxVideoOutNum		= 4;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 1200;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}


		m_ipcTransferChnnNum = 8;
	}
	else if (TD_2508HE_C_3521 == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif

		m_audioInputNum			= 4;

		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 10;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 12;
		m_netlimitSendCopies   = 12;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 7*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#endif
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
#if defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
#endif
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
#endif

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 2048;
		m_pLocalBitRateRange[2]  = 2304;
		m_localDefaBitRateValue = 1536;
#else
// 		m_localBitRateCount                 = 6;
// 		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 		m_pLocalBitRateRange[0]             = 768;
// 		m_pLocalBitRateRange[1]             = 1024;
// 		m_pLocalBitRateRange[2]             = 1536;
// 		m_pLocalBitRateRange[3]             = 2048;
// 		m_pLocalBitRateRange[4]             = 2304;
// 		m_pLocalBitRateRange[5]             = 2560;

		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
#if defined(__CUSTOM_US02__)
		m_localDefaBitRateValue             = 2048;
#else
		m_localDefaBitRateValue             = 2048;
#endif


		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
		}

		g_bufsize	= 0x100000;		//缓存大小，即预录像文件的大小
		g_buffFileNum = 15;

		REC_DATA_READ_BUF_SIZE	= 1024 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 1024 * 1024;
#if defined(__PRIMARY_WRDISK__)
		CRecord_file::SetBufSize(1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6*1024 * 4; //8MB
		m_ipcMaxVideoOutNum		= 4;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 75;
		m_ipcFrameRate.max_rate_total_on_vga = 300;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}


		m_ipcTransferChnnNum = 8;

#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 15;
#else
		m_preAlarmTime          = 5;
#endif
	}
	else if(TD_2524HE_C == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 24;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 24;//INVALID_INDEX(unsigned long);
		m_netlimitSendCopies= 12;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
#elif defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#endif

		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 32*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 32*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
		m_local_rate.max_rate_total			= 1024*32;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1536;
#else
// 		m_localBitRateCount                 = 6;
// 		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 		m_pLocalBitRateRange[0]             = 768;
// 		m_pLocalBitRateRange[1]             = 1024;
// 		m_pLocalBitRateRange[2]             = 1536;
// 		m_pLocalBitRateRange[3]             = 2048;
// 		m_pLocalBitRateRange[4]             = 2304;
// 		m_pLocalBitRateRange[5]             = 2560;

		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
#if defined(__CUSTOM_US02__)
		m_localDefaBitRateValue             = 1536;
#else
		m_localDefaBitRateValue             = 2048;
#endif

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*32;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*32;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*32;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
#if defined(__PRIMARY_WRDISK__)
			CRecord_file::SetBufSize(756 * 1024);
#endif
		}

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6*1024 * 8; //8MB
		m_ipcMaxVideoOutNum		= 4;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 1440;
		m_ipcFrameRate.max_rate_total_on_vga = 1440;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}


		m_ipcTransferChnnNum = 8;
	}
	else if(TD_2532HE_C == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 32;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		//m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 32;	//INVALID_INDEX(unsigned long);;
		m_netlimitSendCopies= 16;	//INVALID_INDEX(unsigned long);;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#elif defined(__CUSTOM_SHANGHAI__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
#endif

		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 32*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 32*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
		m_local_rate.max_rate_total			= 1024*32;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
		m_localBitRateCount = 3;
		m_pLocalBitRateRange = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]  = 1536;
		m_pLocalBitRateRange[1]  = 1792;
		m_pLocalBitRateRange[2]  = 2048;
		m_localDefaBitRateValue = 1536;
#else
// 		m_localBitRateCount                 = 6;
// 		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 		m_pLocalBitRateRange[0]             = 768;
// 		m_pLocalBitRateRange[1]             = 1024;
// 		m_pLocalBitRateRange[2]             = 1536;
// 		m_pLocalBitRateRange[3]             = 2048;
// 		m_pLocalBitRateRange[4]             = 2304;
// 		m_pLocalBitRateRange[5]             = 2560;

		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		//m_localDefaBitRateValue             = 2048;
#if defined(__CUSTOM_US02__)
		m_localDefaBitRateValue             = 1536;
#else
		m_localDefaBitRateValue             = 2048;
#endif

		m_bLocalVideoSizeSpecial            = 0;
#endif
		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*32;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*32;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*32;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		{
			REC_DATA_READ_BUF_SIZE	= 1024 * 1024 + 4 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1024 * 1024 + 4 * 1024;
#if defined(__PRIMARY_WRDISK__)
			CRecord_file::SetBufSize(756 * 1024);
#endif
		}

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6*1024 * 8; //8MB
		m_ipcMaxVideoOutNum		= 4;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 1440;
		m_ipcFrameRate.max_rate_total_on_vga = 1440;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}


		m_ipcTransferChnnNum = 8;
	}
	else if (TD_2604LD_S == productID)
	{
		m_productType			= TD_2604LD_S;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 6;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies        = 16;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 2;
		m_limitTypeForFirstStreamNum          = 1;		
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_960H;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1792;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 4*6;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 4*7;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;
		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		{
			REC_DATA_READ_BUF_SIZE	= 256 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 512 * 1024;			
		}
	}
	else if (TD_2608LD_S == productID)
	{
		m_productType			= TD_2608LD_S;

		m_localVideoInputNum	= 8;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 8;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 3;
		m_limitTypeForFirstStreamNum          = 1;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 2*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_960H;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//960H帧
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//960H帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1792;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 8*6;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 8*7;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		{
			REC_DATA_READ_BUF_SIZE	= 256 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 512 * 1024;			
		}
	}
	else if (TD_2616LD_S == productID)
	{
		m_productType			= TD_2616LD_S;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		m_audioInputNum			= 16;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 16;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		//m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024;
		m_displayResolutionMask = VGA_640X480 | VGA_1024X768 | VGA_1280X1024;
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 3;
		m_limitTypeForFirstStreamNum          = 1;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 2*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1 | DVRVIDEO_SIZE_960H;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//960H帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//960H帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 1792;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		{
			REC_DATA_READ_BUF_SIZE	= 256 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 512 * 1024;			
		}
	}
	else if ((TD_2616LD == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
#ifdef __DVR_ULTIMATE__
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
		
		m_audioInputNum			= 16;
			
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_HDMI | VIDEO_OUT_DEVICE_VGA;
		//m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif

#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1|DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_localDefaBitRateValue             = 2048;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

	}
	else if ((TD_2704HD == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 0;
		m_bNetworkWiFi			= false;
		 
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080 ;
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 15;
		m_netlimitSendCopies   = 10;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_D1;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8 + 4*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8 + 4*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 6144;
		m_pLocalBitRateRange[4]             = 7168;
		m_pLocalBitRateRange[5]             = 8192;
		m_pLocalBitRateRange[6]             = 9216;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 12288;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		{
			//由于2704HD有两种硬件，用硬件版本号中是否有字母‘h’或H，作为区别。			
			bool bFind = false;
			char szHardVersion[16] = {0};
			CLocalDevice::GetHardWareVersion(szHardVersion, 6);
			for (int i = 0; i < 6; ++i)
			{
				if ((szHardVersion[i] == 'h') || (szHardVersion[i] == 'H'))
				{
					bFind = true;
					break;
				}
			}
			if (bFind)
			{
				printf("is 2708XDF new hardWare\n");
				m_b2704HDNewHardWare = true; //如果是新主板，就由CVBS为主输出启动时，
			} 
			else
			{
				printf("is 2708XDF old hardWare\n");
				m_b2704HDNewHardWare = false;
			}
		}
	}
	else if ((TD_2708XE_M == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*12*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 12*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*15*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 15*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 6144;
		m_pLocalBitRateRange[4]             = 7168;
		m_pLocalBitRateRange[5]             = 8192;
		m_pLocalBitRateRange[6]             = 9216;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if ((TD_2716XE_M == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*12*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 12*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 16*15*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 15*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 6144;
		m_pLocalBitRateRange[4]             = 7168;
		m_pLocalBitRateRange[5]             = 8192;
		m_pLocalBitRateRange[6]             = 9216;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if ((TD_2708XE_MH == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*12*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*15*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 8;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 3072;
		m_pLocalBitRateRange[4]             = 4096;
		m_pLocalBitRateRange[5]             = 6144;
		m_pLocalBitRateRange[6]             = 8192;
		m_pLocalBitRateRange[7]             = 10240;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 4 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if ((TD_2704XE_L == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 1;
		
		//3531做的2704XE-L支持4路报警输出，3520做的只支持1路报警输出
#if defined(__CHIP3531__)
		m_sensorOutputNum		= 4;
#else
		m_sensorOutputNum		= 1;
#endif
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;

		//3531做的2704XE-L支持独立对讲，3520做的XE-L用第一通道做对讲功能
#if defined(__CHIP3531__)
		m_speekType             = 2;
#else
		m_speekType             = 1;
#endif
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		//3531做的2704XE-L不支持CVBS输出，VGA分辨率没有1024X768
#if defined(__CHIP3531__)
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#else
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080 ;
#endif

		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 6;
		m_localDefaChnnRateNumNtsc			= 7;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*6*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 6*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*7*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 7*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 6144;
		m_pLocalBitRateRange[4]             = 7168;
		m_pLocalBitRateRange[5]             = 8192;
		m_pLocalBitRateRange[6]             = 9216;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 12288;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 6;
		m_netDefaChnnRateNumNtsc			= 7;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		//3531做的2704XE-L支持遮挡功能，默认遮挡数为3个
#if defined(__CHIP3520__)
		g_coverAreaCountLimit = 0; 
#endif
	}
	/*
	else if (TD_2708XE_L == productID)
	{

	}
	else if (TD_2716XE_L == productID)
	{

	}
	else if (TD_2704XD_L == productID)
	{

	}*/
	else if (TD_2708XD_L == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 8;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080 ;
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 6;
		m_localDefaChnnRateNumNtsc			= 7;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*6*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 6*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*7*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 7*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 6144;
		m_pLocalBitRateRange[4]             = 7168;
		m_pLocalBitRateRange[5]             = 8192;
		m_pLocalBitRateRange[6]             = 9216;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 12288;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 6;
		m_netDefaChnnRateNumNtsc			= 7;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}
		g_coverAreaCountLimit = 0;
	}
	else if ((TD_2716XD_L == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum		    = 16;				
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080 ;
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 6;
		m_localDefaChnnRateNumNtsc			= 7;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*6*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 6*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 16*7*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 7*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 6144;
		m_pLocalBitRateRange[4]             = 7168;
		m_pLocalBitRateRange[5]             = 8192;
		m_pLocalBitRateRange[6]             = 9216;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 12288;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 6;
		m_netDefaChnnRateNumNtsc			= 7;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 512 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 512 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}
		g_coverAreaCountLimit = 0;
		m_preRecordType     = PRERECORD_MODE_MEMORY;
	}
	else if ((TD_2704XD_M == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 2;
		m_pPciToEsataIndex       = new unsigned char [4];
		m_pPciToEsataIndex[0] = 9;
		m_pPciToEsataIndex[1] = 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*12*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*15*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 3072;
		m_pLocalBitRateRange[4]             = 4096;
		m_pLocalBitRateRange[5]             = 6144;
		m_pLocalBitRateRange[6]             = 8192;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 10240;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			//REC_DATA_READ_BUF_SIZE	= 6 * 1024 * 1024 + 8 * 1024;
			//REC_DATA_WRITE_BUF_SIZE = 6 * 1024 * 1024 + 8 * 1024;

			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if ((TD_2708XD_M == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 8;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*12*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*15*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 3072;
		m_pLocalBitRateRange[4]             = 4096;
		m_pLocalBitRateRange[5]             = 6144;
		m_pLocalBitRateRange[6]             = 8192;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 10240;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if ((TD_2716XD_M == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum		    = 16;				
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 12 * 8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 15 * 8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 3072;
		m_pLocalBitRateRange[4]             = 4096;
		m_pLocalBitRateRange[5]             = 6144;
		m_pLocalBitRateRange[6]             = 8192;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 10240;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 1;
#if defined(__CUSTOM_IN__) || defined(__CUSTOM_ZNV__) || defined(__CUSTOM_CNB__)
		m_netVideoSize						= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
#else
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
#endif
		
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
#if defined(__CUSTOM_IN__) || defined(__CUSTOM_ZNV__) || defined(__CUSTOM_CNB__)
		m_net_rate.rate_total_pal_on_cif	= 25 * 20 * 16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25 * 20;
		m_net_rate.rate_total_ntsc_on_cif	= 30 * 20 * 16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30 * 20;
#endif
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1536;
		m_pNetBitRateRange[5]               = 2048;
		m_pNetBitRateRange[6]               = 4096;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;

			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;

		CNetStreamAllotDevice::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum, 16, 8);
	}
	else if ((TD_2704XD_P == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
#if defined(__PRIMARY_WRDISK__)
		m_netVideoOutputNum		= 4;
#else
		m_netVideoOutputNum		= 1;
#endif
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 2;
		m_pPciToEsataIndex       = new unsigned char [4];
		m_pPciToEsataIndex[0] = 9;
		m_pPciToEsataIndex[1] = 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		//m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080 ;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
#if defined(__PRIMARY_WRDISK__)
		m_sendFirstStreamMaxNum     = 4;
#else
		m_sendFirstStreamMaxNum     = 1;
#endif
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 6144;
		m_pLocalBitRateRange[4]             = 7168;
		m_pLocalBitRateRange[5]             = 8192;
		m_pLocalBitRateRange[6]             = 9216;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 10240;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			//REC_DATA_READ_BUF_SIZE	= 6 * 1024 * 1024 + 8 * 1024;
			//REC_DATA_WRITE_BUF_SIZE = 6 * 1024 * 1024 + 8 * 1024;

			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if ((TD_2708XD_P == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 8;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 4;
#if defined(__PRIMARY_WRDISK__)
		m_netVideoOutputNum		= 4;
#else
		m_netVideoOutputNum		= 1;
#endif
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
#if defined(__PRIMARY_WRDISK__)
		m_sendFirstStreamMaxNum     = 8;
#else
		m_sendFirstStreamMaxNum     = 1;
#endif
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 6144;
		m_pLocalBitRateRange[4]             = 7168;
		m_pLocalBitRateRange[5]             = 8192;
		m_pLocalBitRateRange[6]             = 9216;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 10240;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if ((TD_2716XD_P == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum		    = 16;				
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 4;

#if defined(__PRIMARY_WRDISK__)
		m_netVideoOutputNum		= 4;
#else
		m_netVideoOutputNum		= 1;
#endif
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
#if defined(__PRIMARY_WRDISK__)
		m_sendFirstStreamMaxNum     = 16;
#else
		m_sendFirstStreamMaxNum     = 1;
#endif
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 4;
		
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 25 * 8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 30 * 8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 6144;
		m_pLocalBitRateRange[4]             = 7168;
		m_pLocalBitRateRange[5]             = 8192;
 		m_pLocalBitRateRange[6]             = 9216;
 		m_pLocalBitRateRange[7]             = 10240;
 		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 4 * 1024 * 1024 + 256 * 1024;

			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if ((TD_2704XE_S == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M   = 512;
		m_localVideoInputNum	= 4;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 4;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*2;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*2;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 3072;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 5120;
		m_pLocalBitRateRange[5]             = 6144;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 3 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 768;
	}
	else if ((TD_2708XE_S == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*2;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*2;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 3072;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 5120;
		m_pLocalBitRateRange[5]             = 6144;
		m_localDefaBitRateValue             = 4096;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if ((TD_2716XE_S == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;
		
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 25 * 2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*2;		
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 30 * 2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*2;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 3072;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 5120;
		m_pLocalBitRateRange[5]             = 6144;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 4 * 1024 * 1024 + 256 * 1024;

			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if (TD_2704XD_S == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 4;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 2;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 4;
		m_netlimitSendCopies   = 4;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4 * 25 * 2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 4 * 30 * 2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 3072;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 5120;
		m_pLocalBitRateRange[5]             = 6144;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 4 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 4 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

	}
	else if (TD_2708XD_S == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 8;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 2;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;
		m_maxStreamIDNumForPlayOrBackup = 8;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 8;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8 * 25 * 2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*2;		
		m_local_rate.rate_total_ntsc_on_cif	= 8 * 30 * 2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*2;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 3072;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 5120;
		m_pLocalBitRateRange[5]             = 6144;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 8 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 8 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

	}
	else if (TD_2716XD_S == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum		    = 16;				
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;

		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 18;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;

		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 8;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 25 * 2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*2;		
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 30 * 2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*2;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 3072;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 5120;
		m_pLocalBitRateRange[5]             = 6144;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 3 * 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 512;
		CRecord_file::SetBufSize(3 * 1024 * 1024);
#endif
		m_preRecordType = PRERECORD_MODE_MEMORY;

	}
	else if ((TD_2704XS_SL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M   = 512;
		m_localVideoInputNum	= 4;
		m_audioInputNum		    = 1;				
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 4;
		m_netlimitSendCopies   = 2;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 2;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 7*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*2;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*2;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 3072;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 5120;
		m_pLocalBitRateRange[5]             = 6144;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 768;
	}
	else if ((TD_2708XS_SL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 1;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*2;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*2;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 3072;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 5120;
		m_pLocalBitRateRange[5]             = 6144;
		m_localDefaBitRateValue             = 4096;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 768;
	}
	else if ((TD_2716XS_SL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum		    = 1;				
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 25 * 2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*2;		
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 30 * 2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*2;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 3072;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 5120;
		m_pLocalBitRateRange[5]             = 6144;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 4 * 1024 * 1024 + 256 * 1024;

			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			CRecord_file::SetBufSize(2 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 768;
	}
	else if ((TD_2704AS_SL == productID) || (TD_2704AS_SL_A == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M   = 512;
		m_localVideoInputNum	= 4;
		m_audioInputNum		    = 1;
		if (TD_2704AS_SL_A == productID)
		{
			m_sensorInputNum	= 4;
			m_audioInputNum		= 4;
		}
		else
		{
			m_sensorInputNum		= 0;
		}
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif

#if defined(__CHIPGM__)
		m_netVideoInputNum		= 0;
#endif

#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		if (TD_2704AS_SL_A == productID)
		{
			m_bHaveSpot = true;
		}
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		
 		if (TD_2704AS_SL_A == productID)
 		{
 			m_videoOutDevice |= VIDEO_OUT_DEVICE_CVBS;
 		}
#if defined(__CHIPGM__)
		m_displayResolutionMask = VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#else
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#endif
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 4;
		m_netlimitSendCopies   = 2;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 2;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 7*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
#if defined(__CHIPGM__)
		m_localDefaChnnRateNumPal			= 12;//25;
		m_localDefaChnnRateNumNtsc			= 15;//30;
#else
		m_localDefaChnnRateNumPal			= 25;//25;
		m_localDefaChnnRateNumNtsc			= 30;//30;
#endif
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8; 
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;  		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8; 
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8; 				
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 6144 * 4);
#if defined(__CHIPGM__)
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 6144 * 4);
#else
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 6144 * 4);
#endif
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 6144 * 4);
#if defined(__CHIPGM__)
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 6144 * 4);
#else
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 6144 * 4);
#endif
			}
		}
		// sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{			
#if defined(__CHIPGM__)
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF,  15 * 4, 15, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1,  15 * 4, 15, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 15 * 4, 15, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 15 * 4, 15, 6144 * 4);
#else
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF,  30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1,  30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 6144 * 4);
#endif
			} 
			else
			{				
#if defined(__CHIPGM__)
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF,  12 * 4, 12, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1,  12 * 4, 12, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 12 * 4, 12, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 12 * 4, 12, 6144 * 4);
#else
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF,  25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1,  25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 6144 * 4);
#endif
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;

		m_netDefaChnnRateNumPal			= 6;
		m_netDefaChnnRateNumNtsc		= 7;

		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*4;
		m_net_rate.rate_chnn_pal_on_cif		= 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*4;
		m_net_rate.rate_chnn_ntsc_on_cif	= 7;

		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			//CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		CRecord_file::SetBufSize(1 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 1;
	}
	else if ((TD_2708AS_SL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 1;
		m_sensorInputNum		= 0;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;				
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 6144 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 6144 * 8);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 6144 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 6144 * 8);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF,  30 * 8, 30, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1,  30 * 8, 30, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 6144 * 8);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF,  25 * 8, 25, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1,  25 * 8, 25, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 6144 * 8);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 4096;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 12*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 15*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			//CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		CRecord_file::SetBufSize(1 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 1;
	}
	else if ((TD_2716AS_SL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 1;
		m_sensorInputNum		= 0;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 2;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 25 * 8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 30 * 8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 6144 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 15 * 16, 15, 6144 * 16);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 6144 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 12 * 16, 12, 6144 * 16);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF,  30* 16, 30, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1,  30* 16, 30, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 15 * 16, 15, 6144 * 16);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF,  25* 16, 25, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1,  25* 16, 25, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 12 * 16, 12, 6144 * 16);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *12;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 15;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
		g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 12 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 300;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 2;
	}
	else if ((TD_2704TS_S == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M   = 512;
		m_localVideoInputNum	= 4;
		m_audioInputNum		    = 1;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 4;
		m_netlimitSendCopies   = 2;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 2;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 7*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720/* | DVRVIDEO_SIZE_HD1080*/;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*2;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*2;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 3072;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 5120;
		m_pLocalBitRateRange[5]             = 6144;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 768;
	}
	else if ((TD_2708TS_S == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 1;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*2;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*2;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;


		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 6144 * 4);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 6144 * 4);
			}
		}
		// sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF,30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1,30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 15 * 4, 15, 6144 * 4);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 12 * 4, 12, 6144 * 4);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 6;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 3072;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 5120;
		m_pLocalBitRateRange[5]             = 6144;
		m_localDefaBitRateValue             = 4096;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;
	}
	else if ((TD_2716TS_S == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum		    = 1;				
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 12 * 8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 15 * 8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 8, 15, 12288 * 8);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 8, 12, 12288 * 8);
			}
		}
		//sub code 
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 8, 15, 12288 * 8);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 8, 12, 12288 * 8);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#else
		m_bCanChangLocalVideoInfo = true;
#endif
		m_localBitRateCount                 = 10;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 4096;
		m_pLocalBitRateRange[4]             = 6144;
		m_pLocalBitRateRange[5]             = 7168;
		m_pLocalBitRateRange[6]             = 8192;
		m_pLocalBitRateRange[7]             = 9216;
		m_pLocalBitRateRange[8]             = 10240;
		m_pLocalBitRateRange[9]             = 12288;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 4 * 1024 * 1024 + 256 * 1024;

			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			CRecord_file::SetBufSize(2 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;
	}
	else if ((TD_2704TS_PL == productID) || (TD_2704AS_PL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M   = 512;
		m_localVideoInputNum	= 4;
		if (TD_2704TS_PL == productID)
		{
			m_audioInputNum		    = 1;				
			m_sensorInputNum		= 0;
			m_videoOutputNum		= 4;
			m_sensorOutputNum		= 1;
		}
		
		if (TD_2704AS_PL == productID)
		{
			m_audioInputNum		    = 4;				
			m_sensorInputNum		= 4;
			m_videoOutputNum		= 4;
			m_sensorOutputNum		= 1;
		}
		
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 4;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 2;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 7*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 4, 15, 12288 * 4);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 4, 12, 12288 * 4);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 4, 15, 12288 * 4);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 4, 12, 12288 * 4);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			//CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		CRecord_file::SetBufSize(1 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 1;
	}
	else if (TD_2708TS_PL == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 1;				
		m_sensorInputNum		= 0;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
#if defined(__CHIPGM__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 4;
#endif
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;

#if defined(__CHIPGM__)
		m_displayResolutionMask = VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080 ;
#else
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#endif

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CHIPGM__)
		if (TD_2708TS_PL == CProduct::Instance()->ProductType())
		{
			m_localVideoSize = DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H;
		}
		else
		{
			m_localVideoSize = DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_HD720;
		}
#else
		m_localVideoSize = DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
#if defined(__CHIPGM__)
				if (TD_2708TS_PL == CProduct::Instance()->ProductType())
				{	
					m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
				}
#else
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
#endif
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 8, 15, 12288 * 8);
			}
			else
			{
#if defined(__CHIPGM__)
				if (TD_2708TS_PL == CProduct::Instance()->ProductType())
				{
					m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);
				}
#else
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);
#endif
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 8, 12, 12288 * 8);
			}
		}
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 8, 15, 12288 * 8);			
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);				
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 8, 12, 12288 * 8);	
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 8192;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

// #if defined(__PRIMARY_WRDISK__)
// 			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
// 			CRecord_file::SetBufSize(4 * 1024 * 1024);
// #endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 24 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 600;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_ipcTransferChnnNum = 4;
	}
	else if ((TD_2716TS_PL == productID) || (TD_2716AS_PL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum		    = 1;
		m_sensorInputNum		= 0;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 8;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 25 * 8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 30 * 8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 16, 30, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 16, 15, 12288 * 16);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 16, 25, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 16, 12, 12288 * 16);
			}
		}
		//sub code
		{
			//m_isSupport = true;
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 16, 15, 12288 * 16);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 16, 12, 12288 * 16);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#else
		m_bCanChangLocalVideoInfo = true;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;    //xian
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
		g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
		REC_DATA_WRITE_BUF_SIZE	= 2 * 1024 * 1024;
		CRecord_file::SetBufSize(REC_DATA_WRITE_BUF_SIZE, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(REC_DATA_READ_BUF_SIZE, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 24 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 3;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 1200;

		SetStaticVideoBitrate(DVRVIDEO_SIZE_HD1080, 3 * 1024);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_3M, 3 * 1024);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_HD720, 1536);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_960P, 2 * 1024);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_SXGA, 2 * 1024);
		
		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_ipcTransferChnnNum = 8;
	}
	else if ((TD_2704AS_S == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M   = 512;
		m_localVideoInputNum	= 4;
		m_audioInputNum		    = 1;				
		m_sensorInputNum		= 0;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 1;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif

		m_netSendCopies		= 4;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 2;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 7*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 6144 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 6144 * 4);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 6144 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 6144 * 4);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 6144 * 4);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 6144 * 4);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#else
        m_bCanChangLocalVideoInfo = true;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			//CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		CRecord_file::SetBufSize(1 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 1;
	}
	else if ((TD_2708AS_S == productID) || (TD_2708AS_S_A == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 1;
		if (TD_2708AS_S_A == productID)
		{
			m_sensorInputNum	= 4;
			m_audioInputNum		= 4;
		}
		else
		{
			m_sensorInputNum		= 0;
		}
		
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		if (TD_2708AS_S_A == productID)
		{
			m_bHaveSpot = false;
		}
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
 		if (TD_2708AS_S_A == productID)
 		{
 			m_videoOutDevice |= VIDEO_OUT_DEVICE_CVBS;
 		}
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 6144 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 6144 * 8);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 6144 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 6144 * 8);
			}
		}
		//sub
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 8, 30, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 8, 30, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 6144 * 8);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 8, 25, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 8, 25, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 6144 * 8);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#else
		m_bCanChangLocalVideoInfo = true;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 4096;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 6;
		m_netDefaChnnRateNumNtsc			= 7;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			//CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		CRecord_file::SetBufSize(1 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
// 			if (TD_2708AS_S_A == productID)
// 			{
// 				m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_HD1080;
// 			}
// 			else
			{
				m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
			}
			
		}

		m_ipcTransferChnnNum = 1;
	}
	else if ((TD_2716AS_S == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum		    = 1;				
		m_sensorInputNum		= 0;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 2;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 25 * 2;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*2;		
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 30 * 2;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*2;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 16, 30, 6144 * 16);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 16, 25, 6144 * 16);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 16, 30, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 16, 30, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 16, 30, 6144 * 16);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 16, 25, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 16, 25, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 6144 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 16, 25, 6144 * 16);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
		g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 12 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 300;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 2;
	}
	else if (TD_2704TD_PL == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M   = 512;
		m_localVideoInputNum	= 4;
		m_audioInputNum		    = 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 4;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 2;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 7*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1| DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 4, 15, 12288 * 4);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 4, 12, 12288 * 4);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 30 * 4, 30, 12288 * 4);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 25 * 4, 25, 12288 * 4);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			//CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		CRecord_file::SetBufSize(1 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 1;
	}
	else if ((TD_2708TD_PL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum			= 8;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;

#if defined(__CHIPGM__)
		m_displayResolutionMask = VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#else
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#endif

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 8, 15, 12288 * 8);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 8, 12, 12288 * 8);
			}
		}
        //sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 8, 15, 12288 * 8);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 8, 12, 12288 * 8);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 8192;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

// #if defined(__PRIMARY_WRDISK__)
// 			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
// 			CRecord_file::SetBufSize(4 * 1024 * 1024);
// #endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 24 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 600;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_ipcTransferChnnNum = 4;
	}
	else if ((TD_2716TD_PL == productID) || (TD_2716AC_PL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 16;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		if(TD_2716AC_PL == productID)
		{
			m_bSupportMCU			= false;
		}
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 25 * 8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 30 * 8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 16, 30, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 16, 15, 12288 * 16);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 16, 25, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 16, 12, 12288 * 16);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 16, 15, 12288 * 16);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 6, 12, 12288 * 16);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#else
		m_bCanChangLocalVideoInfo = true;
#endif
		m_localBitRateCount					= 12;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
		g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;


#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 24 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 3;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 1200;

		SetStaticVideoBitrate(DVRVIDEO_SIZE_HD1080, 3 * 1024);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_3M, 3 * 1024);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_HD720, 1536);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_960P, 2 * 1024);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_SXGA, 2 * 1024);
		
		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_ipcTransferChnnNum = 8;
	}
	else if ((TD_2732TD_PL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 32;
		m_audioInputNum			= 16;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 32;
		m_netlimitSendCopies   = 32;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 32 * 25 * 8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;
		m_local_rate.rate_total_ntsc_on_cif	= 32 * 30 * 8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;
		m_local_rate.max_rate_total			= 1024*32;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 32, 30, 12288 * 32);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 32, 30, 12288 * 32);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 32, 15, 12288 * 32);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 32, 25, 12288 * 32);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 32, 25, 12288 * 32);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 32, 12, 12288 * 32);
			}
		}
		//sub code 
		{
			//m_isSupport = true;
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{   
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 32, 30, 12288 * 32);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 32, 30, 12288 * 32);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 32, 30, 12288 * 32);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 32, 30, 12288 * 32);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 32, 15, 12288 * 32);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 32, 25, 12288 * 32);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 32, 25, 12288 * 32);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 32, 25, 12288 * 32);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 32, 25, 12288 * 32);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 32, 12, 12288 * 32);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#else
		m_bCanChangLocalVideoInfo = true;
#endif
		m_localBitRateCount                 = 12;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		//m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoSize                      = DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;    //xian
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 32 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 32 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*32;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 11;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]               = 1024;
		m_pNetBitRateRange[8]               = 1280;
		m_pNetBitRateRange[9]               = 1536;
		m_pNetBitRateRange[10]              = 1792;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;

			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			CRecord_file::SetBufSize(2 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;
	}
	else if ((TD_2704TD_P == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M   = 512;
		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 4;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 2;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 7*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 30 * 4, 30, 12288 * 4);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 25 * 4, 25, 12288 * 4);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 30 * 4, 30, 12288 * 4);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 25 * 4, 25, 12288 * 4);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			//CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		CRecord_file::SetBufSize(1 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 1;
	}
	else if ((TD_2708TD_P == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum			= 8;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;

#if defined(__CHIPGM__)
		m_displayResolutionMask = VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#else
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#endif

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 8, 15, 12288 * 8);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 8, 12, 12288 * 8);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 8, 15, 12288 * 8);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 8, 12, 12288 * 8);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 8192;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

// #if defined(__PRIMARY_WRDISK__)
// 			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
// 			CRecord_file::SetBufSize(4 * 1024 * 1024);
// #endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 24 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 600;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_ipcTransferChnnNum = 4;
	}
	else if ((TD_2716TD_P == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 16;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 8;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 25 * 8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 30 * 8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 16, 30, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 16, 15, 12288 * 16);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 16, 25, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 16, 12, 12288 * 16);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 16, 15, 12288 * 16);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 16, 12, 12288 * 16);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#else
		m_bCanChangLocalVideoInfo = true;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
		g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 4 * 1024 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 4 * 1024 * 1024;
		CRecord_file::SetBufSize(4 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(4 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 48 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 1200;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_ipcTransferChnnNum = 8;
	}
	else if ((TD_2704TE_M == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M   = 512;
		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 0;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 4;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 2;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 7*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 4, 15, 12288 * 4);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 4, 12, 12288 * 4);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 30 * 4, 30, 12288 * 4);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 25 * 4, 25, 12288 * 4);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			//CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		CRecord_file::SetBufSize(1 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 1;
	}
	else if ((TD_2708TE_M == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 4;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 0;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;

#if defined(__CHIPGM__)
		m_displayResolutionMask = VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#else
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#endif

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 8, 15, 12288 * 8);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 8, 12, 12288 * 8);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 8, 15, 12288 * 8);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 8, 12, 12288 * 8);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 8192;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

// #if defined(__PRIMARY_WRDISK__)
// 			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
// 			CRecord_file::SetBufSize(4 * 1024 * 1024);
// #endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 24 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 6;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 600;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_ipcTransferChnnNum = 4;
	}
	else if ((TD_2716TE_M == productID) || (TD_2716AE_PL == productID) || (TD_2708AS_PL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		if (TD_2708AS_PL == productID)
		{
			m_localVideoInputNum	= 8;
		}
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		if ((TD_2716AE_PL == productID) || (TD_2708AS_PL == productID))
		{
			m_sensorInputNum	= 4;
		}
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 8;
		if (TD_2708AS_PL == productID)
		{
			m_netVideoInputNum	= 4;
		}
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 2;

		m_bSupportESATA			= false;
		m_eSataIndex            = 0;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16 * 25 * 8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 30 * 8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 16, 30, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 16, 15, 12288 * 16);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 16, 25, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 16, 12, 12288 * 16);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 15 * 16, 15, 12288 * 16);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD1080, 12 * 16, 12, 12288 * 16);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#else
		m_bCanChangLocalVideoInfo = true;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 8192;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *25;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 30;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
		g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;


#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024 + 512 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024 + 512 * 1024;
		CRecord_file::SetBufSize(REC_DATA_WRITE_BUF_SIZE, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 24 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 3;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 1200;

#if defined(__DVR_ULTIMATE__)
		if (TD_2708AS_PL == productID)
		{
			m_localVideoInputNum	= 8;
			m_ipcMaxTotalBitRate	= 24 *1024; //64M
			m_ipcMaxVideoOutNum		= 1;
		}
#endif

		//if (TD_2708AS_PL != productID)
		{
			SetStaticVideoBitrate(DVRVIDEO_SIZE_HD1080, 3 * 1024);
			SetStaticVideoBitrate(DVRVIDEO_SIZE_3M, 3 * 1024);
			SetStaticVideoBitrate(DVRVIDEO_SIZE_HD720, 1536);
			SetStaticVideoBitrate(DVRVIDEO_SIZE_960P, 2 * 1024);
			SetStaticVideoBitrate(DVRVIDEO_SIZE_SXGA, 2 * 1024);
		}

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_ipcTransferChnnNum = 8;
	}
	else if ((TD_2704AE_SL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M   = 512;
		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 0;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 4;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 2;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 7*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 15 * 4, 15, 12288 * 4);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 12288 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 12 * 4, 12, 12288 * 4);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 15 * 4, 15, 12288 * 4);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 12288 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 12 * 4, 12, 12288 * 4);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			//CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		CRecord_file::SetBufSize(1 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 1;
	}
	else if ((TD_2708AE_SL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 1;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 0;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;

#if defined(__CHIPGM__)
		m_displayResolutionMask = VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#else
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#endif

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 15 * 8, 15, 12288 * 8);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 12 * 8, 12, 12288 * 8);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 12288 * 8);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 12288 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 12288 * 8);
			}
			

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 4096;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			//REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			//CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 6 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 1;
	}
	else if ((TD_2716AE_SL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 16;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 16;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
#if defined(__DVR_ULTIMATE__)
		m_netVideoInputNum		= 2;
#else
		m_netVideoInputNum		= 0;
#endif
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 6;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;

		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 12;
		m_localDefaChnnRateNumNtsc			= 15;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;

		m_local_rate.rate_total_pal_on_cif	= 16 * 25 * 8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;
		m_local_rate.rate_total_ntsc_on_cif	= 16 * 30 * 8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;
		m_local_rate.max_rate_total			= 1024 * 16;

		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 15 * 16, 15, 12288 * 16);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 12288 * 16);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 12 * 16, 12, 12288 * 16);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 16, 30, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 16, 30, 12288 * 16);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 16, 25, 12288 * 16);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 16, 25, 12288 * 16);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#else
		m_bCanChangLocalVideoInfo = true;
#endif
		m_localBitRateCount					= 16;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 768;
		m_pLocalBitRateRange[1]             = 1024;
		m_pLocalBitRateRange[2]             = 1536;
		m_pLocalBitRateRange[3]             = 2048;
		m_pLocalBitRateRange[4]             = 2304;
		m_pLocalBitRateRange[5]             = 2560;
		m_pLocalBitRateRange[6]				= 3072;
		m_pLocalBitRateRange[7]				= 4096;
		m_pLocalBitRateRange[8]				= 5120;
		m_pLocalBitRateRange[9]				= 6144;
		m_pLocalBitRateRange[10]            = 7168;
		m_pLocalBitRateRange[11]            = 8192;
		m_pLocalBitRateRange[12]            = 9216;
		m_pLocalBitRateRange[13]            = 10240;
		m_pLocalBitRateRange[14]            = 11264;
		m_pLocalBitRateRange[15]            = 12288;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 12;
		m_netDefaChnnRateNumNtsc			= 15;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 16 *12;
		m_net_rate.rate_chnn_pal_on_cif	    = 12;
		m_net_rate.rate_total_ntsc_on_cif	= 16 * 15;
		m_net_rate.rate_chnn_ntsc_on_cif    = 15;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 18;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue               = 512;

		g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
		g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;

#if defined(__PRIMARY_WRDISK__)
		
		REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;

		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_LOCAL);
		CRecord_file::SetBufSize(2 * 1024 * 1024, FILE_BUF_TYPE_IP);
		CRecord_file::SetBufSize(256 * 1024, FILE_BUF_TYPE_MIN);
#endif
		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 12 *1024; //64M
		m_ipcMaxVideoOutNum		= 1;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 1024 * 4;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 300;

		m_bIPCUseStaticBitRate	= true;
		m_bSupportDisplayMinor	= true;
		m_poeInputNum			= 0;

		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_ipcTransferChnnNum = 2;
	}
	else if ((TD_2004AL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M   = 512;
		m_localVideoInputNum	= 4;
		m_audioInputNum		    = 1;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
#if defined(__CHIPGM__)
		m_netVideoOutputNum		= 1;
#else
		m_netVideoOutputNum		= 1;
#endif
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
#if defined(__CHIPGM__)
		m_displayResolutionMask = VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#else
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;
#endif
#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies		= 4;
		m_netlimitSendCopies   = 2;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 2;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 7*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CHIPGM__) 
		m_localVideoSize					= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 4*25*8; 
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;  		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30*8; 
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8; 				
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 6144 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 6144 * 4);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 6144 * 4);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 6144 * 4);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 4, 30, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 4, 30, 6144 * 4);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 4, 25, 6144 * 4);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 4, 25, 6144 * 4);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 7;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 2560;
		m_pLocalBitRateRange[3]             = 3072;
		m_pLocalBitRateRange[4]             = 4096;
		m_pLocalBitRateRange[5]             = 5120;
		m_pLocalBitRateRange[6]             = 6144;
		m_localDefaBitRateValue             = 4096;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			= 6;
		m_netDefaChnnRateNumNtsc		= 7;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*4;
		m_net_rate.rate_chnn_pal_on_cif		= 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*4;
		m_net_rate.rate_chnn_ntsc_on_cif	= 7;

		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;
	}
	else if ((TD_2008AS == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 1;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_960H;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD720;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

		m_pEncodeCheck->Initial(m_localVideoInputNum);
		m_pSubEncodeCheck->Initial(m_localVideoInputNum);

		//for (int i=0; i<m_localVideoInputNum; i++)
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 6144 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 6144 * 8);
			}
			else
			{
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 6144 * 8);
				m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 6144 * 8);
			}
		}
		//sub code
		{
			if (VIDEO_FORMAT_NTSC == g_video_format)
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 30 * 8, 30, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 30 * 8, 30, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 30 * 8, 30, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 30 * 8, 30, 6144 * 8);
			}
			else
			{
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF, 25 * 8, 25, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1, 25 * 8, 25, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 25 * 8, 25, 6144 * 8);
				m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 25 * 8, 25, 6144 * 8);
			}

			CLocalSubStreamAllot::Instance()->Init(m_productType, m_localVideoInputNum, m_localVideoInputNum);
		}
#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#else
		m_bCanChangLocalVideoInfo = true;
#endif
		m_localBitRateCount                 = 7;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1024;
		m_pLocalBitRateRange[1]             = 2048;
		m_pLocalBitRateRange[2]             = 2560;		
		m_pLocalBitRateRange[3]             = 3072;
		m_pLocalBitRateRange[4]             = 4096;
		m_pLocalBitRateRange[5]             = 5120;
		m_pLocalBitRateRange[6]             = 6144;
		m_localDefaBitRateValue             = 4096;
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 6;
		m_netDefaChnnRateNumNtsc			= 7;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
		MAX_VIDEO_FRAME_LEN = 1024 * 1024;
	}
	else if ((TD_2708XE_P == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		m_localVideoInputNum	= 8;
		m_audioInputNum		    = 4;				
		m_sensorInputNum		= 8;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 5;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 2;
		m_pPciToEsataIndex      = new unsigned char [4];
		m_pPciToEsataIndex[0]	= 9;
		m_pPciToEsataIndex[1]	= 10;
		m_bHaveUsbToEsata       = false;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bHaveSpot             = false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080 ;

#if defined(__TW01_RILI__)
		m_displayResolutionMask	= VGA_1024X768 | VGA_1280X1024;
#endif
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
		m_maxStreamIDNumForPlayOrBackup = 2;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_HD720;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_HD1080;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 8*25*8;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30*8;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;

#if defined(__CUSTOM_SHANGHAI__)
		m_bCanChangLocalVideoInfo = false;
#endif
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 1536;
		m_pLocalBitRateRange[1]             = 1792;
		m_pLocalBitRateRange[2]             = 2048;
		m_pLocalBitRateRange[3]             = 3072;
		m_pLocalBitRateRange[4]             = 4096;
		m_pLocalBitRateRange[5]             = 6144;
		m_pLocalBitRateRange[6]             = 8192;
		m_pLocalBitRateRange[7]             = 10240;
		m_pLocalBitRateRange[8]             = 12288;
		m_localDefaBitRateValue             = 10240;
// #if defined(__PRIMARY_WRDISK__)
// 		m_localDefaBitRateValue             = 12288;
// #endif
		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 256;
		m_pNetBitRateRange[1]               = 384;
		m_pNetBitRateRange[2]               = 768;
		m_pNetBitRateRange[3]               = 1024;
		m_pNetBitRateRange[4]               = 1280;
		m_pNetBitRateRange[5]               = 1536;
		m_pNetBitRateRange[6]               = 1792;
		m_netDefaBitRateValue               = 768;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
			CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
		}

		m_preRecordType = PRERECORD_MODE_MEMORY;
	}
	else if(TD_2516FD_IP == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 8*1024; //8MB
		m_ipcMaxVideoOutNum		= 9;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 3;
		m_ipcDefaBitRate		= 1024;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 150;

		m_localVideoInputNum	= 16;
		m_sensorInputNum		= 16;
		m_audioInputNum			= 16;
		m_netVideoInputNum		= 8;
		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		}
	
		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 8;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = false;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_netLimitRatForFirstStreamNum        = 7;

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount					= 20;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;
		m_pLocalBitRateRange[14]            = 7168;
		m_pLocalBitRateRange[15]            = 8192;
		m_pLocalBitRateRange[16]            = 9216;
		m_pLocalBitRateRange[17]            = 10240;
		m_pLocalBitRateRange[18]            = 11264;
		m_pLocalBitRateRange[19]            = 12288;

		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		m_ipcTransferChnnNum			= 1;
	}
	else if(TD_2616LD_IP == productID)
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcMaxTotalBitRate	= 40*1024; //40MB
		m_ipcMaxVideoOutNum		= 16;
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD1080;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 8192;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 250;
		m_ipcFrameRate.max_rate_total_on_vga = 600;

		m_localVideoInputNum	= 16;
		m_sensorInputNum		= 16;
		m_audioInputNum			= 16;
		m_netVideoInputNum		= 8;
		m_pSupportVideoSize		= new unsigned long[m_localVideoInputNum+m_netVideoInputNum];
		int i = 0;
		for(i = 0; i < m_localVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = 0;
		}
		for(; i < (m_localVideoInputNum+m_netVideoInputNum); i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080;
		}

		m_videoOutputNum		= 16;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 4;
		m_localKeyboardType		= KEYBOARD_2UA;
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 2560 * 1024;						//可以预录2.5MB / (4Mb/s / 8b/B) = 5秒的数据
		REC_DATA_READ_BUF_SIZE	= 512 * 1024;
		REC_DATA_WRITE_BUF_SIZE	= 1024 * 1024;
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 4;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = false;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 18;
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_netLimitRatForFirstStreamNum        = 7;
		m_pbChannelNumForLimitFirstStream = 0;

		m_firstStreamLimitBitRate = 16*1024;	//16MB TD_2616LD_IP

#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
		m_localVideoDefaSize				= DVRVIDEO_SIZE_D1;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_local_rate.rate_total_pal_on_cif	= 16*25*4;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
		m_local_rate.rate_total_ntsc_on_cif	= 16*30*4;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount					= 18;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;
		m_pLocalBitRateRange[14]            = 7168;
		m_pLocalBitRateRange[15]            = 8192;
		m_pLocalBitRateRange[16]            = 9216;
		m_pLocalBitRateRange[17]            = 10240;
//		m_pLocalBitRateRange[18]            = 11264;
//		m_pLocalBitRateRange[19]            = 12288;

		m_localDefaBitRateValue             = 1536;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 25;
		m_netDefaChnnRateNumNtsc			= 30;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 25*16;
		m_net_rate.rate_chnn_pal_on_cif	    = 25;
		m_net_rate.rate_total_ntsc_on_cif	= 30*16;
		m_net_rate.rate_chnn_ntsc_on_cif    = 30;
		m_net_rate.max_rate_total			= 512*16;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}
		m_ipcTransferChnnNum			= 1;
	}
	
	if((TD_2804NE_L == productID) || (TD_2804NS_A == productID) || (TD_2804PS_A == productID) || (TD_2804PE_A == productID) \
		|| (TD_2804NS_SL == productID) || (TD_2804NE_B == productID) || (TD_2804PS_AL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;

		m_localVideoInputNum	= 0;
		m_sensorInputNum		= 4;//0;//
		m_audioInputNum			= 0;
		m_netVideoInputNum		= 4;
		m_ipcMaxTotalBitRate	= 16 * 1024;	//16MB
		m_bLimitByBitRate		= false;
		m_ipcMaxVideoOutNum		= 4;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 4096;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 300;

		m_pSupportVideoSize		= new unsigned long[m_netVideoInputNum];

		for(int i = 0; i < m_netVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UT;
#if 1
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 2560 * 1024;				//可以预录2.5MB / (4Mb/s / 8b/B) = 5秒的数据
#else
		m_preAlarmTime			= 30;
		m_preRecordType			= PRERECORD_MODE_DISK;
		PRE_RECORD_MAX_LEN		= 25 * 1024 *1024;
#endif
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = true;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 20;
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 4;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 4;
		m_netlimitSendCopies   = 4;
		m_bLimitSecondStreamForFirstStreamNum	= false;
		m_firstStreamNumForLimitSecondStream	= m_sendFirstStreamMaxNum;
		m_netLimitRatForFirstStreamNum			= 15;
		m_pbChannelNumForLimitFirstStream		= 1;
		m_maxStreamIDNumForPlayOrBackup			= 1;

		m_firstStreamLimitBitRate = 10*1024;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_localBitRateCount					= 14;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		m_ipcTransferChnnNum				= 4;

		if((TD_2804PS_A == productID) || (TD_2804PS_AL == productID))
		{
			m_poeInputNum		= 4;
		}
		if(TD_2804PE_A == productID)
		{
			m_poeInputNum		= 4;
		}
		if(TD_2804NS_SL == productID)
		{
			m_sensorInputNum	= 0;
			m_speekType			= 0;
		}
		if(TD_2804NE_B == productID)
		{
			m_localKeyboardType	= KEYBOARD_1UG;
		}
	}
	else if(
	#if defined(__CUSTOM_IL03__)
		(TD_2808NE_A == productID) ||
	#else
		/*(TD_2808NE_A == productID) || */
	#endif
		/*(TD_2808ND_A == productID) || */
		(TD_2808PE_A == productID) || (TD_2808PD_A == productID)
		|| (TD_2808PE_AL == productID) || (TD_2808PD_A16 == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;

		m_localVideoInputNum	= 0;
		m_sensorInputNum		= 8;
		m_audioInputNum			= 0;
		m_netVideoInputNum		= 8;
		m_poeInputNum			= 0;
		m_ipcMaxTotalBitRate	= 32*1024;	//32MB
		m_ipcMaxVideoOutNum		= 8;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 4096;

		m_bSupportDisplayMinor	= true;

#if defined(__CUSTOM_US02__)
		m_bIPCUseStaticBitRate	= true;
#else
		m_bIPCUseStaticBitRate	= true;
#endif
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 600;

		m_pSupportVideoSize		= new unsigned long[m_netVideoInputNum];

		for(int i = 0; i < m_netVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UG;
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 2560*1024;				//可以预录2.5MB / (4Mb/s / 8b/B) = 5秒的数据
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = true;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 20;
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 4;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum	= false;
		m_firstStreamNumForLimitSecondStream	= m_sendFirstStreamMaxNum;
		m_netLimitRatForFirstStreamNum			= 7;
		m_maxStreamIDNumForPlayOrBackup			= 4;

		m_firstStreamLimitBitRate = 20*1024;	//20MB for TD_2808NE_A

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_localBitRateCount					= 20;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;
		m_pLocalBitRateRange[14]            = 7168;
		m_pLocalBitRateRange[15]            = 8192;
		m_pLocalBitRateRange[16]            = 9216;
		m_pLocalBitRateRange[17]            = 10240;
		m_pLocalBitRateRange[18]            = 11264;
		m_pLocalBitRateRange[19]            = 12288;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
		CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif

		m_ipcTransferChnnNum				= 4;

		if(TD_2808ND_A == productID)
		{
			m_pciToEsataNum         = 2;
			m_pPciToEsataIndex      = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]	= 9;
			m_pPciToEsataIndex[1]	= 10;

			m_bSupportMCU			= true;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}
		if((TD_2808PE_A == productID) || (TD_2808PE_AL == productID))
		{
			m_poeInputNum			= 8;
			m_bSupportMCU			= false;
			m_sensorOutputNum		= 1;
#if defined(__CUSTOM_US02__)
			m_bSupportDisplayMinor	= true;
			m_ipcMaxTotalBitRate	= 48*1024;
			m_ipcFrameRate.max_rate_total_on_vga = 1200;
			m_videoOutputNum		=4;
#endif
		}
		if((TD_2808PD_A == productID) || (TD_2808PD_A16 == productID))
		{
			m_pciToEsataNum          = 2;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 1;
			m_pPciToEsataIndex[1]    = 6;

			m_poeInputNum			= 8;
			m_bSupportMCU			= true;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}
	}
	else if((TD_2808NS_A == productID) || (TD_2808NS_SL == productID) || (TD_2808NE_B == productID) || (TD_2808PS_A == productID) || (TD_2808PS_AL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;

		m_localVideoInputNum	= 0;
		m_sensorInputNum		= 4;
		m_audioInputNum			= 0;
		m_netVideoInputNum		= 8;
		m_poeInputNum			= 0;
		m_ipcMaxTotalBitRate	= 32*1024;	//32MB
		m_ipcMaxVideoOutNum		= 4;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 4096;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 600;
		m_bSupportDisplayMinor	=  true;
		m_bLimitByBitRate		= false;

		m_pSupportVideoSize		= new unsigned long[m_netVideoInputNum];

		for(int i = 0; i < m_netVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UT;
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 2560*1024;				//可以预录2.5MB / (4Mb/s / 8b/B) = 5秒的数据
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = true;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 20;
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 4;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 8;
		m_netlimitSendCopies   = 8;
		m_bLimitSecondStreamForFirstStreamNum	= false;
		m_firstStreamNumForLimitSecondStream	= m_sendFirstStreamMaxNum;
		m_netLimitRatForFirstStreamNum			= 7;
		m_maxStreamIDNumForPlayOrBackup			= 4;

		m_firstStreamLimitBitRate = 20*1024;	//20MB for TD_2808NE_A

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_localBitRateCount					= 14;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		m_ipcTransferChnnNum				= 4;

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
		CRecord_file::SetBufSize(3 * 1024 * 1024);
#endif

		if(TD_2808NS_SL == productID)
		{
			m_sensorInputNum		= 0;
			m_speekType				= 0;
		}
		if(TD_2808NE_B == productID)
		{
			m_localKeyboardType		= KEYBOARD_1UG;
		}
		if((TD_2808PS_A == productID) || (TD_2808PS_AL == productID))
		{
			m_poeInputNum			= 4;
		}
		if((TD_2808NE_B == productID) || (TD_2808NS_A == productID))
		{
			m_sensorInputNum = 8;
		}
	}
	else if(/*(TD_2816NE_A == productID) || (TD_2816ND_A == productID) || */(TD_2816ND_AM == productID) || (TD_2816NE_AM == productID) \
		|| (TD_2816PE_A == productID) || (TD_2816PE_AL == productID) || (TD_2816PD_A == productID) || (TD_2816PD_A16 == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;

		m_localVideoInputNum	= 0;
		m_sensorInputNum		= 16;
		m_audioInputNum			= 0;
		m_netVideoInputNum		= 16;
		m_poeInputNum			= 0;
		m_ipcMaxTotalBitRate	= 64*1024;
		m_ipcMaxVideoOutNum		= 16;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 4096;
#if defined(__CUSTOM_US02__)
		m_bIPCUseStaticBitRate	= true;
#else
		m_bIPCUseStaticBitRate	= true;
#endif
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 1200;
		m_bSupportDisplayMinor	= true;

		m_pSupportVideoSize		= new unsigned long[m_netVideoInputNum];
		for(int i = 0; i < m_netVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UG;
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 2560*1024;				//可以预录2.5MB / (4Mb/s / 8b/B) = 5秒的数据
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= true;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = true;
		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 20;
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768  |  VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 8;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;
		m_bLimitSecondStreamForFirstStreamNum	= false;
		m_firstStreamNumForLimitSecondStream	= m_sendFirstStreamMaxNum;
		m_netLimitRatForFirstStreamNum			= 7;
		m_maxStreamIDNumForPlayOrBackup			= 4;

		m_firstStreamLimitBitRate = 40*1024;	//40MB for TD_2816ND_A

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_localBitRateCount					= 20;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;
		m_pLocalBitRateRange[14]            = 7168;
		m_pLocalBitRateRange[15]            = 8192;
		m_pLocalBitRateRange[16]            = 9216;
		m_pLocalBitRateRange[17]            = 10240;
		m_pLocalBitRateRange[18]            = 11264;
		m_pLocalBitRateRange[19]            = 12288;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

		m_ipcTransferChnnNum				= 8;
		if((TD_2816NE_A == productID) || (TD_2816ND_A == productID))
		{
			m_bSupportDisplayMinor			= false;
			m_videoOutputNum				= 16;
		}

		if(TD_2816NE_AM == productID)
		{
			m_bSupportMCU			= false;
		}
		if(TD_2816ND_A == productID)
		{
			m_pciToEsataNum          = 2;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 1;
			m_pPciToEsataIndex[1]    = 6;

			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;
		}
		if(TD_2816ND_AM == productID)
		{
			m_pciToEsataNum         = 2;
			m_pPciToEsataIndex      = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]	= 9;
			m_pPciToEsataIndex[1]	= 10;

			m_bSupportMCU			= true;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}
		if((TD_2816PE_A == productID) || (TD_2816PE_AL == productID))
		{
			m_bSupportMCU			= false;
			m_poeInputNum			= 8;
		}
		if(TD_2816PD_A == productID)
		{
			m_pciToEsataNum          = 2;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 1;
			m_pPciToEsataIndex[1]    = 6;

			m_poeInputNum			= 8;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;
		}
		if(TD_2816PD_A16 == productID)
		{
			m_pciToEsataNum          = 2;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 1;
			m_pPciToEsataIndex[1]    = 6;

			m_poeInputNum			= 16;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;
		}

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
		CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif
	}
	else if ((TD_2816NS_SL == productID) || (TD_2816NS_A == productID) || (TD_2816NE_B == productID) || (TD_2816PS_A == productID) || (TD_2816PS_AL == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;

		m_localVideoInputNum	= 0;
		m_sensorInputNum		= 4;
		m_audioInputNum			= 0;
		m_netVideoInputNum		= 16;
		m_poeInputNum			= 0;
		m_ipcMaxTotalBitRate	= 48*1024;	//48MB
		m_bLimitByBitRate		= false;
		m_ipcMaxVideoOutNum		= 4;//8;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 3072;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 1200;
		m_bSupportDisplayMinor	= true;

		m_pSupportVideoSize		= new unsigned long[m_netVideoInputNum];
		for(int i = 0; i < m_netVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
		}

		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 1;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UT;
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 1792*1024;				//可以预录2.0MB / (3Mb/s / 8b/B) = 5秒的数据
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = true;
		m_bOrientateGPS			= false;
#ifdef __DVR_PROFESSIONAL__
		m_maxNetClientNum		= 20;
#else
		m_maxNetClientNum		= 5;
#endif
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 1;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 16;
		m_netlimitSendCopies   = 16;
		m_bLimitSecondStreamForFirstStreamNum	= false;
		m_firstStreamNumForLimitSecondStream	= m_sendFirstStreamMaxNum;
		m_netLimitRatForFirstStreamNum			= 7;
		m_maxStreamIDNumForPlayOrBackup			= 4;

		m_firstStreamLimitBitRate = 20*1024;	//20MB for TD_2808NE_A

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_localBitRateCount					= 14;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
		CRecord_file::SetBufSize(2 * 1024 * 1024);
#endif

		m_ipcTransferChnnNum				= 1;

		if(TD_2816NS_SL == productID)
		{
			m_sensorInputNum		= 0;
			m_speekType				= 0;
		}
		if(TD_2816NE_B == productID)
		{
			m_localKeyboardType	= KEYBOARD_1UG;
		}
		if((TD_2816PS_A == productID) || (TD_2816PS_AL == productID))
		{
			m_poeInputNum			= 4;
		}
		if((TD_2816NE_B == productID) || (TD_2816NS_A == productID))
		{
			m_sensorInputNum		= 16;
		}
	}
	else if ((TD_2816NE_A == productID) || (TD_2816ND_A == productID) || (TD_2824NS_A == productID) ||(TD_2824NE_A == productID) || (TD_2824PE_A == productID) || (TD_2824PE_AL == productID) \
		|| (TD_2824ND_A == productID) || (TD_2824PD_A == productID) || (TD_2824PD_A16 == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;

		m_localVideoInputNum	= 0;
		m_sensorInputNum		= 16;
		m_audioInputNum			= 0;
		m_netVideoInputNum		= 24;
		m_poeInputNum			= 0;
		m_ipcMaxTotalBitRate	= 96*1024;	//96MB
		m_ipcMaxVideoOutNum		= 8;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 4096;
#if defined(__CUSTOM_US02__)
		m_bIPCUseStaticBitRate	= true;
#else
		m_bIPCUseStaticBitRate	= true;
#endif
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 2400;
		m_bSupportDisplayMinor	= true;

		m_pSupportVideoSize		= new unsigned long[m_netVideoInputNum];
		for(int i = 0; i < m_netVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UT;
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 2560*1024;				//可以预录2.5MB / (4Mb/s / 8b/B) = 5秒的数据
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		if ((TD_2816NE_A == productID) || (TD_2816ND_A == productID))
		{
			m_bSupportMCU			= true;
		}
		else
		{
			m_bSupportMCU			= false;
		}
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = true;
		m_bOrientateGPS			= false;
#ifdef __DVR_PROFESSIONAL__
		m_maxNetClientNum		= 20;
#else
		m_maxNetClientNum		= 5;
#endif
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 8;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 24;
		m_netlimitSendCopies   = 24;
		m_bLimitSecondStreamForFirstStreamNum	= false;
		m_firstStreamNumForLimitSecondStream	= m_sendFirstStreamMaxNum;
		m_netLimitRatForFirstStreamNum			= 7;
		m_maxStreamIDNumForPlayOrBackup			= 4;

		m_firstStreamLimitBitRate = 60*1024;	//20MB for TD_2808NE_A

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_localBitRateCount					= 20;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;
		m_pLocalBitRateRange[14]            = 7168;
		m_pLocalBitRateRange[15]            = 8192;
		m_pLocalBitRateRange[16]            = 9216;
		m_pLocalBitRateRange[17]            = 10240;
		m_pLocalBitRateRange[18]            = 11264;
		m_pLocalBitRateRange[19]            = 12288;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
		CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif

		m_ipcTransferChnnNum				= 8;

		if(TD_2816ND_A == productID)
		{
			m_pciToEsataNum          = 2;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 1;
			m_pPciToEsataIndex[1]    = 6;

			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;
		}

		if(TD_2824NS_A == productID)
		{
			m_localKeyboardType		= KEYBOARD_1UT;
		}
		if((TD_2824PE_A == productID) || (TD_2824PE_AL == productID))
		{
			m_poeInputNum			= 8;
		}
		if(TD_2824ND_A == productID)
		{
			m_pciToEsataNum         = 2;
			m_pPciToEsataIndex      = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]	= 9;
			m_pPciToEsataIndex[1]	= 10;

			m_bSupportMCU			= true;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}
		if(TD_2824PD_A == productID)
		{
			m_pciToEsataNum          = 2;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 1;
			m_pPciToEsataIndex[1]    = 6;

			m_poeInputNum			= 8;
			m_bSupportMCU			= true;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}
		if(TD_2824PD_A16 == productID)
		{
			m_pciToEsataNum          = 2;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 1;
			m_pPciToEsataIndex[1]    = 6;

			m_poeInputNum			= 16;
			m_bSupportMCU			= true;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}
	}
	else if ((TD_2832NS_A == productID) ||(TD_2832NE_A == productID) || (TD_2832NE_B == productID) || (TD_2832PE_A == productID) || (TD_2832PE_AL == productID) \
		|| (TD_2832ND_A == productID) || (TD_2832PD_A == productID) || (TD_2832PD_A16 == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_HD720;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;

		m_localVideoInputNum	= 0;
		m_sensorInputNum		= 16;
		m_audioInputNum			= 0;
		m_netVideoInputNum		= 32;
		m_poeInputNum			= 0;
		m_ipcMaxTotalBitRate	= 96*1024;	//96MB
		m_ipcMaxVideoOutNum		= 8;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 3072;
#if defined(__CUSTOM_US02__)
		m_bIPCUseStaticBitRate	= true;
#else
		m_bIPCUseStaticBitRate	= true;
#endif
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 2400;
		m_bSupportDisplayMinor	= true;

		m_pSupportVideoSize		= new unsigned long[m_netVideoInputNum];
		for(int i = 0; i < m_netVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
		}

		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UG;
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 2560*1024;				//可以预录2.5MB / (4Mb/s / 8b/B) = 5秒的数据
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = true;
		m_bOrientateGPS			= false;
#ifdef __DVR_PROFESSIONAL__
		m_maxNetClientNum		= 20;
#else
		m_maxNetClientNum		= 5;
#endif
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 8;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = 24;
		m_netlimitSendCopies   = 24;
		m_bLimitSecondStreamForFirstStreamNum	= false;
		m_firstStreamNumForLimitSecondStream	= m_sendFirstStreamMaxNum;
		m_netLimitRatForFirstStreamNum			= 7;
		m_maxStreamIDNumForPlayOrBackup			= 4;

		m_firstStreamLimitBitRate = 80*1024;	//20MB for TD_2808NE_A

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_localBitRateCount					= 20;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;
		m_pLocalBitRateRange[14]            = 7168;
		m_pLocalBitRateRange[15]            = 8192;
		m_pLocalBitRateRange[16]            = 9216;
		m_pLocalBitRateRange[17]            = 10240;
		m_pLocalBitRateRange[18]            = 11264;
		m_pLocalBitRateRange[19]            = 12288;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
		CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif

		m_ipcTransferChnnNum				= 8;

		if(TD_2832NS_A == productID)
		{
			m_localKeyboardType		= KEYBOARD_1UT;
		}
		if((TD_2832PE_A == productID) || (TD_2832PE_AL == productID))
		{
			m_poeInputNum		= 8;
		}
		if(TD_2832ND_A == productID)
		{
			m_pciToEsataNum         = 2;
			m_pPciToEsataIndex      = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]	= 9;
			m_pPciToEsataIndex[1]	= 10;

			m_bSupportMCU			= true;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}
		if(TD_2832PD_A == productID)
		{
			m_pciToEsataNum          = 2;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 1;
			m_pPciToEsataIndex[1]    = 6;

			m_poeInputNum			= 8;
			m_bSupportMCU			= true;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}
		if(TD_2832PD_A16 == productID)
		{
			m_pciToEsataNum          = 2;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 1;
			m_pPciToEsataIndex[1]    = 6;

			m_poeInputNum			= 16;
			m_bSupportMCU			= true;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}
	}
	else if ((TD_2804NS_C == productID) || (TD_2804PS_C4 == productID) || (TD_2804NS_CL == productID) || (TD_3004D1_4P == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_3M;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;

		m_localVideoInputNum	= 0;
		m_sensorInputNum		= 0;
		m_audioInputNum			= 0;
		m_netVideoInputNum		= 4;
		m_poeInputNum			= 0;
		m_ipcMaxTotalBitRate	= 32 * 1024;	//32MB
		m_ipcMaxVideoOutNum		= 4;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 6144;
		m_bIPCUseStaticBitRate	= true;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 4800;
		m_bSupportDisplayMinor	= true;

		m_pSupportVideoSize		= new unsigned long[m_netVideoInputNum];
		for(int i = 0; i < m_netVideoInputNum; i++)
		{
			if ((TD_2804NS_CL == productID) || (TD_3004D1_4P == productID))
			{
				m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
			}
			else
			{
				m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M;
			}
		}

		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UD;
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 5120*1024;				//可以预录2.5MB / (4Mb/s / 8b/B) = 5秒的数据
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = true;
		m_bOrientateGPS			= false;
#ifdef __DVR_PROFESSIONAL__
		m_maxNetClientNum		= 20;
#else
		m_maxNetClientNum		= 5;
#endif
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 4;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = m_netVideoInputNum;
		m_netlimitSendCopies   = m_netVideoInputNum;
		m_bLimitSecondStreamForFirstStreamNum	= false;
		m_firstStreamNumForLimitSecondStream	= m_sendFirstStreamMaxNum;
		m_netLimitRatForFirstStreamNum			= 7;
		m_maxStreamIDNumForPlayOrBackup			= 4;

		m_firstStreamLimitBitRate = 20 * 1024;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_localBitRateCount					= 20;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;
		m_pLocalBitRateRange[14]            = 7168;
		m_pLocalBitRateRange[15]            = 8192;
		m_pLocalBitRateRange[16]            = 9216;
		m_pLocalBitRateRange[17]            = 10240;
		m_pLocalBitRateRange[18]            = 11264;
		m_pLocalBitRateRange[19]            = 12288;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
		CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif

		m_ipcTransferChnnNum				= 16;

		
		if(TD_2804PS_C4 == productID)
		{
			m_pciToEsataNum          = 0;
			m_pPciToEsataIndex       = NULL;

			m_poeInputNum			= 4;
			m_bSupportMCU			= false;
			m_sensorOutputNum		= 1;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}

		if (TD_2804NS_CL == productID)
		{
			m_speekType             = 0;
			m_videoOutputNum		= 4;
			m_ipcVideoDefaSize = DVRVIDEO_SIZE_HD1080;

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
			//MAX_RECORD_FILE_LEN_M	= 256;
		}
		
		if (TD_3004D1_4P == productID)
		{
			m_pciToEsataNum          = 0;
			m_pPciToEsataIndex       = NULL;

			m_poeInputNum			= 4;
			m_bSupportMCU			= false;
			m_sensorOutputNum		= 1;
			m_localKeyboardType		= KEYBOARD_2UD;	//
			
			m_speekType             = 1;
			m_videoOutputNum		= 4;
			m_ipcVideoDefaSize = DVRVIDEO_SIZE_HD1080;

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			CRecord_file::SetBufSize(1 * 1024 * 1024);
#endif
		}
	}
	else if ((TD_2808NS_C == productID) || (TD_2808NE_C == productID) || (TD_2808PS_C4 == productID) || (TD_2808PS_C8 == productID) || (TD_2808NS_CL == productID) || (TD_3008D1_8P == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_3M;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;

		m_localVideoInputNum	= 0;
		m_sensorInputNum		= 0;
		m_audioInputNum			= 0;
		m_netVideoInputNum		= 8;
		m_poeInputNum			= 0;
		m_ipcMaxTotalBitRate	= 64 * 1024;	//64MB
		m_ipcMaxVideoOutNum		= 4;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 6144;
		m_bIPCUseStaticBitRate	= true;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 4800;
		m_bSupportDisplayMinor	= true;

		m_pSupportVideoSize		= new unsigned long[m_netVideoInputNum];
		for(int i = 0; i < m_netVideoInputNum; i++)
		{
			if ((TD_2808NS_CL == productID) || (TD_3008D1_8P == productID))
			{
				m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P;
			}
			else
			{
				m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_3M | DVRVIDEO_SIZE_16_9_3M;
			}
		}

		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UD;
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 5120*1024;				//可以预录2.5MB / (4Mb/s / 8b/B) = 5秒的数据
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = true;
		m_bOrientateGPS			= false;
#ifdef __DVR_PROFESSIONAL__
		m_maxNetClientNum		= 20;
#else
		m_maxNetClientNum		= 5;
#endif
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 4;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = m_netVideoInputNum;
		m_netlimitSendCopies   = m_netVideoInputNum;
		m_bLimitSecondStreamForFirstStreamNum	= false;
		m_firstStreamNumForLimitSecondStream	= m_sendFirstStreamMaxNum;
		m_netLimitRatForFirstStreamNum			= 7;
		m_maxStreamIDNumForPlayOrBackup			= 4;

		m_firstStreamLimitBitRate = 40 * 1024;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_localBitRateCount					= 20;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;
		m_pLocalBitRateRange[14]            = 7168;
		m_pLocalBitRateRange[15]            = 8192;
		m_pLocalBitRateRange[16]            = 9216;
		m_pLocalBitRateRange[17]            = 10240;
		m_pLocalBitRateRange[18]            = 11264;
		m_pLocalBitRateRange[19]            = 12288;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
		CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif

		m_ipcTransferChnnNum				= 16;

		if(TD_2808PS_C4 == productID)
		{
			m_pciToEsataNum          = 0;
			m_pPciToEsataIndex       = NULL;

			m_poeInputNum			= 4;
			m_bSupportMCU			= false;
			m_sensorOutputNum		= 1;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}

		if(TD_2808PS_C8 == productID)
		{
			m_pciToEsataNum          = 0;
			m_pPciToEsataIndex       = NULL;

			m_poeInputNum			= 8;
			m_bSupportMCU			= false;
			m_sensorOutputNum		= 1;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}

		if (TD_2808NE_C == productID)
		{
			m_sensorInputNum	= 4;
		}

		if (TD_2808NS_CL == productID)
		{
			m_ipcMaxVideoOutNum		= 8;
			m_speekType             = 0;
			m_videoOutputNum		= 8;
			m_sensorOutputNum		= 1;
			m_ipcVideoDefaSize = DVRVIDEO_SIZE_HD1080;
			
#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 4 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 4 * 1024 * 1024;
			CRecord_file::SetBufSize(4 * 1024 * 1024);
			CRecord_file::SetBufSize(512 * 1024, FILE_BUF_TYPE_MIN);
#endif
			//MAX_RECORD_FILE_LEN_M	= 256;
		}
		
		if(TD_3008D1_8P == productID)
		{
			m_pciToEsataNum			= 0;
			m_pPciToEsataIndex		= NULL;

			m_poeInputNum			= 8;
			m_bSupportMCU			= false;
			m_localKeyboardType		= KEYBOARD_2UD;	//

			m_ipcMaxVideoOutNum		= 8;
			m_speekType				= 1;
			m_videoOutputNum		= 8;
			m_sensorOutputNum		= 0;
			m_ipcVideoDefaSize = DVRVIDEO_SIZE_HD1080;

#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 4 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 4 * 1024 * 1024;
			CRecord_file::SetBufSize(4 * 1024 * 1024);
			CRecord_file::SetBufSize(1024 * 1024, FILE_BUF_TYPE_MIN);
#endif
		}
	}
	else if (
#if defined(__CUSTOM_IL03__)
		/*(TD_2808NE_A == productID) ||*/
#else
		(TD_2808NE_A == productID) || 
#endif
	(TD_2808ND_A == productID) || (TD_2816NS_C == productID) || (TD_2816NE_C == productID) || (TD_2816ND_C == productID) || (TD_2816PS_C8 == productID) || (TD_2816PE_C8 == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_3M;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;

		m_localVideoInputNum	= 0;
		m_sensorInputNum		= 0;
		m_audioInputNum			= 0;
		m_netVideoInputNum		= 16;
		m_poeInputNum			= 0;
		m_ipcMaxTotalBitRate	= 128 * 1024;	//256MB
		m_ipcMaxVideoOutNum		= 4;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 6144;
		m_bIPCUseStaticBitRate	= true;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 150;
		m_ipcFrameRate.max_rate_total_on_vga = 4800;
		m_bSupportDisplayMinor	= true;

		m_pSupportVideoSize		= new unsigned long[m_netVideoInputNum];
		for(int i = 0; i < m_netVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P | DVRVIDEO_SIZE_SXGA | DVRVIDEO_SIZE_3M | DVRVIDEO_SIZE_16_9_3M;
		}

		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UD;
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 5120*1024;				//可以预录2.5MB / (4Mb/s / 8b/B) = 5秒的数据
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = true;
		m_bOrientateGPS			= false;
#ifdef __DVR_PROFESSIONAL__
		m_maxNetClientNum		= 20;
#else
		m_maxNetClientNum		= 5;
#endif
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 4;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = m_netVideoInputNum;
		m_netlimitSendCopies   = m_netVideoInputNum;
		m_bLimitSecondStreamForFirstStreamNum	= false;
		m_firstStreamNumForLimitSecondStream	= m_sendFirstStreamMaxNum;
		m_netLimitRatForFirstStreamNum			= 7;
		m_maxStreamIDNumForPlayOrBackup			= 4;

#if defined(__MAX_NET_PLAYBACK__)
		m_chnnSendFirstStreamMaxNum = 20;
		m_sendFirstStreamMaxNum     = 20;
		m_maxStreamIDNumForPlayOrBackup			= 20;
#endif

		m_firstStreamLimitBitRate = 80 * 1024;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_localBitRateCount					= 20;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;
		m_pLocalBitRateRange[14]            = 7168;
		m_pLocalBitRateRange[15]            = 8192;
		m_pLocalBitRateRange[16]            = 9216;
		m_pLocalBitRateRange[17]            = 10240;
		m_pLocalBitRateRange[18]            = 11264;
		m_pLocalBitRateRange[19]            = 12288;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 3 * 1024 * 1024;
		CRecord_file::SetBufSize(4 * 1024 * 1024);
#endif

#if defined(__MAX_NET_PLAYBACK__)

		REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;
		CRecord_file::SetBufSize(2 * 1024 * 1024);
#endif
		m_ipcTransferChnnNum				= 16;

		if(TD_2808NE_A == productID)
		{
			m_sensorInputNum		= 8;
			m_videoOutputNum		= 4;
			m_bSupportMCU			= true;
			
			m_ipcMaxTotalBitRate	= 96 * 1024;	//256MB
#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;
			CRecord_file::SetBufSize(2 * 1024 * 1024);
#endif
		}
		
		if(TD_2808ND_A == productID)
		{
			m_pciToEsataNum         = 2;
			m_pPciToEsataIndex      = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]	= 9;
			m_pPciToEsataIndex[1]	= 10;

			m_sensorInputNum		= 8;
			m_bSupportMCU			= true;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//

			m_ipcMaxTotalBitRate	= 96 * 1024;	//256MB
#if defined(__PRIMARY_WRDISK__)
			REC_DATA_READ_BUF_SIZE	= 2 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;
			CRecord_file::SetBufSize(2 * 1024 * 1024);
#endif
		}

		if(TD_2816PE_C8 == productID)
		{
			m_pciToEsataNum          = 0;
			m_pPciToEsataIndex       = NULL;

			m_poeInputNum			= 8;
			m_bSupportMCU			= false;
			m_sensorInputNum		= 4;
			m_sensorOutputNum		= 1;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}

		if(TD_2816ND_C == productID)
		{
			m_pciToEsataNum          = 1;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 11;
			//m_pPciToEsataIndex[1]    = 6;

			m_bSupportMCU			= true;
			m_sensorInputNum		= 16;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}

		if(TD_2816PS_C8 == productID)
		{
			m_pciToEsataNum          = 0;
			m_pPciToEsataIndex       = NULL;

			m_poeInputNum			= 8;
			m_bSupportMCU			= false;
			m_sensorOutputNum		= 1;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}

		if (TD_2816NE_C == productID)
		{
			m_sensorInputNum	= 4;
		}
	}
	else if ((TD_2832PD_C16 == productID) || (TD_2832NE_C == productID) || (TD_2832ND_C == productID) || (TD_2832PE_C8 == productID))
	{
		m_productType			= (PRODUCT_TYPE)productID;

		//数字信号相关参数
		m_ipcVideoDefaSize		= DVRVIDEO_SIZE_3M;
		m_ipcDefaVideoEncodeMode= VIDEO_ENCODE_MODE_CBR;

		m_localVideoInputNum	= 0;
		m_sensorInputNum		= 0;
		m_audioInputNum			= 0;
		m_netVideoInputNum		= 32;
		m_poeInputNum			= 0;
		m_ipcMaxTotalBitRate	= 160 * 1024;	//256MB
		m_ipcMaxVideoOutNum		= 4;
		m_ipcDefaChnnRate		= 25;
		m_ipcDefaBitRate		= 5120;
		m_bIPCUseStaticBitRate	= true;
		m_ipcFrameRate.max_rate_chnn = 25;
		m_ipcFrameRate.max_rate_chnn_on_vga = 225;
		m_ipcFrameRate.max_rate_total_on_vga = 7200;
		m_bSupportDisplayMinor	= true;

		m_pSupportVideoSize		= new unsigned long[m_netVideoInputNum];
		for(int i = 0; i < m_netVideoInputNum; i++)
		{
			m_pSupportVideoSize[i] = DVRVIDEO_SIZE_HD720 | DVRVIDEO_SIZE_HD1080 | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_VGA | DVRVIDEO_SIZE_960P |DVRVIDEO_SIZE_SXGA | DVRVIDEO_SIZE_3M  | DVRVIDEO_SIZE_16_9_3M;
		}

		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_2UD;
		m_preAlarmTime			= 5;
		m_preRecordType			= PRERECORD_MODE_MEMORY;
		PRE_RECORD_MAX_LEN		= 5120*1024;				//可以预录2.5MB / (4Mb/s / 8b/B) = 5秒的数据
		MAX_RECORD_FILE_LEN_M	= 512;
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 1;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum          = 0;
		m_pPciToEsataIndex       = NULL;
		m_bHaveUsbToEsata       = true;
		snprintf(m_szUsbToEsataPath, 128, "/sys/devices/platform/h2v100-ehci.0/usb2/2-1");
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 1;
		m_bNetworkWiFi			= false;
		m_bAutoReport           = true;
		m_bOrientateGPS			= false;
#ifdef __DVR_PROFESSIONAL__
		m_maxNetClientNum		= 20;
#else
		m_maxNetClientNum		= 5;
#endif
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask = VGA_800X600 | VGA_1024X768 | VGA_1280X1024 | VGA_1920X1080;
		m_defDispResolutionMask = VGA_1920X1080;//GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 1;
		m_emailSnapTimeInterValNum = 5;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 1;
		m_pEmailSnapTimeInterVal[1] = 2;
		m_pEmailSnapTimeInterVal[2] = 3;
		m_pEmailSnapTimeInterVal[3] = 4;
		m_pEmailSnapTimeInterVal[4] = 5;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 4;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = m_netVideoInputNum;
		m_netlimitSendCopies   = m_netVideoInputNum;
		m_bLimitSecondStreamForFirstStreamNum	= false;
		m_firstStreamNumForLimitSecondStream	= m_sendFirstStreamMaxNum;
		m_netLimitRatForFirstStreamNum			= 7;
		m_maxStreamIDNumForPlayOrBackup			= 4;

		m_firstStreamLimitBitRate = 160 * 1024;

		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_localBitRateCount					= 20;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_pLocalBitRateRange[9]             = 2560;
		m_pLocalBitRateRange[10]            = 3072;
		m_pLocalBitRateRange[11]            = 4096;
		m_pLocalBitRateRange[12]            = 5120;
		m_pLocalBitRateRange[13]            = 6144;
		m_pLocalBitRateRange[14]            = 7168;
		m_pLocalBitRateRange[15]            = 8192;
		m_pLocalBitRateRange[16]            = 9216;
		m_pLocalBitRateRange[17]            = 10240;
		m_pLocalBitRateRange[18]            = 11264;
		m_pLocalBitRateRange[19]            = 12288;

		{
			REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
			REC_DATA_WRITE_BUF_SIZE = 1 * 1024 * 1024;
			g_bufsize = 0x80000;  //缓存大小，即预录像文件的大小
			g_buffFileNum = 60;   //预先为预录像准备的文件的个数；这个值要大于 (PRE_RECORD_MAX_LEN/g_bufsize)
		}

#if defined(__PRIMARY_WRDISK__)
		REC_DATA_READ_BUF_SIZE	= 1 * 1024 * 1024;
		REC_DATA_WRITE_BUF_SIZE = 2 * 1024 * 1024;
		CRecord_file::SetBufSize(3 * 1024 * 1024);
		CRecord_file::SetBufSize(1024 * 1024, FILE_BUF_TYPE_MIN);
#endif

		m_ipcTransferChnnNum				= 16;

		if(TD_2832PD_C16 == productID)
		{
			m_pciToEsataNum          = 1;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 11;
			//m_pPciToEsataIndex[1]    = 6;

			m_poeInputNum			= 16;
			m_bSupportMCU			= true;
			m_sensorInputNum		= 16;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}

		if(TD_2832PE_C8 == productID)
		{
			m_pciToEsataNum          = 0;
			m_pPciToEsataIndex       = NULL;

			m_poeInputNum			= 8;
			m_bSupportMCU			= false;
			m_sensorInputNum		= 4;
			m_sensorOutputNum		= 1;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}

		if(TD_2832ND_C == productID)
		{
			m_pciToEsataNum          = 1;
			m_pPciToEsataIndex       = new unsigned char [m_pciToEsataNum];
			m_pPciToEsataIndex[0]    = 11;
			//m_pPciToEsataIndex[1]    = 6;

			m_bSupportMCU			= true;
			m_sensorInputNum		= 16;
			m_sensorOutputNum		= 4;
			m_localKeyboardType		= KEYBOARD_2UD;	//
		}

		if (TD_2832NE_C == productID)
		{
			m_sensorInputNum	= 4;
		}
	}
	else if (TD_7004SB == productID)
	{
		m_productType			= TD_7004SB;

		m_localVideoInputNum	= 4;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 4;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 128;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bHaveSpot             = false;
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;

#if defined(__CUSTOM_RU04__)
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600;
#else
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 4;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = false;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 7;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;  
		m_local_rate.rate_total_pal_on_cif	= 4*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 4*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*4;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*4;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*4;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		//国内版本在默认功能上做下面的修改：
		//回放修改成4路，支持1D1+3CIF
#if defined (__CUSTOM_CN__) || defined(__CUSTOM_SHANGHAI__)
		//if (TD_TVT_CN == m_productSubID)
		{
			m_videoOutputNum = 4;
			m_local_rate.rate_size_all_ch       = 0;
			m_local_rate.rate_total_pal_on_cif	= 1*25*4+3*25;
			m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
			m_local_rate.rate_total_ntsc_on_cif	= 1*30*4+3*30;
			m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;				
		}
#endif
	}
	else if (TD_7008SB == productID)
	{
		m_productType			= TD_7008SB;

		m_localVideoInputNum	= 8;
		m_audioInputNum			= 4;
		m_sensorInputNum		= 4;
		m_videoOutputNum		= 8;
		m_netVideoOutputNum		= 4;
		m_sensorOutputNum		= 1;
		m_localKeyboardType		= KEYBOARD_1UA;
		m_netVideoInputNum		= 0;
#ifdef __DVR_PROFESSIONAL__
		m_preAlarmTime			= 30;
#else
		m_preAlarmTime          = 5;
#endif
		m_External485KeyboardType = KEYBOARD_MY1003K;
		m_maxFFSpeed            = 128;

		m_bSupportESATA			= false;
		m_eSataIndex            = 4;
		m_pciToEsataNum         = 0;
		m_pPciToEsataIndex      = NULL;
		m_bHaveUsbToEsata       = false;
		m_bDoDiskIODetect		= false;
		m_bAudioAction			= true;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportRedunRec      = false;
#else
		m_bSupportRedunRec      = false;
#endif
		m_bHaveSpot             = false;
		m_bSupportMCU			= false;
		m_bUseMCUSpot           = false;
		m_speekType             = 2;
		m_bNetworkWiFi			= false;

		m_bOrientateGPS			= false;
		m_maxNetClientNum		= 10;
#if defined(__CUSTOM_RU04__)
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA;
		m_displayResolutionMask = VGA_800X600;
#else
		m_videoOutDevice		= VIDEO_OUT_DEVICE_VGA | VIDEO_OUT_DEVICE_CVBS;
		m_displayResolutionMask = VGA_640X480 | VGA_800X600;
#endif
		SetHDParam();
		m_defDispResolutionMask = GetDefualtResolution();

		m_snapJpegRate = 1;
		m_snapJpegRateTime = 2;
		m_emailSnapTimeInterValNum = 2;
		m_pEmailSnapTimeInterVal = new unsigned long [m_emailSnapTimeInterValNum];
		m_pEmailSnapTimeInterVal[0] = 2;
		m_pEmailSnapTimeInterVal[1] = 4;
		m_SnapDefaTimeIntervalValue = 2;

		m_bSupportDoblueStream = true;
		m_chnnSendFirstStreamMaxNum = 100;
		m_bLimitFirstStreamSendNum  = true;
		m_sendFirstStreamMaxNum     = 8;//m_chnnSendFirstStreamMaxNum*m_localVideoInputNum;
		m_maxStreamIDNumForPlayOrBackup = 1;
#ifdef __DVR_PROFESSIONAL__
		m_bSupportSnapPic = true;
#else
		m_bSupportSnapPic      = false;
#endif
		m_netSendCopies     = INVALID_INDEX(unsigned long);
		m_netlimitSendCopies   = 1;//INVALID_INDEX(unsigned long);
		m_bLimitSecondStreamForFirstStreamNum = true;
		m_firstStreamNumForLimitSecondStream  = 4;
		m_limitTypeForFirstStreamNum          = 0;	
		m_netLimitRatForFirstStreamNum        = 1;
		m_netLimitAllRatForFirstStreamNum     = 3*m_localVideoInputNum;


#ifdef __DVR_PROFESSIONAL__
		m_local_rate.rate_size_all_ch       = 0;
#else
		m_local_rate.rate_size_all_ch       = 1;
#endif
#if defined(__CUSTOM_US02__)
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF;
#else
		m_localVideoSize					= DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_HD1;
#endif
		m_localVideoDefaSize				= DVRVIDEO_SIZE_CIF;
		m_localDefaChnnRateNumPal			= 25;
		m_localDefaChnnRateNumNtsc			= 30;
		m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;  
		m_local_rate.rate_total_pal_on_cif	= 8*25;
		m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
		m_local_rate.rate_total_ntsc_on_cif	= 8*30;
		m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		
		m_local_rate.max_rate_total			= 1024*16;
		m_local_rate.max_rate_chnn			= 1024;
		m_localBitRateCount                 = 9;
		m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
		m_pLocalBitRateRange[0]             = 256;
		m_pLocalBitRateRange[1]             = 384;
		m_pLocalBitRateRange[2]             = 512;
		m_pLocalBitRateRange[3]             = 768;
		m_pLocalBitRateRange[4]             = 1024;
		m_pLocalBitRateRange[5]             = 1280;
		m_pLocalBitRateRange[6]             = 1536;
		m_pLocalBitRateRange[7]             = 1792;
		m_pLocalBitRateRange[8]             = 2048;
		m_localDefaBitRateValue             = 768;

		m_bLocalVideoSizeSpecial            = 0;

		m_net_rate.rate_size_all_ch         = 0;
		m_netVideoSize						= DVRVIDEO_SIZE_CIF;
		m_netVideoDefaSize					= DVRVIDEO_SIZE_CIF;
		m_netDefaChnnRateNumPal			    = 2;
		m_netDefaChnnRateNumNtsc			= 3;
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		m_net_rate.rate_total_pal_on_cif	= 6*8;
		m_net_rate.rate_chnn_pal_on_cif	    = 6;
		m_net_rate.rate_total_ntsc_on_cif	= 7*8;
		m_net_rate.rate_chnn_ntsc_on_cif    = 7;
		m_net_rate.max_rate_total			= 512*8;
		m_net_rate.max_rate_chnn			= 512;
		m_netBitRateCount                   = 7;
		m_pNetBitRateRange                  = new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]               = 32;
		m_pNetBitRateRange[1]               = 64;
		m_pNetBitRateRange[2]               = 128;
		m_pNetBitRateRange[3]               = 256;
		m_pNetBitRateRange[4]               = 384;
		m_pNetBitRateRange[5]               = 512;
		m_pNetBitRateRange[6]               = 768;
		m_netDefaBitRateValue               = 512;

		//////////////////////////////////////////////////////////////////////////
		{
			m_local_BitStream.lowest	= 256;
			m_local_BitStream.lower		= 384;
			m_local_BitStream.low		= 512;
			m_local_BitStream.medium	= 768;
			m_local_BitStream.high		= 1024;
			m_local_BitStream.highest	= 2048;

			m_net_BitStream.lowest		= 64;
			m_net_BitStream.lower		= 128;
			m_net_BitStream.low			= 256;
			m_net_BitStream.medium		= 384;
			m_net_BitStream.high		= 512;
			m_net_BitStream.highest		= 1024;
		}

		//国内版本在默认功能上做下面的修改：
		//回放修改成4路，支持1D1+7CIF
#if defined (__CUSTOM_CN__) || defined(__CUSTOM_SHANGHAI__)
		//if (TD_TVT_CN == m_productSubID)
		{
			m_videoOutputNum = 4;
			m_local_rate.rate_size_all_ch       = 0;
			m_local_rate.rate_total_pal_on_cif	= 1*25*4+7*25;
			m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		
			m_local_rate.rate_total_ntsc_on_cif	= 1*30*4+7*30;
			m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;				
		}
#endif
	}
	else
	{
		
		//printf("%s,%d, no this product\n", __FILE__, __LINE__);
		//return false;
	}

	if ((0 < m_netVideoInputNum))
	{
		m_netVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
		m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
		if (0 == m_localVideoInputNum)
		{
			m_net_rate.rate_total_pal_on_cif	= m_netVideoInputNum * 25;
			m_net_rate.rate_chnn_pal_on_cif		= 25;
			m_net_rate.rate_total_ntsc_on_cif	= m_netVideoInputNum * 30;
			m_net_rate.rate_chnn_ntsc_on_cif	= 30;
			m_net_rate.max_rate_total			= 512 * m_netVideoInputNum;
			m_net_rate.max_rate_chnn			= 512;
		}
		m_netBitRateCount					= 18;
		m_pNetBitRateRange					= new unsigned long [m_netBitRateCount];
		m_pNetBitRateRange[0]				= 32;
		m_pNetBitRateRange[1]				= 64;
		m_pNetBitRateRange[2]				= 128;
		m_pNetBitRateRange[3]				= 256;
		m_pNetBitRateRange[4]				= 384;
		m_pNetBitRateRange[5]				= 512;
		m_pNetBitRateRange[6]				= 768;
		m_pNetBitRateRange[7]				= 1024;
		m_pNetBitRateRange[8]				= 1280;
		m_pNetBitRateRange[9]				= 1536;
		m_pNetBitRateRange[10]				= 2048;
		m_pNetBitRateRange[11]				= 2560;
		m_pNetBitRateRange[12]				= 3072;
		m_pNetBitRateRange[13]				= 4096;
		m_pNetBitRateRange[14]				= 5120;
		m_pNetBitRateRange[15]				= 6144;
		m_pNetBitRateRange[16]				= 7168;
		m_pNetBitRateRange[17]				= 8192;
		m_netDefaBitRateValue				= 512;
	}


	if (TD_DEVICE_NONE == m_productType)
	{
		printf("%s,%d, no this product %d\n", __FILE__, __LINE__, productID);
		return false;
	}

	//修改基础版本中，帧率配置界面中，画质不可选
#if defined (__DVR_PROFESSIONAL__) || defined (__DVR_ULTIMATE__) 

#else
	m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_VBR;
	m_netDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_VBR;
#endif

#if !defined(__DVR_ULTIMATE__)
	if (0 == m_sensorInputNum)
	{
		m_sensorInputNum = 1;
	}
#endif

#ifdef __SUPPORT_HRSST__
	{
		m_maxNetClientNum = 100;
	}
#endif


	//if (subProductID == TD_TVT_TW01)
	//{
	//	printf("%s,%d,change m_External485KeyboardType for tw\n",__FILE__,__LINE__);
	//	m_External485KeyboardType = KEYBOARD_TWOEM;
	//}
	//else
	//{
	//	printf("%s,%d, no need to change\n",__FILE__,__LINE__);
	//}

#if defined(__CUSTOM_TW01__) || defined(__CUSTOM_TW01TS__) || defined(__CUSTOM_CBC__)
	printf("%s,%d,change m_External485KeyboardType for tw\n",__FILE__,__LINE__);
	m_External485KeyboardType = KEYBOARD_TWOEM;
	//TW01不支持，假的esata。
	m_bSupportESATA = false;
#endif

#if defined(__CUSTOM_PL14__)
	printf("%s,%d,change m_External485KeyboardType for PL14\n",__FILE__,__LINE__);
	m_External485KeyboardType = KEYBOARD_PL14_NVKBD;
#endif

//IL03使用名扬键盘
//#if defined(__CUSTOM_IL03__)
//	printf("%s,%d,change m_External485KeyboardType for IL03\n",__FILE__,__LINE__);
//	m_External485KeyboardType = KEYBOARD_TWSY;
//#endif

#ifdef __SUPPORT_3G__
	m_bNetwork3G		= true;
#endif

	if (PRERECORD_MODE_DISK == m_preRecordType)
	{
#if defined(__PACKID_9__) || defined(__PACKID_14__) || defined(__PACKID_27__)
		PRE_RECORD_MAX_LEN	= 30*1024*1024;
#else
		if(0 == PRE_RECORD_MAX_LEN)
		{
			if ((TD_2504HD_C == m_productType)||(TD_2508HD_C == m_productType)||(TD_2516HD_C == m_productType)||(TD_2524HD_C == m_productType)
				||(TD_2504HD_C == m_productType)||(TD_2532HD_C == m_productType)||(TD_2604LE == m_productType)||(TD_2608LE == m_productType)||(TD_2616LE == m_productType) || (TD_2524HE_C == m_productType) || (TD_2532HE_C == m_productType)
				||(TD_2508HE_C_3521 == m_productType) || (TD_2304ME_C == m_productType) || (TD_2308ME_C == m_productType) || (TD_2316ME_C == m_productType) 
				||(TD_2304SS_C == m_productType) || (TD_2308SS_C == m_productType) || (TD_2316SS_C == m_productType)
				||(TD_2304SL_C == m_productType) || (TD_2308SL_C == m_productType)
				||(TD_2304SS_C == m_productType) || (TD_2308SE_C == m_productType) || (TD_2316SE_C == m_productType) || (TD_2304SS_SL_3515A == m_productType)
				||(TD_2308ME_C == m_productType) || (TD_2316ME_C == m_productType)
#if defined(__CUSTOM_US02__)
				||(TD_2516HS_BL == m_productType)
#endif
				)
			{
				PRE_RECORD_MAX_LEN	= 12*1024*1024;
			}
			else if ((TD_2304SS_SDI == m_productType) || (TD_2308SS_SDI == m_productType) || (TD_2508HE_SDI == m_productType) || (TD_2512HE_SDI == m_productType)  || (TD_2524HE_SDI == m_productType) )
			{
				PRE_RECORD_MAX_LEN	= 16*1024*1024;
			}
			else
			{
				PRE_RECORD_MAX_LEN	= 8*1024*1024;
			}
		}
		else
		{
			//什么都不用做，因为在单独的产品参数中已指定
		}
#endif
		PRE_RECORD_MAX_TIME	= 30;	//预录像时间（秒）
	}
	else
	{
#if defined(__PACKID_9__)
		PRE_RECORD_MAX_LEN	= 2 * 1024 * 1024;
#elif defined(__PACKID_14__) || defined(__PACKID_27__)
		PRE_RECORD_MAX_LEN	= 3 * 1024 * 1024;
#else
		if(0 == PRE_RECORD_MAX_LEN)
		{
			PRE_RECORD_MAX_LEN	= 1024 * 1024;
			if (TD_2532HD_C == m_productType)
			{
				PRE_RECORD_MAX_LEN += 256 * 1024;
			}
		}
		else
		{
			//什么都不用做，因为在单独的产品参数中已指定
		}
#endif
		PRE_RECORD_MAX_TIME	= 10;
	}

#ifdef __CUSTOM_YUANZHENG__
	m_bSupportRedunRec = true;
#endif

	if (m_bIPCUseStaticBitRate)
	{
#if defined(__AP_AU27__)
		SetStaticVideoBitrate(DVRVIDEO_SIZE_HD1080, 4096);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_3M, 4096);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_HD720, 2048);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_960P, 2048);
		SetStaticVideoBitrate(DVRVIDEO_SIZE_SXGA, 2048);
#endif

		if (32 <= m_netVideoInputNum)
		{
			SetStaticVideoBitrate(DVRVIDEO_SIZE_HD1080, 5120);
			SetStaticVideoBitrate(DVRVIDEO_SIZE_3M, 5120);
		}
	}
	
	bool bRet = true;//CheckSoftLevel(productID);
	if (!bRet)
	{
		printf("%s,%d,check soflt level error.%s,%d \n",__FILE__,__LINE__,DVR_SOFT_LEVEL, productID);
	}
	return bRet;
	
#endif
	
}

//bool CProduct::CheckSoftLevel(unsigned long productID)
//{
//#ifdef __ENVIRONMENT_LINUX__
//	char *p = NULL;		
//	p = (char*)strstr(DVR_SOFT_LEVEL, "=");
//	if (p == NULL)
//	{
//		printf("%s,%d,no level\n",__FILE__,__LINE__);
//		return false;
//	}
//
//	if ('X' == *(p+1))
//	{
//		return true;
//	}
//
//	//SE产品只能跑级别是B（包含）之下的软件.(2316SE除外)
//	if ((TD_2304SE == productID) || (TD_2308SE == productID))
//	{		
//		if ('B' == (*(p+1)))
//		{
//			return true;
//		}
//		else
//		{
//			if (CRYTOINFO_STATUS_OLD == g_crytoStatus)
//			{
//				//走这个分支，有两种情况：一机器已经在用户手里.二刚烧写完的机器,只要没有修改后门，都走这个分支
//				return true;
//				/*unsigned long company = CLocalDevice::GetDDNSTypeFromFlash();					 
//				if (2 == company)
//				{
//					return true;
//				}
//				else if ((company != 2) && (company != 9) && (company != 61) && (company != 1))
//				{
//					return true;
//				}
//				else
//				{
//					return false;
//				}*/
//			}
//			else if (CRYTOINFO_STATUS_NEW == g_crytoStatus)
//			{
//				//走这个分支的机器，肯定是修改后加密且有了厂家信息.
//				if ((TD_TVT_US02 == m_productSubID)
//				  ||(TD_TVT_BR27 == m_productSubID)
//				  ||(TD_TVT_IN23 == m_productSubID))
//				{
//					return true;
//				}
//				else
//				{
//					return false;
//				}
//			}
//			else if (CRYTOINFO_STATUS_NULL == g_crytoStatus)
//			{
//				return true;
//			}	
//		}
//	}
//
//	//SE_S产品只能跑级别是C（包含）之下的软件.
//	if (productID < TD_2304SE)
//	{
//		if ('C' == (*(p+1)))
//		{
//			return true;
//		}
//		else
//		{
//			if (CRYTOINFO_STATUS_OLD == g_crytoStatus)
//			{
//				//走这个分支，有两种情况：一机器已经在用户手里.二刚烧写完的机器,只要没有修改后门，都走这个分支
//				return true;
//				/*unsigned long company = CLocalDevice::GetDDNSTypeFromFlash();					 
//				if (2 == company)
//				{
//					return true;
//				}
//				else if ((company != 2) && (company != 9) && (company != 61) && (company != 1))
//				{
//					return true;
//				}
//				else
//				{
//					return false;
//				}*/
//			}
//			else if (CRYTOINFO_STATUS_NEW == g_crytoStatus)
//			{
//				//走这个分支的机器，肯定是修改后加密且有了厂家信息.
//				if ((TD_TVT_US02 == m_productSubID)
//				  ||(TD_TVT_BR27 == m_productSubID)
//				  ||(TD_TVT_IN23 == m_productSubID))
//				{
//					return true;
//				}
//				else
//				{
//					return false;
//				}
//			}
//			else if (CRYTOINFO_STATUS_NULL == g_crytoStatus)
//			{
//				return true;
//			}
//		}
//	}
//#endif
//	return true;
//}

void CProduct::ChangeKeyBoardType(KEYBOARD_TYPE type, char *pName)
{
#if !(defined NDEBUG && defined __ENVIRONMENT_LINUX__)

#else
	m_localKeyboardType	= type;
#endif
	strcpy(m_szKeyBoardName, pName);
	return;
}

void CProduct::Quit()
{
	if (m_pLocalBitRateRange != NULL)
	{
		delete [] m_pLocalBitRateRange;
		m_pLocalBitRateRange = NULL;
	}

	if (m_pNetBitRateRange != NULL)
	{
		delete [] m_pNetBitRateRange;
		m_pNetBitRateRange = NULL;
	}

	if (NULL != m_pEmailSnapTimeInterVal)
	{
		delete [] m_pEmailSnapTimeInterVal;
		m_pEmailSnapTimeInterVal = NULL;
	}

	if(NULL != m_pSupportVideoSize)
	{
		delete [] m_pSupportVideoSize;
		m_pSupportVideoSize = NULL;
	}

#ifdef __TDFH__
	CMemPool::Instance()->Quit();
#endif

	if(NULL != m_pSupportVideoSize)
	{
		delete []m_pSupportVideoSize;
		m_pSupportVideoSize = NULL;
	}

	if(NULL != m_pChRECP)
	{
		delete []m_pChRECP;
		m_pChRECP = NULL;
	}

	if(NULL != m_pvsBrr)
	{
		delete []m_pvsBrr;
		m_pvsBrr = NULL;
	}
	
	if (NULL != m_pPciToEsataIndex)
	{
		delete [] m_pPciToEsataIndex;
		m_pPciToEsataIndex = NULL;
	}
}

void CProduct::ShowProduct()
{
	cout << PRODUCT_NAME << m_productName.data();

	cout << VIDEO_INPUT_NUM << m_localVideoInputNum;
	cout << AUDIO_INPUT_NUM << m_audioInputNum;
	cout << SENSOR_INPUT_NUM << m_sensorInputNum;
	cout << VIDEO_OUT_NUM << m_videoOutputNum;
	cout << SENSOR_OUT_NUM << m_sensorOutputNum;
	cout << KEY_BOARD_TYPE << m_localKeyboardType;

	cout << SUPPORT_ESATA << m_bSupportESATA;
	cout << DO_DISK_IO_DETECT << m_bDoDiskIODetect;
	cout << AUDIO_ACTION << m_bAudioAction;
	cout << MAX_CLIENT_NUM << m_maxNetClientNum;
	cout << VIDEO_OUT_DEVICE << m_videoOutDevice;
	cout << RESOLUTION_MASK << m_displayResolutionMask << endl;
}

void CProduct::SetDeviceInfo(const char *pDeviceName, unsigned short deviceID, unsigned long videoFormat)
{
	assert (NULL != pDeviceName);
	m_productName	= pDeviceName;
	m_deviceID		= deviceID;
	m_videoFormat	= videoFormat;
}

void CProduct::GetProductIDName(std::string & productName)
{
	if (TD_2816ND_C == m_productType)
	{
#if defined(__CUSTOM_CNB__)
		productName = "NNR-0816ER";
#else
		productName = "TD_2816ND_C";
#endif
	}
	else if (TD_2816NE_C == m_productType)
	{
#if defined(__CUSTOM_CNB__)
		productName = "NNR-0216ER";
#else
		productName = "TD_2816NE_C";
#endif
	}
	else
	{
		productName = "XXXX-XX";
	}
}

void CProduct::SetFuncCustomInfo(char* pInfo, int offset, int len)
{
	assert(pInfo);
	assert(offset + len <= 32);
	memcpy(m_funcCustomInfo + offset, pInfo, len);
}

void CProduct::GetProductInfo(PRODUCT_INFO & info, char *pszMAC, char *pszHardWare, char *pszKernel, char *pszMCU)
{
	memset(&info, 0, sizeof(PRODUCT_INFO));

	info.localVideoInputNum	= m_localVideoInputNum;
	info.audioInputNum		= m_audioInputNum;
	info.sensorInputNum		= m_sensorInputNum;
	info.relayOutputNum		= m_sensorOutputNum;
	info.displayResolutionMask = m_displayResolutionMask;
    
	//
	info.videoOuputNum		= m_videoOutputNum;
	info.netVideoOutputNum	= m_netVideoOutputNum;
	info.netVideoInputNum	= m_netVideoInputNum;
	info.IVSNum				= m_poeInputNum;//0;	//用POE通道数目替代智能分析通道数目

	//ptz
	info.presetNumOneCH		= MAX_PRESET_NUM;
	info.cruiseNumOneCH		= MAX_CRUISE_NUM;
	info.presetNumOneCruise	= MAX_CRUISE_PRESET_NUM;
	info.trackNumOneCH		= MAX_TRACK_NUM;

	//
	info.userNum			= MAX_USER_NUM;
	info.netClientNum		= m_maxNetClientNum;
	info.netFirstStreamNum	= m_ipcTransferChnnNum;

	//
	info.deviceType			= m_productType;

	//
	info.doblueStream		= m_bSupportDoblueStream;
	info.audioStream		= m_bAudioAction;
	info.talkAudio			= ((m_speekType > 0) ? true : false);
	info.bPasswordCheck		= true;

	//
	unsigned long color = 0;
#ifdef __ENVIRONMENT_LINUX__
#if defined(__SPECIAL_COLOR)
	if(CLocalDevice::Is2316SSNewPCB())
	{
		color = (VIDEO_FORMAT_NTSC == m_videoFormat) ? DEFAULT_COLOR_NTSC_1108 : DEFAULT_COLOR_PAL_1108;
	}
	else
	{
		color = (VIDEO_FORMAT_NTSC == m_videoFormat) ? DEFAULT_COLOR_NTSC_25838 : DEFAULT_COLOR_PAL_25838;
	}
#else
	if (g_bUse1104A1108ChipColor)
	{
		color = (VIDEO_FORMAT_NTSC == m_videoFormat) ? DEFAULT_COLOR_NTSC_1104 : DEFAULT_COLOR_PAL_1104;
	}
	else
	{
		color = (VIDEO_FORMAT_NTSC == m_videoFormat) ? DEFAULT_COLOR_NTSC_2864 : DEFAULT_COLOR_PAL_2864;
	}
#endif

#if defined(__CHIP3520A__) || defined(__CHIP3521__) || defined(__HISI_SDK_0BX__) || defined(__CHIPGM__) || defined(__CHIP3520D__)
	char bright = 0;
	char hue = 0;
	char sat =0;
	char contrast = 0;

#if defined(__CHIPGM__)
        if (0 == ext_get_video_Def_Color(&bright, &hue, &sat, &contrast))
#else
	bright = 128;
	contrast = 128;
	sat = 128;
	hue =128;
#endif
	{
		color = (bright << 24) + (contrast << 16) + (sat << 8) + hue;
		printf("bright=%d, hue=%d, sat=%d, contrast=%d",bright,hue,sat,contrast);
	}
#endif
#else
	color = (VIDEO_FORMAT_NTSC == m_videoFormat) ? DEFAULT_COLOR_NTSC_2864 : DEFAULT_COLOR_PAL_2864;
#endif
#ifdef __DVR_ULTIMATE__
	color = (128 << 24) | (128 << 16) | (128 << 8) | 128;
#endif

	info.defBrightness		= ((color >> 24) & 0xff);
	info.defContrast		= ((color >> 16) & 0xff);
	info.defSaturation		= ((color >> 8) & 0xff);
	info.defHue				= (color & 0xff);

	//
	info.videoInputNum		= m_localVideoInputNum + m_netVideoInputNum;
	info.deviceID			= m_deviceID;
	info.videoFormat        = m_videoFormat;

	//功能支持列表
	{
		memset(info.function, 0, sizeof(info.function));

		unsigned long bitCount = sizeof(unsigned long)*8;
		//info.function[FUNC_REMOTE_UPGRADE/bitCount] |= (0x01 << (FUNC_REMOTE_UPGRADE % bitCount));
		//info.function[FUNC_MANUAL_ALARM/bitCount] |= (0x01 << (FUNC_MANUAL_ALARM % bitCount));
		info.function[FUNC_VIEW_VERSION/bitCount] |= (0x01 << (FUNC_VIEW_VERSION % bitCount));
		info.function[FUNC_VIEW_EVENT/bitCount] |= (0x01 << (FUNC_VIEW_EVENT % bitCount));
		info.function[FUNC_VIEW_LOG/bitCount] |= (0x01 << (FUNC_VIEW_LOG % bitCount));
		info.function[FUNC_VIEW_NETWORK_STATUS/bitCount] |= (0x01 << (FUNC_VIEW_NETWORK_STATUS % bitCount));
		info.function[FUNC_VIEW_ONLINE_USER/bitCount] |= (0x01 << (FUNC_VIEW_ONLINE_USER % bitCount));
		info.function[FUNC_VIEW_DISK_INFO/bitCount] |= (0x01 << (FUNC_VIEW_DISK_INFO % bitCount));

#ifdef __DVR_PROFESSIONAL__
		info.function[FUNC_DISK_MAN/bitCount] |= (0x01 << (FUNC_DISK_MAN % bitCount));
		info.function[FUNC_DISK_GROUP/bitCount] |= (0x01 << (FUNC_DISK_GROUP % bitCount));
		info.function[FUNC_EXPORT_LOG/bitCount] |= (0x01 << (FUNC_EXPORT_LOG % bitCount));
#endif
		info.function[FUNC_IMPORT_SETUP/bitCount] |= (0x01 << (FUNC_IMPORT_SETUP % bitCount));
		info.function[FUNC_EXPROT_SETUP/bitCount] |= (0x01 << (FUNC_EXPROT_SETUP % bitCount));


		//info.function[FUNC_PTZ_CTRL/bitCount] |= (0x01 << (FUNC_PTZ_CTRL % bitCount));
		info.function[FUNC_TIME_SEARCH/bitCount] |= (0x01 << (FUNC_TIME_SEARCH % bitCount));
		info.function[FUNC_EVENT_SEARCH/bitCount] |= (0x01 << (FUNC_EVENT_SEARCH % bitCount));
		info.function[FUNC_FILE_MAN/bitCount] |= (0x01 << (FUNC_FILE_MAN % bitCount));
		//info.function[FUNC_EVICT_SOMEONE/bitCount] |= (0x01 << (FUNC_EVICT_SOMEONE % bitCount));
		//info.function[FUNC_TALK_WAY/bitCount] |= (0x01 << (FUNC_TALK_WAY % bitCount));
		info.function[FUNC_MANUAL_REC/bitCount] |= (0x01 << (FUNC_MANUAL_REC % bitCount));
		//info.function[FUNC_REMOTE_REBOOT/bitCount] |= (0x01 << (FUNC_REMOTE_REBOOT % bitCount));
		//info.function[FUNC_REMOTE_SHUTDOWN/bitCount] |= (0x01 << (FUNC_REMOTE_SHUTDOWN % bitCount));
		info.function[FUNC_SETUP/bitCount] |= (0x01 << (FUNC_SETUP % bitCount));
		info.function[FUNC_BACKUP/bitCount] |= (0x01 << (FUNC_BACKUP % bitCount));
		info.function[FUNC_PLAYBACK/bitCount] |= (0x01 << (FUNC_PLAYBACK % bitCount));
	
		if(m_funcCustomInfo[FUNC_PTZ_CTRL / 8] & (0x1 << (FUNC_PTZ_CTRL % 8)))
		{
			if (!((TD_2304SL_C == m_productType) || (TD_2308SL_C == m_productType) || (TD_2304SS_SL == m_productType) || (TD_2308SS_SL == m_productType) ||(TD_2304SS_SL_3515A== m_productType) || (TD_2004AL == m_sdkProductType) || (TD_2008AS == m_productType)))
			{
				info.function[FUNC_PTZ_CTRL / bitCount] |= (0x01 << (FUNC_PTZ_CTRL % bitCount));
			}
		}

#if !defined(__CUSTOM_BR27__) && !defined(__KR24_IN__)
		if(m_bAutoReport)
		{
			info.function[FUNC_AUTOREPORT/bitCount] |= (0x01 << (FUNC_AUTOREPORT % bitCount));
		}
#endif
		if (m_bNetwork3G)
		{
			info.function[FUNC_WIRELESS/bitCount] |= (0x01 << (FUNC_WIRELESS % bitCount));
		}
		if ((TD_2304CDS == m_productType) || (TD_2308CDS == m_productType) || (TD_2304HS == m_productType)
			|| (TD_2304SS_B == m_productType) || (TD_2308SS_B == m_productType) || (TD_2316SS_B == m_productType) || (TD_2508HS_BL == m_productType) || (TD_2516HS_BL == m_productType) 
			|| (TD_2304SS_C == m_productType) || (TD_2308SS_C == m_productType) || (TD_2316SS_C == m_productType) 
			|| (TD_2304SL_C == m_productType) || (TD_2308SL_C == m_productType) 
			|| (TD_2304SS_SL == m_productType)|| (TD_2308SS_SL == m_productType)
			|| (TD_2304SS_SDI == m_productType)|| (TD_2308SS_SDI == m_productType) ||(TD_2304SS_SL_3515A == m_productType) \
			|| (TD_2804NS_SL == m_productType) || (TD_2808NS_SL == m_productType) || (TD_2816NS_SL == m_productType) ||(TD_2704XS_SL == m_productType) || (TD_2708XS_SL == m_productType) || (TD_2716XS_SL == m_productType)
			|| (TD_2704AS_SL == m_productType) || (TD_2708AS_SL == m_productType) || (TD_2716AS_SL == m_productType) 
			/*|| (TD_2704AS_SL_A == m_productType) || (TD_2708AS_SL_A == m_productType) || (TD_2716AS_SL_A == m_productType) */
			|| (TD_2704AS_S == m_productType) || (TD_2708AS_S == m_productType) || (TD_2716AS_S == m_productType)
			/*|| (TD_2704AS_S_A == m_productType) || (TD_2708AS_S_A == m_productType) || (TD_2716AS_S_A == m_productType) */
			|| (TD_2704TS_S == m_productType) || (TD_2708TS_S == m_productType) || (TD_2716TS_S == m_productType) 
			|| (TD_2704TS_PL == m_productType) || (TD_2708TS_PL == m_productType) || (TD_2716TS_PL == m_productType)
			|| (TD_2804NS_C == m_productType) || (TD_2808NS_C == m_productType) || (TD_2816NS_C == m_productType) || (TD_2804PS_C4 == m_productType) || (TD_2808PS_C4 == m_productType) || (TD_2808PS_C8 == m_productType ) || (TD_2816PS_C8 == m_productType)
			|| (TD_2004AL == m_productType) || (TD_2008AS == m_productType)
			|| (TD_2804NS_CL == m_productType) || (TD_2808NS_CL == m_productType)
			|| (TD_3004D1_4P == m_productType) || (TD_3008D1_8P == m_productType))
		{
			info.function[FUNC_NO_ALARM_CTRL/bitCount] |= (0x01 << (FUNC_NO_ALARM_CTRL % bitCount));
			printf("%s,%d,info.function[FUNC_NO_ALARM_CTRL/bitCount]:%x\n",__FILE__,__LINE__,info.function[FUNC_NO_ALARM_CTRL/bitCount]);
		}

#if defined(__CUSTOM_IPV6__)
		{
			info.function[FUNC_HAVE_IPV6/bitCount] |= (0x01 << (FUNC_HAVE_IPV6 % bitCount));
			printf("%s,%d,info.function[FUNC_HAVE_IPV6/bitCount]:%x\n",__FILE__,__LINE__,info.function[FUNC_HAVE_IPV6/bitCount]);
		}
#endif

#if defined(__ALARM_TO_UPDATE_FTP_VIDEO__)
		info.function[FUNC_SUPPORT_FTP/bitCount] |= (0x01 << (FUNC_SUPPORT_FTP % bitCount));
#endif

#if defined(__DVR_ULTIMATE__)
		info.function[FUNC_CAN_CONTROL_SUBSTREAM/bitCount] |= (0x01 << (FUNC_CAN_CONTROL_SUBSTREAM % bitCount));
#endif
		if ((TD_2304SS_SDI == m_productType) || (TD_2308SS_SDI == m_productType) || 
			(TD_2508HE_SDI == m_productType) || (TD_2512HE_SDI == m_productType) ||
			(TD_2524HE_SDI == m_productType) || (TD_2532HD_SDI == m_productType))
		{
			info.function[FUNC_IS_MIXED_DVR/bitCount] |= (0x01 << (FUNC_IS_MIXED_DVR % bitCount));
		}

		if (m_bIPCUseStaticBitRate)
		{
			info.function[FUNC_USE_STATIC_VIDEO_BITSTREAM/bitCount] |= (0x01 << (FUNC_USE_STATIC_VIDEO_BITSTREAM % bitCount));
		}

		if ((TD_2704AS_SL == m_productType) || (TD_2704AS_SL_A == m_productType) || (TD_2704AS_PL == m_productType) || (TD_2708AS_SL == m_productType) || (TD_2716AS_SL == m_productType) ||
			(TD_2704AS_SL_A == m_productType) || (TD_2708AS_SL_A == m_productType) || (TD_2716AS_SL_A == m_productType) ||
			(TD_2704AE_SL == m_productType) || (TD_2708AE_SL == m_productType) || (TD_2716AE_SL == m_productType) ||
			(TD_2704AS_S == m_productType)	|| (TD_2708AS_S == m_productType) || (TD_2708AS_S_A == m_productType)  || (TD_2716AS_S == m_productType)  ||
			(TD_2704AS_S_A == m_productType)	|| (TD_2708AS_S_A == m_productType)  || (TD_2716AS_S_A == m_productType) ||
			(TD_2704TS_PL == m_productType) || (TD_2708TS_PL == m_productType) || (TD_2716TS_PL == m_productType) ||
			(TD_2704TD_PL == m_productType) || (TD_2708TD_PL == m_productType) || (TD_2716TD_PL == m_productType) || (TD_2732TD_PL == m_productType) ||
			(TD_2704TD_P == m_productType)  || (TD_2708TD_P == m_productType)  || (TD_2716TD_P == m_productType)  ||
			(TD_2704TE_M == m_productType)  || (TD_2708TE_M == m_productType)  || (TD_2716TE_M == m_productType)  ||
			(TD_2004AL == m_productType) || (TD_2008AS == m_productType) ||
			(TD_2704AS_PL == m_productType) || (TD_2708AS_PL == m_productType) || (TD_2716AS_PL == m_productType) ||
			(TD_2716AC_PL == m_productType) ||
			(TD_2704AE_PL == m_productType) || (TD_2708AE_PL == m_productType) || (TD_2716AE_PL == m_productType))
		{
			info.function[FUNC_SERVER_ENCODE_CHECK/bitCount] |= (0x01 << (FUNC_SERVER_ENCODE_CHECK % bitCount));
		}
		
#if defined(__TVT_PUSH_SOCK__)
		info.function[FUNC_SUPPORT_PUSH/bitCount] |= (0x01 << (FUNC_SUPPORT_PUSH % bitCount));
#endif
		info.function[FUNC_SUPPORT_SET_IP_ENCODE/bitCount] |= (0x01 << (FUNC_SUPPORT_SET_IP_ENCODE % bitCount));
		info.function[FUNC_SUPPORT_SET_IP_SUB_ENCODE/bitCount] |= (0x01 << (FUNC_SUPPORT_SET_IP_SUB_ENCODE % bitCount));
		info.function[FUNC_SUPPORT_SET_IP_PTZ_CONFIG/bitCount] |= (0x01 << (FUNC_SUPPORT_SET_IP_PTZ_CONFIG % bitCount));
	    //sub code
#if !defined (__CHIPGM__)
		if(/*(TD_2704AS_SL == m_productType) || (TD_2708AS_SL == m_productType) || (TD_2716AS_SL == m_productType) ||
			(TD_2704AS_SL_A == m_productType) || (TD_2708AS_SL_A == m_productType) || (TD_2716AS_SL_A == m_productType) ||
			(TD_2704AE_SL == m_productType) || (TD_2708AE_SL == m_productType) || (TD_2716AE_SL == m_productType) ||
			(TD_2704AS_S == m_productType)	|| (TD_2708AS_S == m_productType)  || (TD_2716AS_S == m_productType)  ||
			(TD_2704AS_S_A == m_productType)|| (TD_2708AS_S_A == m_productType)  || (TD_2716AS_S_A == m_productType)  ||*/
			(TD_2704TS_PL == m_productType) || (TD_2708TS_PL == m_productType) || (TD_2716TS_PL == m_productType) ||
			/*(TD_2704TD_PL == m_productType) || (TD_2708TD_PL == m_productType) ||*/ (TD_2716TD_PL == m_productType) ||
			(TD_2732TD_PL == m_productType) ||
			(TD_2704TD_P == m_productType)  || (TD_2708TD_P == m_productType)  || (TD_2716TD_P == m_productType)  ||
			/*(TD_2704TE_M == m_productType)  || (TD_2708TE_M == m_productType)  || (TD_2716TE_M == m_productType)  ||*/
			(TD_2704TS_S == m_productType)  || (TD_2708TS_S == m_productType)  || (TD_2716TS_S == m_productType)  ||
			/*(TD_2004AL == m_productType) || (TD_2008AS == m_productType)*/
			(TD_2704AS_PL == m_productType) || (TD_2708AS_PL == m_productType) || (TD_2716AS_PL == m_productType) ||
			(TD_2704AE_PL == m_productType) || (TD_2708AE_PL == m_productType) || (TD_2716AE_PL == m_productType)
			)
		{
			info.function[FUNC_SUPPORT_LOCAL_SUB_STREAM/bitCount] |= (0x01 << (FUNC_SUPPORT_LOCAL_SUB_STREAM % bitCount));
		}
#endif

	}
	
	//
	{
		const char *pDate = __DATE__;

		//year
		info.buildDate = (atoi(pDate+7) << 16);

		//mon
		if(strncmp(pDate,"Jan",3)==0)
		{
			info.buildDate |= (1 << 8);
		}
		if(strncmp(pDate,"Feb",3)==0)
		{
			info.buildDate |= (2 << 8);
		}
		if(strncmp(pDate,"Mar",3)==0)
		{
			info.buildDate |= (3 << 8);
		}
		if(strncmp(pDate,"Apr",3)==0)
		{
			info.buildDate |= (4 << 8);
		}
		if(strncmp(pDate,"May",3)==0)
		{
			info.buildDate |= (5 << 8);
		}
		if(strncmp(pDate,"Jun",3)==0)
		{
			info.buildDate |= (6 << 8);
		}
		if(strncmp(pDate,"Jul",3)==0)
		{
			info.buildDate |= (7 << 8);
		}
		if(strncmp(pDate,"Aug",3)==0)
		{
			info.buildDate |= (8 << 8);
		}
		if(strncmp(pDate,"Sep",3)==0)
		{
			info.buildDate |= (9 << 8);
		}
		if(strncmp(pDate,"Oct",3)==0)
		{
			info.buildDate |= (10 << 8);
		}
		if(strncmp(pDate,"Nov",3)==0)
		{
			info.buildDate |= (11 << 8);
		}
		if(strncmp(pDate,"Dec",3)==0)
		{
			info.buildDate |= (12 << 8);		
		}

		//mday
		info.buildDate  |= (0x000ff & atoi(pDate+4));
	}

	{
		const char *pTime = __TIME__;

		//hour
		info.buildTime = (atoi(pTime) << 16);

		//min
		info.buildTime |= (0xff00 & (atoi(pTime+3) << 8));

		//sec
		info.buildTime |= (0x000ff & atoi(pTime+6));
	}

	//
	strcpy(info.deviceName, m_productName.c_str());

	{
		const char *p1 = strstr(DVR_SOFT_VERSION_M, "=");
		const char *p2 = strstr(DVR_SOFT_LEVEL, "=");
		if ((NULL == p1) || (NULL == p2))
		{
			strcpy(info.firmwareVersion, "---");
		}
		else
		{
#ifdef __NETSERVER_HXHT__
			snprintf(info.firmwareVersion, 36, "%s.%s-%s-%02d-HXHT", p1+1, p2+1, DVR_SDK_VERSION, DVR_CUSTOM_ID);
#else
			if (m_bNetwork3G)
			{
#if defined (__CUSTOM_ZNV__)
				snprintf(info.firmwareVersion, 36, "%s.%s-%s-%02d-G-%s", p1+1, p2+1, DVR_SDK_VERSION, DVR_CUSTOM_ID, DVR_SUB_CUSTOM_ID);
#else
				snprintf(info.firmwareVersion, 36, "%s.%s-%s-%02d-G", p1+1, p2+1, DVR_SDK_VERSION, DVR_CUSTOM_ID);
#endif
			}
			else
			{
#if defined(__CUSTOM_ZNV__)
				snprintf(info.firmwareVersion, 36, "%s.%s-%s-%02d-%s", p1+1, p2+1, DVR_SDK_VERSION, DVR_CUSTOM_ID, DVR_SUB_CUSTOM_ID);
#else
				snprintf(info.firmwareVersion, 36, "%s.%s-%s-%02d", p1+1, p2+1, DVR_SDK_VERSION, DVR_CUSTOM_ID);
#endif
			}
#endif			
		}

#ifdef __CUSTOM_YUANZHENG__
		{
			snprintf(info.firmwareVersion+strlen(info.firmwareVersion), 36 - strlen(info.firmwareVersion), "-Y");
		}
#endif
	}

   
	snprintf(info.kernelVersion, 64, "%s", pszKernel); 
	snprintf(info.hardwareVersion, 36, "%s", pszHardWare); 	
	snprintf(info.MCUVersion, 36, "%s", pszMCU);
	memcpy(info.deviceMAC, pszMAC, sizeof(info.deviceMAC));
	printf("###@@@@@@@@@@@#######%s,%d,\n",__FILE__,__LINE__);
	printf("kernelVersion:%s,\n",info.kernelVersion);
	printf("hardwareVersion:%s,\n",info.hardwareVersion);
	printf("firmwareVersion:%s,\n",info.firmwareVersion);
	printf("SDK version:%s,\n",DVR_SDK_VERSION);
	printf("MCUVersion:%s,\n",info.MCUVersion);
	printf("mac:%x%x%x%x%x%x\n",info.deviceMAC[0],info.deviceMAC[1],info.deviceMAC[2],info.deviceMAC[3],info.deviceMAC[4],info.deviceMAC[5]);
}

void CProduct::SetProductSubIDInHardware(unsigned long productSubIDInHardware)
{
	m_productSubIDInHardVerion = productSubIDInHardware;
}

void CProduct::GetHardwarePreVersion(char *pPreVersion, int len)
{
	assert(pPreVersion != NULL);
	assert(len > 0);
	const char *p = strstr(DVR_PACK_ID, "=");
	if (p != NULL)
	{
		if (g_bRu042304SEMETo2504HE_M)
		{
			snprintf(pPreVersion, len, "%d.%d.%s.(%d)", g_Ru04OldProductType, m_productSubIDInHardVerion, p+1, m_productType);
		}
		else if (g_b2316SETo2316ME)
		{
			snprintf(pPreVersion, len, "202.%d.%s.(%d)", m_productSubIDInHardVerion, p+1,m_productType);
		}
		else
		{
			snprintf(pPreVersion, len, "%d.%d.%s", m_productType, m_productSubIDInHardVerion, p+1);
		}		
	}
	else
	{
		if (g_bRu042304SEMETo2504HE_M)
		{
			snprintf(pPreVersion, len, "%d.%d.(%d)", g_Ru04OldProductType, m_productSubIDInHardVerion, m_productType);
		}
		else if (g_b2316SETo2316ME)
		{
			snprintf(pPreVersion, len, "202.%d.(%d)", m_productSubIDInHardVerion,m_productType);
		}
		else
		{
			snprintf(pPreVersion, len, "%d.%d", m_productType, m_productSubIDInHardVerion);
		}
		
	}

	if (strlen(m_szKeyBoardName) > 0)
	{
		strcat(pPreVersion, ".");
		strcat(pPreVersion, m_szKeyBoardName);
	}
}

const char * CProduct::GetFirmwareVersion(char * pFV, int len)
{
	if ((NULL == pFV) || (2 > len))
	{
		return NULL;
	}

	char szfwv[256] = {0};

	const char *p1 = strstr(DVR_SOFT_VERSION_M, "=");
	const char *p2 = strstr(DVR_SOFT_LEVEL, "=");
	if ((NULL == p1) || (NULL == p2))
	{
		snprintf(szfwv, sizeof(szfwv), "---");
	}
	else
	{
		if (m_bNetwork3G)
		{
#if defined(__CUSTOM_ZNV__)
			snprintf(szfwv, sizeof(szfwv), "%s.%s-%s-%02d-G-%s", p1+1, p2+1, DVR_SDK_VERSION, DVR_CUSTOM_ID, DVR_SUB_CUSTOM_ID);
#else
			snprintf(szfwv, sizeof(szfwv), "%s.%s-%s-%02d-G", p1+1, p2+1, DVR_SDK_VERSION, DVR_CUSTOM_ID);
#endif
		}
		else
		{
#if defined(__CUSTOM_ZNV__)
			snprintf(szfwv, sizeof(szfwv), "%s.%s-%s-%02d-%s", p1+1, p2+1, DVR_SDK_VERSION, DVR_CUSTOM_ID, DVR_SUB_CUSTOM_ID);
#else
			snprintf(szfwv, sizeof(szfwv), "%s.%s-%s-%02d", p1+1, p2+1, DVR_SDK_VERSION, DVR_CUSTOM_ID);
#endif
		}
	}

#ifdef __CUSTOM_YUANZHENG__
	{
		snprintf(szfwv + strlen(szfwv), sizeof(szfwv) - strlen(szfwv), "-Y");
	}
#endif

	if (len > strlen(szfwv))
	{
		snprintf(pFV, len, "%s", szfwv);
		return pFV;
	}
	else
	{
		return NULL;
	}
}

unsigned long CProduct::SnapTimeIntervalCount()
{
	if (NULL == m_pEmailSnapTimeInterVal)
	{
		return 1;
	}
	else
	{
		return m_emailSnapTimeInterValNum;		
	}	
}

unsigned long CProduct::SnapTimeIntervalValue(int index)
{
	if (NULL == m_pEmailSnapTimeInterVal)
	{
		return 1;
	}
	else
	{
		assert(index < m_emailSnapTimeInterValNum);
		return m_pEmailSnapTimeInterVal[index];
	}	
}

unsigned long CProduct::SnapQuiltyLevelNum()
{
	//
	return 5;
}

unsigned long CProduct::SnapQuiltyLevelValue(int index)
{
	return IMAGE_QUALITY_LOWER+index;
}

unsigned long CProduct::SnapDefQuiltyValue()
{
	return IMAGE_QUALITY_MEDIUM;
}


unsigned long CProduct::LocalBitRateCount()
{
	if (NULL == m_pLocalBitRateRange)
	{
		return 1;
	}
	else
	{
		return m_localBitRateCount;		
	}	
}

unsigned long CProduct::LocalBitRateValue(int index)
{
	if (NULL == m_pLocalBitRateRange)
	{
		return 768;
	}
	else
	{
		assert(index < m_localBitRateCount);
		return m_pLocalBitRateRange[index];
	}	
}

unsigned long CProduct::LocalDefaBitRateValue()
{
	//return g_BitRateValue[3];
	//2010-02-03 20:06:00 YSW
	//return m_local_rate.max_rate_chnn;
	bool bHaveVideoMode = false;
	PRODUCT_TYPE productID = m_productType;
	if ((TD_2308SL_C == productID) || (TD_2308SS_C == productID) || (TD_2316SS_C == productID) || 
		(TD_2308SE_C == productID) || (TD_2316SE_C == productID) || (TD_2308ME_C == productID) || 
		(TD_2316ME_C == productID))
	{
		bHaveVideoMode = true;
	}

#if defined(__CUSTOM_US02__)
	if (TD_2516HS_BL == productID)
	{
		bHaveVideoMode = true;
	}
#endif

	if (bHaveVideoMode)
	{
		int encodeSize = CLocalDevice::Instance()->GetEncodeSize();
		if (encodeSize)
		{
			return 2048;
		}
		else
		{
			return 1536;
		}
	}
	else
	{
		return m_localDefaBitRateValue;
	}
}

unsigned long CProduct::LocalQuiltyLevelNum()
{
	//目前芄6蔚幕省貌示VBR支旨蔚幕省	
	return IMAGE_QUALITY_HEIGHTEST;
}

unsigned long CProduct::LocalQuiltyLevelValue(int index)
{
	assert(index < (IMAGE_QUALITY_HEIGHTEST - IMAGE_QUALITY_LOWEST + 1));
	return IMAGE_QUALITY_LOWEST + index;
}

unsigned long CProduct::LocalDefQuiltyValue()
{
#if defined(__TW01_RILI__)
	return IMAGE_QUALITY_MEDIUM;
#endif

#if defined(__CUSTOM_RU04__)
	return IMAGE_QUALITY_HEIGHTEST;
#else
	return IMAGE_QUALITY_HEIGHTER;
#endif
}

unsigned long CProduct::NetBitRateCount()
{
	if (NULL == m_pNetBitRateRange)
	{
		return 1;
	}
	else
	{
		return m_netBitRateCount;		
	}	
}

unsigned long CProduct::NetBitRateValue(int index)
{
	if (NULL == m_pNetBitRateRange)
	{
		return 768;
	}
	else
	{
		assert(index < m_netBitRateCount);
		return m_pNetBitRateRange[index];
	}	
}

unsigned long CProduct::NetDefaBitRateValue()
{
	//return g_BitRateValue[3];
	//2010-02-03 20:06:00 YSW
	//return m_net_rate.max_rate_chnn;
#if defined(__CUSTOM_IL03__)
	return 256;
#else
	return m_netDefaBitRateValue;
#endif
}

unsigned long CProduct::NetQuiltyLevelNum()
{
	//目前芄6蔚幕省貌示VBR支旨蔚幕省	
	return IMAGE_QUALITY_HEIGHTEST;
}

unsigned long CProduct::NetQuiltyLevelValue(int index)
{
	assert(index < (IMAGE_QUALITY_HEIGHTEST - IMAGE_QUALITY_LOWEST + 1));
	return IMAGE_QUALITY_LOWEST + index;
}

unsigned long CProduct::NetDefQuiltyValue()
{
#if defined(__CUSTOM_IL03__)
	return  IMAGE_QUALITY_HEIGHTER;
#endif

#ifdef __TD2316SES_SPEC__
	return IMAGE_QUALITY_MEDIUM;
#else
	return IMAGE_QUALITY_HEIGHTER;
#endif
}


//////////////////////////////////////////////////////////////////////////
bool CProduct::GetParam(string &str)
{
	while ('"' != str[0])
	{
		str.erase(0, 1);
	}

	str.erase(0, 1);

	while ('"' != str[str.length() - 1])
	{
		str.erase(str.length() - 1, 1);
	}

	str.erase(str.length() - 1, 1);

	return (str.length() > 0) ? true : false;
}
//////////////////////////////////////////////////////////////////////////
bool CProduct::GetProductType(ifstream & product)
{
	string str;

	do 
	{
		if(getline(product, str))
		{
			//product name
			if (PRODUCT_NAME == str.substr(1, strlen(PRODUCT_NAME)))
			{
				if (GetParam(str))
				{
					m_productType = ProductType(str);
					continue;
				}
				else
				{
					return false;
				}
			}
		}
		else
		{
			return false;
		}
	} while(0 != str.compare(PRODUCT_NAME_END));

	return true;
}

bool CProduct::GetProductCollocate(ifstream & product)
{
	string str;

	do 
	{
		if(getline(product, str))
		{
			//video input num
			if (VIDEO_INPUT_NUM == str.substr(1, strlen(VIDEO_INPUT_NUM)))
			{
				if (GetParam(str))
				{
					m_localVideoInputNum = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//audio input num
			if (AUDIO_INPUT_NUM == str.substr(1, strlen(AUDIO_INPUT_NUM)))
			{
				if (GetParam(str))
				{
					m_audioInputNum = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//sensor input num
			if (SENSOR_INPUT_NUM == str.substr(1, strlen(SENSOR_INPUT_NUM)))
			{
				if (GetParam(str))
				{
					m_sensorInputNum = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//video out num
			if (VIDEO_OUT_NUM == str.substr(1, strlen(VIDEO_OUT_NUM)))
			{
				if (GetParam(str))
				{
					m_videoOutputNum = static_cast<unsigned char>(atoi(str.data()));
					m_netVideoOutputNum	= m_videoOutputNum;
					m_maxFFSpeed = m_videoOutputNum;
					continue;
				}
				else
				{
					return false;
				}
			}

			//sensor out num
			if (SENSOR_OUT_NUM == str.substr(1, strlen(SENSOR_OUT_NUM)))
			{
				if (GetParam(str))
				{
					m_sensorOutputNum = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//key board type
			if (KEY_BOARD_TYPE == str.substr(1, strlen(KEY_BOARD_TYPE)))
			{
				if (GetParam(str))
				{
					if (0 == strcmp("1UA", str.c_str()))
					{
						m_localKeyboardType = KEYBOARD_1UA;
					}

					if (0 == strcmp("1UB", str.c_str()))
					{
						m_localKeyboardType = KEYBOARD_1UB;
					}

					if (0 == strcmp("1UC", str.c_str()))
					{
						m_localKeyboardType = KEYBOARD_1UC;
					}

					if (0 == strcmp("1UD", str.c_str()))
					{
						m_localKeyboardType = KEYBOARD_1UD;
					}
					
					if (0 == strcmp("1US", str.c_str()))
					{
						m_localKeyboardType = KEYBOARD_1US;
					}

					if (0 == strcmp("1UTW", str.c_str()))
					{
						m_localKeyboardType = KEYBOARD_1UTW;
					}


					if (0 == strcmp("2UA", str.c_str()))
					{
						m_localKeyboardType = KEYBOARD_2UA;
					}

					if (0 == strcmp("2UB", str.c_str()))
					{
						m_localKeyboardType = KEYBOARD_2UB;
					}

					if (0 == strcmp("2UC", str.c_str()))
					{
						m_localKeyboardType = KEYBOARD_2UC;
					}

					if (0 == strcmp("2UD", str.c_str()))
					{
						m_localKeyboardType = KEYBOARD_2UD;
					}

					continue;
				}
				else
				{
					return false;
				}
			}

			//network video input num
			if (NET_VIDEO_INPUT_NUM == str.substr(1, strlen(NET_VIDEO_INPUT_NUM)))
			{
				if (GetParam(str))
				{
#ifdef __DVR_ULTIMATE__
					m_netVideoInputNum = static_cast<unsigned char>(atoi(str.data()));
#else
					m_netVideoInputNum = 0;
#endif
					continue;
				}
				else
				{
					return false;
				}
			}

			//pre-alarm time
			if (MAX_PRE_ALARM_TIME == str.substr(1, strlen(MAX_PRE_ALARM_TIME)))
			{
				if (GetParam(str))
				{
					m_preAlarmTime = static_cast<unsigned long>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}
		}
		else
		{
			return false;
		}
	} while(0 != str.compare(PRODUCT_COLLOCATE_END));

	return true;
}

bool CProduct::GetSupportCollocate(ifstream & product)
{
	string str;

	do 
	{
		if(getline(product, str))
		{
			//support redun
			if (SUPPORT_REDUNDANCY_REC == str.substr(1, strlen(SUPPORT_REDUNDANCY_REC)))
			{
				if (GetParam(str))
				{
					m_bSupportRedunRec = (('Y' == str[0]) || ('y' == str[0]));
					continue;
				}
				else
				{
					return false;
				}
			}

			//support esata
			if (SUPPORT_ESATA == str.substr(1, strlen(SUPPORT_ESATA)))
			{
				if (GetParam(str))
				{
					m_bSupportESATA = (('Y' == str[0]) || ('y' == str[0]));
					continue;
				}
				else
				{
					return false;
				}
			}

			//esataindex
			if (ESATA_INDEX == str.substr(1, strlen(ESATA_INDEX)))
			{
				if (GetParam(str))
				{
					m_eSataIndex = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//do disk io detect
			if (DO_DISK_IO_DETECT == str.substr(1, strlen(DO_DISK_IO_DETECT)))
			{
				if (GetParam(str))
				{
					m_bDoDiskIODetect = (('Y' == str[0]) || ('y' == str[0]));
					continue;
				}
				else
				{
					return false;
				}
			}

			//audio action
			if (AUDIO_ACTION == str.substr(1, strlen(AUDIO_ACTION)))
			{
				if (GetParam(str))
				{
					m_bAudioAction = (('Y' == str[0]) || ('y' == str[0]));
					continue;
				}
				else
				{
					return false;
				}
			}

			//support MCU
			if (SUPPORT_MCU == str.substr(1, strlen(SUPPORT_MCU)))
			{
				if (GetParam(str))
				{
					m_bSupportMCU = (('Y' == str[0]) || ('y' == str[0]));
					continue;
				}
				else
				{
					return false;
				}
			}

			//use mcu spot
			if (USE_MCU_SPOT == str.substr(1, strlen(USE_MCU_SPOT)))
			{
				if (GetParam(str))
				{
					m_bUseMCUSpot = (('Y' == str[0]) || ('y' == str[0]));
					continue;
				}
				else
				{
					return false;
				}
			}
			
			//speek type
			if (SPEEK_TYPE == str.substr(1, strlen(SPEEK_TYPE)))
			{
				if (GetParam(str))
				{
					m_speekType = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//network WIFI
			if (NETWORK_WIFI == str.substr(1, strlen(NETWORK_WIFI)))
			{
				if (GetParam(str))
				{
					m_bNetworkWiFi = (('Y' == str[0]) || ('y' == str[0]));
					continue;
				}
				else
				{
					return false;
				}
			}

			//network 3G
			if (NETWORK_3G == str.substr(1, strlen(NETWORK_3G)))
			{
				if (GetParam(str))
				{
					m_bNetwork3G = (('Y' == str[0]) || ('y' == str[0]));
					continue;
				}
				else
				{
					return false;
				}
			}

			//orientate GPS
			if (ORIENTATE_GPS == str.substr(1, strlen(ORIENTATE_GPS)))
			{
				if (GetParam(str))
				{
					m_bOrientateGPS = (('Y' == str[0]) || ('y' == str[0]));
					continue;
				}
				else
				{
					return false;
				}
			}

			//max client num
			if (MAX_CLIENT_NUM == str.substr(1, strlen(MAX_CLIENT_NUM)))
			{
				if (GetParam(str))
				{
					m_maxNetClientNum = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//video out device mask
			if (VIDEO_OUT_DEVICE == str.substr(1, strlen(VIDEO_OUT_DEVICE)))
			{
				if (GetParam(str))
				{
					GetVideoDevice(str);
					continue;
				}
				else
				{
					return false;
				}
			}

			//resolution mask
			if (RESOLUTION_MASK == str.substr(1, strlen(RESOLUTION_MASK)))
			{
				if (GetParam(str))
				{
					GetResolution(str);
					m_defDispResolutionMask = GetDefualtResolution();					
					continue;
				}
				else
				{
					return false;
				}
			}			
		}
		else
		{
			return false;
		}
	} while(0 != str.compare(SUPPORT_COLLOCATE_END));

	return true;
}

bool CProduct::GetFrameTable(ifstream & product, FRAME_RATE &frameRate, 
							 unsigned long &videoSizeMask, unsigned long &videoDefaSize, 
							 unsigned long &defaChnnRateNumPal, unsigned long &defaChnnRateNumNtsc, 
							 unsigned long &videoEncodeModeMask, unsigned long &defaVideoEncodeMode, 
							 unsigned long &bitRateCount, unsigned long **pBitRateRange, 
							 unsigned long &defBitRateValue, bool bLocal /* = true */)
{
	string str;

	do 
	{
		if(getline(product, str))
		{
			if (RATE_SIZE_ALL_CH == str.substr(1, strlen(RATE_SIZE_ALL_CH)))
			{
				if (GetParam(str))
				{
					frameRate.rate_size_all_ch = (('Y' == str[0]) || ('y' == str[0]));
					continue;
				}
				else
				{
					return false;
				}
			}

			//video size mask
			if (VIDEO_SIZE_MASK == str.substr(1, strlen(VIDEO_SIZE_MASK)))
			{
				if (GetParam(str))
				{
					GetVideoSize(str, videoSizeMask);
					continue;
				}
				else
				{
					return false;
				}
			}

			if (VIDEO_DEFA_SIZE == str.substr(1, strlen(VIDEO_DEFA_SIZE)))
			{
				if (GetParam(str))
				{
					GetVideoDefaSizeAndRate(str, videoDefaSize, defaChnnRateNumPal, defaChnnRateNumNtsc);
					continue;
				}
				else
				{
					return false;
				}
			}

			if (VIDEO_ENCODEMODE == str.substr(1, strlen(VIDEO_ENCODEMODE)))
			{
				if (GetParam(str))
				{
					GetVideoEncodeMode(str, videoEncodeModeMask, defaVideoEncodeMode, bLocal);
					continue;
				}
				else
				{
					return false;
				}
			}

			//PAL
			if (RATE_TOTAL_PAL_ON_CIF == str.substr(1, strlen(RATE_TOTAL_PAL_ON_CIF)))
			{
				if (GetParam(str))
				{
					if (GetFrameRate(str, frameRate.rate_total_pal_on_cif, frameRate.rate_chnn_pal_on_cif))
					{
						continue;
					}
				}

				return false;
			}
			
			//NTSC
			if (RATE_TOTAL_NTSC_ON_CIF == str.substr(1, strlen(RATE_TOTAL_NTSC_ON_CIF)))
			{
				if (GetParam(str))
				{
					if (GetFrameRate(str, frameRate.rate_total_ntsc_on_cif, frameRate.rate_chnn_ntsc_on_cif))
					{
						continue;
					}
				}

				return false;
			}

			//MAX RATE TOTAL
			if (MAX_RATE_TOTAL == str.substr(1, strlen(MAX_RATE_TOTAL)))
			{
				if (GetParam(str))
				{
					frameRate.max_rate_total = static_cast<unsigned long>(atoi(str.data()));
					continue;
				}

				return false;
			}

			//MAX RATE CHNN
			if (MAX_RATE_CHNN == str.substr(1, strlen(MAX_RATE_CHNN)))
			{
				if (GetParam(str))
				{
					frameRate.max_rate_chnn = static_cast<unsigned long>(atoi(str.data()));
					continue;
				}

				return false;
			}

			//BIT_RATE_VALUE
			if (BIT_RATE_VALUE == str.substr(1, strlen(BIT_RATE_VALUE)))
			{
				if (GetParam(str))
				{
					GetBitRateRange(str, bitRateCount, pBitRateRange);
					continue;
				}
				return false;
			}

			//BIT_RATE_DEFA_VALUE
			if (BIT_RATE_DEFA_VALUE == str.substr(1, strlen(BIT_RATE_DEFA_VALUE)))
			{
				if (GetParam(str))
				{
					defBitRateValue = atoi(str.c_str());
					assert(defBitRateValue > 0);
					continue;
				}
				return false;
			}


		}
		else
		{
			return false;
		}
	} while(0 != str.compare(FRAME_RATE_TABLE_END));

	return true;
}

bool CProduct::GetBitStream(ifstream & product, IMG_BIT_STREAM & bitStream)
{
	string str;

	do 
	{
		if(getline(product, str))
		{
			//lowest
			if (BIT_STREAM_LOWEST == str.substr(1, strlen(BIT_STREAM_LOWEST)))
			{
				if (GetParam(str))
				{
					bitStream.lowest = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//lower
			if (BIT_STREAM_LOWER == str.substr(1, strlen(BIT_STREAM_LOWER)))
			{
				if (GetParam(str))
				{
					bitStream.lower = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//low
			if (BIT_STREAM_LOW == str.substr(1, strlen(BIT_STREAM_LOW)))
			{
				if (GetParam(str))
				{
					bitStream.low = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//medium
			if (BIT_STREAM_MEDIUM == str.substr(1, strlen(BIT_STREAM_MEDIUM)))
			{
				if (GetParam(str))
				{
					bitStream.medium = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//high
			if (BIT_STREAM_HIGH == str.substr(1, strlen(BIT_STREAM_HIGH)))
			{
				if (GetParam(str))
				{
					bitStream.high = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}

			//highest
			if (BIT_STREAM_HIGHEST == str.substr(1, strlen(BIT_STREAM_HIGHEST)))
			{
				if (GetParam(str))
				{
					bitStream.highest = static_cast<unsigned char>(atoi(str.data()));
					continue;
				}
				else
				{
					return false;
				}
			}
		}
		else
		{
			return false;
		}
	} while(0 != str.compare(BIT_STREAM_TABLE_END));

	return true;
}

bool CProduct::GetImageParam(ifstream & product)
{
	string str;

	do 
	{
		if(getline(product, str))
		{
			//Parameter PAL
			if (IMAGE_PARAM_PAL == str.substr(1, strlen(IMAGE_PARAM_PAL)))
			{
				if (GetParam(str))
				{
					if (GetImageParam(str, m_imageParam_PAL))
					{
						continue;
					}
				}

				return false;
			}

			//Parameter NTSC
			if (IMAGE_PARAM_NTSC == str.substr(1, strlen(IMAGE_PARAM_NTSC)))
			{
				if (GetParam(str))
				{
					if (GetImageParam(str, m_imageParam_NTSC))
					{
						continue;
					}
				}

				return false;
			}
		}
		else
		{
			return false;
		}
	} while(0 != str.compare(IMAGE_PARAM_TABLE_END));

	return true;
}

bool CProduct::GetVideoSize(string &str, unsigned long & videoSize)
{
	unsigned long ret = 0;

	unsigned char i = 0;
	char strTemp [64] = {0};

	while (str.length() > 0)
	{
		memset(strTemp, 0, sizeof(strTemp));
		i = 0;

		while ((',' != str[0]) && (str.length() > 0))
		{
			strTemp [i ++] = str[0];
			str.erase(0, 1);
		}

		if (0 == strcmp(strTemp, "QCIF"))
		{
			ret |= DVRVIDEO_SIZE_QCIF;
		}
		else if (0 == strcmp(strTemp, "CIF"))
		{
			ret |= DVRVIDEO_SIZE_CIF;
		}
		else if (0 == strcmp(strTemp, "HD1"))
		{
			ret |= DVRVIDEO_SIZE_HD1;
		}
		else if (0 == strcmp(strTemp, "D1"))
		{
			ret |= DVRVIDEO_SIZE_D1;
		}
		
		
		if (str.length() > 0)
		{
			str.erase(0, 1);
		}
	}
    
	if (0 == ret)
	{
		printf("no video resolution\n");
		assert(false);
		exit(0);
	}

	if (0 != ret)
	{		
		videoSize = ret;
	}

	return (0 != ret);
}

/*
 LOCAL_VIDEO_DEFA_SIZE = "CIF,25,30" 
取默频直剩默频帧省25pal默喜30Netsc默喜
默帧蚀雍取值
为堑募帧一茫PALNtsc
*/

bool CProduct::GetVideoDefaSizeAndRate(string &str, unsigned long &videoSize, unsigned long &videoRate1, unsigned long &videoRate2)
{
  
	unsigned char i = 0, n = 0;
	unsigned long videoSizeTmp = 0, videoRateTmp1 = 0, videoRateTmp2 = 0;
	char strTemp [64] = {0};
   
	while (str.length() > 0)
	{
		memset(strTemp, 0, sizeof(strTemp));
		i = 0;

		while ((',' != str[0]) && (str.length() > 0))
		{
			strTemp [i ++] = str[0];
			str.erase(0, 1);
		}

		if (0 == n)
		{
			if (0 == strcmp(strTemp, "D1"))
			{
				videoSizeTmp = DVRVIDEO_SIZE_D1;
			}
			else if (0 == strcmp(strTemp, "HD1"))
			{
				videoSizeTmp = DVRVIDEO_SIZE_HD1;
			}
			else if (0 == strcmp(strTemp, "CIF"))
			{
				videoSizeTmp = DVRVIDEO_SIZE_CIF;
			}
			else if (0 == strcmp(strTemp, "QCIF"))
			{
				videoSizeTmp = DVRVIDEO_SIZE_QCIF;
			}
			else
			{
				printf("no support video size\n");
				assert(false);
			}
			n++;
		}
		else if (1 == n)
		{
			videoRateTmp1 = atoi(strTemp);
			n++;
		}
		else if (2 == n)
		{
			videoRateTmp2 = atoi(strTemp);
			n++;
		}
		
		if (str.length() > 0)
		{
			str.erase(0, 1);
		}
	}

	if ((0 != videoSizeTmp) && (0 != videoRateTmp1)&& (0 != videoRateTmp2))
	{
		videoSize = videoSizeTmp;
		videoRate1 = videoRateTmp1;
		videoRate2 = videoRateTmp2; 
	}

	return (0 != videoSize);
}


bool CProduct::GetVideoEncodeMode(string &str, unsigned long &encodeMode, unsigned long &defaEncodeMode, bool bLocal)
{
	unsigned long ret = 0;
    bool bHaveVbr = false;
	unsigned char i = 0;
	char strTemp [64] = {0};

	while (str.length() > 0)
	{
		memset(strTemp, 0, sizeof(strTemp));
		i = 0;

		while ((',' != str[0]) && (str.length() > 0))
		{
			strTemp [i ++] = str[0];
			str.erase(0, 1);
		}

		if (0 == strcmp(strTemp, "VBR"))
		{
			ret |= VIDEO_ENCODE_MODE_VBR;
			bHaveVbr = true;
		}
		else if (0 == strcmp(strTemp, "CBR"))
		{
			ret |= VIDEO_ENCODE_MODE_CBR;
		}
		else
		{
			assert(false);
		}

		if (str.length() > 0)
		{
			str.erase(0, 1);
		}
	}

	if (0 != ret)
	{
		encodeMode = ret;
		if (bHaveVbr && bLocal)
		{
			//defaEncodeMode = VIDEO_ENCODE_MODE_VBR;
			defaEncodeMode = VIDEO_ENCODE_MODE_CBR;
		}
		else if (VIDEO_ENCODE_MODE_CBR | ret)
		{
			defaEncodeMode = VIDEO_ENCODE_MODE_CBR;
		}
		else
		{
			//defaEncodeMode = VIDEO_ENCODE_MODE_VBR;
			defaEncodeMode = VIDEO_ENCODE_MODE_CBR;
		}
	}

	return (0 != ret);

}

bool CProduct::GetVideoDevice(string &str)
{
	unsigned long ret = 0;
	
	unsigned char i = 0;
	char strTemp [64] = {0};

	while (str.length() > 0)
	{
		memset(strTemp, 0, sizeof(strTemp));
		i = 0;

		while ((',' != str[0]) && (str.length() > 0))
		{
			strTemp [i ++] = str[0];
			str.erase(0, 1);
		}

		if (0 == strcmp(strTemp, "HDMI"))
		{
			ret |= VIDEO_OUT_DEVICE_HDMI;
		}
		
		if (0 == strcmp(strTemp, "VGA"))
		{
			ret |= VIDEO_OUT_DEVICE_VGA;
		}

		if (0 == strcmp(strTemp, "CVBS"))
		{
			ret |= VIDEO_OUT_DEVICE_CVBS;
		}

		if (str.length() > 0)
		{
			str.erase(0, 1);
		}
	}

	if (0 != ret)
	{
		m_videoOutDevice = ret;
	}

	return (0 != ret);
}

bool CProduct::GetResolution(string &str)
{
	unsigned long ret = 0;

	unsigned char i = 0;
	char strTemp [64] = {0};

	while (str.length() > 0)
	{
		memset(strTemp, 0, sizeof(strTemp));
		i = 0;

		while ((',' != str[0]) && (str.length() > 0))
		{
			strTemp [i ++] = str[0];
			str.erase(0, 1);
		}

		if (0 == strcmp(strTemp, "640X480"))
		{
			ret |= VGA_640X480;
		}
		else if (0 == strcmp(strTemp, "720X480"))
		{
			ret |= VGA_720X480;
		}
		else if (0 == strcmp(strTemp, "720X576"))
		{
			ret |= VGA_720X576;
		}
		else if (0 == strcmp(strTemp, "800X600"))
		{
			ret |= VGA_800X600;
		}
		else if (0 == strcmp(strTemp, "1024X768"))
		{
			ret |= VGA_1024X768;
		}
		else if (0 == strcmp(strTemp, "1280X960"))
		{
			ret |= VGA_1280X960;
		}
		else if (0 == strcmp(strTemp, "1280X1024"))
		{
			ret |= VGA_1280X1024;
		}
		else if (0 == strcmp(strTemp, "1920X1080"))
		{
			ret |= VGA_1920X1080;
		}
		else
		{
			printf("(%s,%d)no support Resolution\n", __FILE__, __LINE__);
			assert(false);
			exit(0);
		}

		if (str.length() > 0)
		{
			str.erase(0, 1);
		}
	}

	if (0 != ret)
	{
		m_displayResolutionMask = ret;	
	}

	return (0 != ret);
}

unsigned long CProduct::GetDefualtResolution()
{
	//assert(resolutionMask != 0);
	unsigned long ret = 0;
	/*unsigned long defResolution = 0;
	for (int i = 0; i < sizeof(unsigned long)*8; ++i)
	{
		unsigned long tmp = ((unsigned long)1) << i;		
		if (resolutionMask & tmp)
		{
			if (tmp > defResolution)
			{
				defResolution = tmp;
			}
		}
	}*/

	//if (defResolution <= 0)
	//{
	//	ret = VGA_1280X1024;
	//}
	//else if (defResolution < VGA_1920X1080)
	//{
	//	ret = defResolution;
	//}
	//else if (defResolution >= VGA_1920X1080)
	//{
	//	ret = VGA_1280X1024;
	//}
	//从falsh重新获取设备和分辨率
	int device=CLocalDevice::Instance()->GetDisplayModFromFlash( );//获得设备
	int resolution=CLocalDevice::Instance()->GetDisplayResFromFlash();//获得分辨率

	if(device==VIDEO_OUT_CVBS)//cvbs
	{
		if((resolution==VGA_640X480) || (resolution==VGA_720X480) || (resolution==VGA_720X576))
		{
			//正常
			ret=VGA_640X480;
		}
		else
		{
			ret=writeDefaultResolution();
		}
	}
	else if(device==VIDEO_OUT_VGA)
	{
		if((resolution==VGA_800X600) || (resolution==VGA_1024X768) || (resolution==VGA_1280X960)|| (resolution==VGA_1280X1024))
		{
			//正常
			if (!(m_displayResolutionMask & resolution))
			{
				ret = writeDefaultResolution();
			}
			else
			{
				ret=resolution;
			}
		}
		else
		{
			ret=writeDefaultResolution();
		}
	}
	else if(device==VIDEO_OUT_HDMI)
	{
		if((resolution==VGA_1920X1080) || (resolution==VGA_1440X960) || (resolution==VGA_1440X1152))
		{
			//正常
			if (340 == g_support_hd_type)
			{
				resolution = VGA_1920X1080;
			}
			ret=resolution;	
		}
		else
		{
			ret=writeDefaultResolution();
		}
	}
	else//flash为空
	{
		ret=writeDefaultResolution();
	}
	return ret;
}
unsigned long  CProduct::writeDefaultResolution()
{
	unsigned long ret = 0;
#if defined(__CHIP3531__) || defined(__CHIP3535__) || defined(__CHIP3521__) || defined(__CHIP3520A__) || defined(__CHIP3520D__) || defined(__CHIPGM__) 
	#if defined(__PACKID_12__) || defined(__PACKID_15__) || defined(__PACKID_16__)  || defined(__PACKID_22__) || defined(__PACKID_18__)
		ret=VGA_1280X1024;
	#else
		ret=VGA_1920X1080;
	#endif

#if defined(__CUSTOM_BR27__)
	ret = VGA_1024X768;
#endif
#else
#ifndef __CHIPTI__
	ret=VGA_1024X768;
#else
	ret=VGA_1920X1080;
#endif
#endif

#if defined(__TW01_RILI__)
	ret = VGA_1280X1024;
#endif


	if (TD_7004SB == m_productType || TD_7008SB == m_productType)
	{
		ret = VGA_800X600;
	}

	if (m_bHardwareS7)
	{
		ret = VGA_800X600;
	}		
	


	//写入flash
	char szTmp[8] = {0};
	sprintf(szTmp, "%d", VIDEO_OUT_VGA);
	CLocalDevice::Instance()->WriteDisplayModToFlash(szTmp, 1);
	printf("5512 configEx %s,%d,szTmp:%s\n",__FILE__,__LINE__,szTmp);

	memset(szTmp, 0, sizeof(szTmp));
	snprintf(szTmp, 8, "%04x", ret);
	CLocalDevice::Instance()->WriteDisplayResToFlash(szTmp, 4);
	printf("5517 %s,%d,szTmp:%s\n",__FILE__,__LINE__,szTmp);
	return ret;

}
bool CProduct::GetFrameRate(string &str, unsigned short &rate_total, unsigned short &rate_chnn)
{
	unsigned char i = 0, n = 0;
	char strTemp [64] = {0};

	while ((str.length() > 0) && (n < 2))
	{
		memset(strTemp, 0, sizeof(strTemp));
		i = 0;

		while ((',' != str[0]) && (str.length() > 0))
		{
			strTemp [i ++] = str[0];
			str.erase(0, 1);
		}

		if (0 == n)
		{
			rate_total = atoi(strTemp);
		}
		else if (1 == n)
		{
			rate_chnn = atoi(strTemp);
		}

		if (str.length() > 0)
		{
			str.erase(0, 1);
		}

		++ n;
	}

	return (2 == n) ? true : false;
}

bool CProduct::GetBitRateRange(string &str, unsigned long &bitRateCount, unsigned long **pBitRateRange)
{
	unsigned long *pBitRateRangeTemp = NULL;
	unsigned char i = 0;
	char strTemp [64] = {0};
	int count = 0;
	int index = 0;
	string strCount = str;

	//统计可选择码流的个数
	while (strCount.length() > 0)
	{
		while((',' != strCount[0]) && (strCount.length() > 0))
		{
			strCount.erase(0, 1);
		}
		count++;
		if (strCount.length() > 0)
		{
			strCount.erase(0, 1);
		}
	}

	
	pBitRateRangeTemp = new unsigned long [count];
	index = 0;
	while (str.length() > 0)
	{
		memset(strTemp, 0, sizeof(strTemp));
		i = 0;

		while ((',' != str[0]) && (str.length() > 0))
		{
			strTemp [i ++] = str[0];
			str.erase(0, 1);
		}

		pBitRateRangeTemp[index] = atoi(strTemp);
		assert (pBitRateRangeTemp[index] > 0);
		index++;
		
		if (str.length() > 0)
		{
			str.erase(0, 1);
		}
	}

	bitRateCount = count;
	*pBitRateRange = pBitRateRangeTemp;
	return true;
	

}


bool CProduct::GetImageParam(string &str, IMAGE_PARAM & imageParam)
{
	unsigned char i = 0, n = 0;
	char strTemp [64] = {0};

	while ((str.length() > 0) && (n < 6))
	{
		memset(strTemp, 0, sizeof(strTemp));
		i = 0;

		while (('x' != str[0]) && ('X' != str[0]) && (',' != str[0]) && (str.length() > 0))
		{
			strTemp [i ++] = str[0];
			str.erase(0, 1);
		}

		if (0 == n)
		{
			imageParam.cif_width = atoi(strTemp);	
		}
		else if (1 == n)
		{
			imageParam.cif_height = atoi(strTemp);
		}
		else if (2 == n)
		{
			imageParam.hd1_width = atoi(strTemp);

		}
		else if (3 == n)
		{
			imageParam.hd1_height = atoi(strTemp);
		}
		else if (4 == n)
		{
			imageParam.d1_width = atoi(strTemp);

		}
		else
		{
			imageParam.d1_height = atoi(strTemp);
		}

		if (str.length() > 0)
		{
			str.erase(0, 1);
		}

		++ n;
	}

	return (6 == n) ? true : false;
}
//////////////////////////////////////////////////////////////////////////
PRODUCT_TYPE CProduct::ProductType(string &str)
{	
	if (0 == str.compare("TD_2304SE_S"))            //100
	{
		return TD_2304SE_S;
	}
	else if (0 == str.compare("TD_2308SE_S"))
	{
		return TD_2308SE_S;
	}
	else if (0 == str.compare("TD_2316SE_S"))
	{
		return TD_2316SE_S;
	}
	else if (0 == str.compare("TD_2304SE"))         //200
	{
		return TD_2304SE;
	}
	else if (0 == str.compare("TD_2308SE"))
	{
		return TD_2308SE;
	}
	else if (0 == str.compare("TD_2316SE"))
	{
		return TD_2316SE;
	}
	else if (0 == str.compare("TD_2304ME"))           //300
	{
		return TD_2304ME;
	}
	else if (0 == str.compare("TD_2308ME"))
	{
		return TD_2308ME;
	}
	else if (0 == str.compare("TD_2316ME"))
	{
		return TD_2316ME;
	}
	else if (0 == str.compare("TD_2304HE"))	              //400
	{
		return TD_2304HE;
	}
	else if (0 == str.compare("TD_2308HE"))
	{
		return TD_2308HE;
	}
	else if (0 == str.compare("TD_2316HE"))
	{
		return TD_2316HE;
	}
	else if (0 == str.compare("TD_2404MD"))               //500
	{
		return TD_2404MD;
	}
	else if (0 == str.compare("TD_2408MD"))
	{
		return TD_2408MD;
	}
	else if (0 == str.compare("TD_2416MD"))
	{
		return TD_2416MD;
	}
	else if (0 == str.compare("TD_2504ME"))                    //600
	{
		return TD_2504ME;
	}
	else if (0 == str.compare("TD_2508ME"))
	{
		return TD_2508ME;
	}
	else if (0 == str.compare("TD_2516ME"))
	{
		return TD_2516ME;
	}
	else if (0 == str.compare("TD_2504HE"))                    //700
	{
		return TD_2504HE;
	}
	else if (0 == str.compare("TD_2508HE"))
	{
		return TD_2508HE;
	}
	else if (0 == str.compare("TD_2516HE"))
	{
		return TD_2516HE;
	}
	else if (0 == str.compare("TD_2504MD"))                       //800
	{
		return TD_2504MD;
	}
	else if (0 == str.compare("TD_2508MD"))
	{
		return TD_2508MD;
	}
	else if (0 == str.compare("TD_2516MD"))
	{
		return TD_2516MD;
	}
	else if (0 == str.compare("TD_2504HD"))	                       //900
	{
		return TD_2504HD;
	}
	else if (0 == str.compare("TD_2508HD"))
	{
		return TD_2508HD;
	}
	else if (0 == str.compare("TD_2516HD"))
	{
		return TD_2516HD;
	}
	else if (0 == str.compare("TD_2504FD"))                            //1000
	{
		return TD_2504FD;
	}
	else if (0 == str.compare("TD_2508FD"))
	{
		return TD_2508FD;
	}
	else if (0 == str.compare("TD_2516FD"))
	{
		return TD_2516FD;
	}
	else 
	{
		printf("%s,%d, no this product\n", __FILE__, __LINE__);
		assert(false);
		return (PRODUCT_TYPE)0;
	}
}

bool CProduct::GetUseEsata()
{
	bool bRet = false;
	FILE *pFile = fopen("/mnt/mtd/esata.dat", "rb");
	if (NULL == pFile)
	{
		return bRet;
	}
	
	fclose(pFile);
	return true;
}

void CProduct::SetUseEsata(bool bUse)
{
	if (bUse)
	{
		DVRSystem("echo 1 > esata.dat");		
	}
	else
	{
		DVRSystem("rm -rf /mnt/mtd/esata.dat");
	}
}

unsigned char CProduct::GetPciToEsataIndex(unsigned char index)
{
	if ((0 == m_pciToEsataNum) || (NULL == m_pPciToEsataIndex))
	{
		return 0;
	}

	return m_pPciToEsataIndex[index];

}

void CProduct::GetUsbToEsataPath(char *pPath)
{
	if (m_bHaveUsbToEsata)
	{
		memcpy(pPath, m_szUsbToEsataPath, sizeof(m_szUsbToEsataPath));
	}
}
void  CProduct::SetHDParam()//设置高清视频参数
{
	if (340 == g_support_hd_type)
	{
		m_videoOutDevice |= VIDEO_OUT_DEVICE_HDMI;
		m_displayResolutionMask |=VGA_1920X1080;
	}	
}

void CProduct::Chang2316SSSpot()
{
	if (TD_2316CDS == m_productType)
	{
#if defined (__CUSTOM_BR27__)
		m_bHaveSpot = true;
#else
		m_bHaveSpot = false;
#endif
	}
}

void CProduct::AdjustParam()
{
	bool bHaveVideoMode = false;

	if ((TD_2308SL_C == m_productType) || (TD_2308SS_C == m_productType) || (TD_2316SS_C == m_productType) || 
		(TD_2308SE_C == m_productType) || (TD_2316SE_C == m_productType) || (TD_2308ME_C == m_productType) || 
		(TD_2316ME_C == m_productType))
	{
		bHaveVideoMode = true;
	}

#if defined(__CUSTOM_US02__)
	if (TD_2516HS_BL == m_productType)
	{
		bHaveVideoMode = true;
	}
#endif

	if (bHaveVideoMode)
	{
		int encodeSize = CLocalDevice::Instance()->GetEncodeSize();

		if (encodeSize)
		{
			//使用960H分辨率
			switch (m_productType)
			{
			case TD_2308SL_C:
				{
#if defined(__CUSTOM_US02__)
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
					m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
					// 					m_localDefaChnnRateNumPal			= 12;
					// 					m_localDefaChnnRateNumNtsc			= 15;
					m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
					m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
					m_local_rate.rate_total_pal_on_cif	= 8*12*8;
					m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
					m_local_rate.rate_total_ntsc_on_cif	= 8*15*8;
					m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
					m_local_rate.max_rate_total			= 1024*8;
					m_local_rate.max_rate_chnn			= 1024;

// 					m_localBitRateCount                 = 6;
// 					delete [] m_pLocalBitRateRange;
// 					m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 					m_pLocalBitRateRange[0]             = 768;
// 					m_pLocalBitRateRange[1]             = 1024;
// 					m_pLocalBitRateRange[2]             = 1536;
// 					m_pLocalBitRateRange[3]             = 2048;
// 					m_pLocalBitRateRange[4]             = 2304;
// 					m_pLocalBitRateRange[5]             = 2560;
// 					m_localDefaBitRateValue             = 2048;

					break;
				}
			case TD_2308SS_C:
				{
#if defined(__CUSTOM_US02__)
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
					m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
// 					m_localDefaChnnRateNumPal			= 12;
// 					m_localDefaChnnRateNumNtsc			= 15;
					m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
					m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
					m_local_rate.rate_total_pal_on_cif	= 8*12*8;
					m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
					m_local_rate.rate_total_ntsc_on_cif	= 8*15*8;
					m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
					m_local_rate.max_rate_total			= 1024*8;
					m_local_rate.max_rate_chnn			= 1024;

// 					m_localBitRateCount                 = 6;
// 					delete [] m_pLocalBitRateRange;
// 					m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 					m_pLocalBitRateRange[0]             = 768;
// 					m_pLocalBitRateRange[1]             = 1024;
// 					m_pLocalBitRateRange[2]             = 1536;
// 					m_pLocalBitRateRange[3]             = 2048;
// 					m_pLocalBitRateRange[4]             = 2304;
// 					m_pLocalBitRateRange[5]             = 2560;
// 					m_localDefaBitRateValue             = 2048;

					break;
				}
			case TD_2316SS_C:
				{
#if defined(__CUSTOM_US02__)
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
					m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
// 					m_localDefaChnnRateNumPal			= 6;
// 					m_localDefaChnnRateNumNtsc			= 7;
					m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
					m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
					m_local_rate.rate_total_pal_on_cif	= 16*6*4 + 16;
					m_local_rate.rate_chnn_pal_on_cif  	= 25*4;		//D1帧
					m_local_rate.rate_total_ntsc_on_cif	= 16*7*4 + 16 * 2;
					m_local_rate.rate_chnn_ntsc_on_cif 	= 30*4;		//D1帧
					m_local_rate.max_rate_total			= 1024*16;
					m_local_rate.max_rate_chnn			= 1024;

// 					m_localBitRateCount                 = 6;
// 					delete [] m_pLocalBitRateRange;
// 					m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
// 					m_pLocalBitRateRange[0]             = 768;
// 					m_pLocalBitRateRange[1]             = 1024;
// 					m_pLocalBitRateRange[2]             = 1536;
// 					m_pLocalBitRateRange[3]             = 2048;
// 					m_pLocalBitRateRange[4]             = 2304;
// 					m_pLocalBitRateRange[5]             = 2560;
// 					m_localDefaBitRateValue             = 2048;
					break;
				}
			case TD_2308SE_C:
				{
#if defined(__CUSTOM_US02__)
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
					m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
// 					m_localDefaChnnRateNumPal			= 12;
// 					m_localDefaChnnRateNumNtsc			= 15;
					m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
					m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
					m_local_rate.rate_total_pal_on_cif	= 8*12*8;
					m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
					m_local_rate.rate_total_ntsc_on_cif	= 8*15*8;
					m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
					m_local_rate.max_rate_total			= 1024*8;
					m_local_rate.max_rate_chnn			= 1024;

//					m_localBitRateCount                 = 6;
//					delete [] m_pLocalBitRateRange;
//					m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
//					m_pLocalBitRateRange[0]             = 768;
//					m_pLocalBitRateRange[1]             = 1024;
//					m_pLocalBitRateRange[2]             = 1536;
//					m_pLocalBitRateRange[3]             = 2048;
//					m_pLocalBitRateRange[4]             = 2304;
//					m_pLocalBitRateRange[5]             = 2560;
//					m_localDefaBitRateValue             = 2048;

					break;
				}
			case TD_2316SE_C:
				{
#if defined(__CUSTOM_US02__)
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
					m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
// 					m_localDefaChnnRateNumPal			= 12;
// 					m_localDefaChnnRateNumNtsc			= 15;
					m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
					m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
					m_local_rate.rate_total_pal_on_cif	= 16*12*8;
					m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
					m_local_rate.rate_total_ntsc_on_cif	= 16*15*8;
					m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
					m_local_rate.max_rate_total			= 1024*16;
					m_local_rate.max_rate_chnn			= 1024;

//					m_localBitRateCount                 = 6;
//					delete [] m_pLocalBitRateRange;
//					m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
//					m_pLocalBitRateRange[0]             = 768;
//					m_pLocalBitRateRange[1]             = 1024;
//					m_pLocalBitRateRange[2]             = 1536;
//					m_pLocalBitRateRange[3]             = 2048;
//					m_pLocalBitRateRange[4]             = 2304;
//					m_pLocalBitRateRange[5]             = 2560;
//					m_localDefaBitRateValue             = 2048;

					break;
				}
			case TD_2516HS_BL:
				{
#if defined(__CUSTOM_US02__)
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1;
#else
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
					m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
					m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
					m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
					m_local_rate.rate_total_pal_on_cif	= 16*12*8;
					m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
					m_local_rate.rate_total_ntsc_on_cif	= 16*15*8;
					m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
					m_local_rate.max_rate_total			= 1024*16;
					m_local_rate.max_rate_chnn			= 1024;

					m_localBitRateCount                 = 6;
					delete [] m_pLocalBitRateRange;
					m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
					m_pLocalBitRateRange[0]             = 768;
					m_pLocalBitRateRange[1]             = 1024;
					m_pLocalBitRateRange[2]             = 1536;
					m_pLocalBitRateRange[3]             = 2048;
					m_pLocalBitRateRange[4]             = 2304;
					m_pLocalBitRateRange[5]             = 2560;
					m_localDefaBitRateValue             = 2048;

					break;
				}
			case TD_2308ME_C:
				{
#if defined(__CUSTOM_US02__)
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
					m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
					m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
					m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
					m_local_rate.rate_total_pal_on_cif	= 8*12*8;
					m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
					m_local_rate.rate_total_ntsc_on_cif	= 8*15*8;
					m_local_rate.rate_chnn_ntsc_on_cif 	= 30*8;		//D1帧
					m_local_rate.max_rate_total			= 1024*8;
					m_local_rate.max_rate_chnn			= 1024;

					m_localBitRateCount                 = 6;
					delete [] m_pLocalBitRateRange;
					m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
					m_pLocalBitRateRange[0]             = 768;
					m_pLocalBitRateRange[1]             = 1024;
					m_pLocalBitRateRange[2]             = 1536;
					m_pLocalBitRateRange[3]             = 2048;
					m_pLocalBitRateRange[4]             = 2304;
					m_pLocalBitRateRange[5]             = 2560;
					m_localDefaBitRateValue             = 2048;

					break;
				}
			case TD_2316ME_C:
				{
#if defined(__CUSTOM_US02__)
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H| DVRVIDEO_SIZE_D1;
#else
					m_localVideoSize					= DVRVIDEO_SIZE_CIF | DVRVIDEO_SIZE_960H | DVRVIDEO_SIZE_D1 | DVRVIDEO_SIZE_HD1;
#endif
					m_localVideoDefaSize				= DVRVIDEO_SIZE_960H;
					m_localVideoEncodeModeMask			= VIDEO_ENCODE_MODE_VBR | VIDEO_ENCODE_MODE_CBR;
					m_localDefaVideoEncodeMode			= VIDEO_ENCODE_MODE_CBR;
					m_local_rate.rate_total_pal_on_cif	= 16* 6 * 4 + 16;
					m_local_rate.rate_chnn_pal_on_cif  	= 25*8;		//D1帧
					m_local_rate.rate_total_ntsc_on_cif	= 16 * 7 * 4 + 16 * 2;
					m_local_rate.rate_chnn_ntsc_on_cif 	= 30 * 8;		//D1帧
					m_local_rate.max_rate_total			= 1024*16;
					m_local_rate.max_rate_chnn			= 1024;

					m_localBitRateCount                 = 6;
					delete [] m_pLocalBitRateRange;
					m_pLocalBitRateRange                = new unsigned long [m_localBitRateCount];
					m_pLocalBitRateRange[0]             = 768;
					m_pLocalBitRateRange[1]             = 1024;
					m_pLocalBitRateRange[2]             = 1536;
					m_pLocalBitRateRange[3]             = 2048;
					m_pLocalBitRateRange[4]             = 2304;
					m_pLocalBitRateRange[5]             = 2560;
					m_localDefaBitRateValue             = 2048;

					break;
				}
			default:
				break;
			}
		}
	}
}

unsigned long CProduct::LocalDefaChnnRateNumPal()
{
	bool bHaveVideoMode = false;
	PRODUCT_TYPE productID = m_productType;
	if ((TD_2308SL_C == productID) || (TD_2308SS_C == productID) || (TD_2316SS_C == productID) || 
		(TD_2308SE_C == productID) || (TD_2316SE_C == productID) || (TD_2308ME_C == productID) || 
		(TD_2316ME_C == productID))
	{
		bHaveVideoMode = true;
	}

#if defined(__CUSTOM_US02__)
	if (TD_2516HS_BL == productID)
	{
		bHaveVideoMode = true;
	}
#endif

	if (bHaveVideoMode)
	{
		int encodeSize = CLocalDevice::Instance()->GetEncodeSize();

		if (encodeSize)
		{
			return m_localDefaChnnRateNumPal960H;
		}
		else
		{
			return m_localDefaChnnRateNumPal;
		}
	}
	else
	{
		return m_localDefaChnnRateNumPal;
	}

}

unsigned long CProduct::LocalDefaChnnRateNumNtsc()
{
	bool bHaveVideoMode = false;
	PRODUCT_TYPE productID = m_productType;
	if ((TD_2308SL_C == productID) || (TD_2308SS_C == productID) || (TD_2316SS_C == productID) || 
		(TD_2308SE_C == productID) || (TD_2316SE_C == productID) || (TD_2308ME_C == productID) || 
		(TD_2316ME_C == productID))
	{
		bHaveVideoMode = true;
	}

#if defined(__CUSTOM_US02__)
	if (TD_2516HS_BL == productID)
	{
		bHaveVideoMode = true;
	}
#endif

	if (bHaveVideoMode)
	{
		int encodeSize = CLocalDevice::Instance()->GetEncodeSize();

		if (encodeSize)
		{
			return m_localDefaChnnRateNumNtsc960H;
		}
		else
		{
			return m_localDefaChnnRateNumNtsc;
		}
	}
	else
	{
		return m_localDefaChnnRateNumNtsc;
	}
}

unsigned long CProduct::LocalDefaVideoSize()
{
	bool bHaveVideoMode = false;
	PRODUCT_TYPE productID = m_productType;
	if ((TD_2308SL_C == productID) || (TD_2308SS_C == productID) || (TD_2316SS_C == productID) || 
		(TD_2308SE_C == productID) || (TD_2316SE_C == productID) || (TD_2308ME_C == productID) || 
		(TD_2316ME_C == productID))
	{
		bHaveVideoMode = true;
	}

#if defined(__CUSTOM_US02__)
	if (TD_2516HS_BL == productID)
	{
		bHaveVideoMode = true;
	}
#endif

	if (bHaveVideoMode)
	{
		int encodeSize = CLocalDevice::Instance()->GetEncodeSize();

		if (encodeSize)
		{
			return DVRVIDEO_SIZE_960H;
		}
		else
		{
			return DVRVIDEO_SIZE_D1;
		}
	}
	else
	{
		return m_localVideoDefaSize;
	}
}

unsigned long CProduct::LocalDefChnnRateNum()
{
	bool bHaveVideoMode = false;
	PRODUCT_TYPE productID = m_productType;
	if ((TD_2308SL_C == productID) || (TD_2308SS_C == productID) || (TD_2316SS_C == productID) || 
		(TD_2308SE_C == productID) || (TD_2316SE_C == productID) || (TD_2308ME_C == productID) || 
		(TD_2316ME_C == productID))
	{
		bHaveVideoMode = true;
	}

#if defined(__CUSTOM_US02__)
	if (TD_2516HS_BL == productID)
	{
		bHaveVideoMode = true;
	}
#endif

	if (bHaveVideoMode)
	{
		int encodeSize = CLocalDevice::Instance()->GetEncodeSize();

		if (encodeSize)
		{
			if (VIDEO_FORMAT_PAL == g_video_format)
			{
				return m_localDefaChnnRateNumPal960H;
			}
			else
			{
				return m_localDefaChnnRateNumNtsc960H;
			}
		}
	}
	
	if (VIDEO_FORMAT_PAL == g_video_format)
	{
		return m_localDefaChnnRateNumPal;
	}
	else
	{
		return m_localDefaChnnRateNumNtsc;
	}
}

VIDEO_SIZE CProduct::RealVideoSize(VIDEO_SIZE videoSize)
{
	bool bHaveVideoMode = false;
	PRODUCT_TYPE productID = m_productType;
	if ((TD_2308SL_C == productID) || (TD_2308SS_C == productID) || (TD_2316SS_C == productID) || 
		(TD_2308SE_C == productID) || (TD_2316SE_C == productID) || (TD_2308ME_C == productID) || 
		(TD_2316ME_C == productID))
	{
		bHaveVideoMode = true;
	}

#if defined(__CUSTOM_US02__)
	if (TD_2516HS_BL == productID)
	{
		bHaveVideoMode = true;
	}
#endif

	if (bHaveVideoMode)
	{
		int encodeSize = CLocalDevice::Instance()->GetEncodeSize();

		if (encodeSize)
		{
			if ((TD_2316SS_C == m_productType) || (TD_2316ME_C == m_productType))
			{
				if ((DVRVIDEO_SIZE_960H == videoSize) || (DVRVIDEO_SIZE_D1 == videoSize))
				{
					return DVRVIDEO_SIZE_D1;
				}
				else
				{
					return videoSize;
				}
			}
			else
			{
				if ((DVRVIDEO_SIZE_960H == videoSize) || (DVRVIDEO_SIZE_D1 == videoSize))
				{
					return DVRVIDEO_SIZE_960H;
				}
				else
				{
					return videoSize;
				}
			}
		}
		else
		{
			return videoSize;
		}
	}
	else
	{
		return videoSize;
	}
}

bool CProduct::GetChannelRecp(unsigned long ch, CHANNEL_RECP * pChBrr)
{
	assert(pChBrr != NULL);
	if ((ch < m_localVideoInputNum)&&(NULL != m_pChRECP))
	{
		* pChBrr = m_pChRECP[ch];

		return true;
	}
	else
	{
		return false;
	}
}

void CProduct::SetChannelRecp(unsigned long ch, VIDEO_SIZE supVS, VIDEO_SIZE defVS, CHANNEL_RECP * pChBrr)
{
	if (ch < m_localVideoInputNum)
	{
		pChBrr->supVS = supVS;
		pChBrr->dfVS  = defVS;
	}
	else
	{
		assert(false);
	}
}

void CProduct::SetVSFOrBrr(unsigned long productID,unsigned long resolution)
{
	unsigned long minBit =0;
	unsigned long maxBit =0;
	int index=0;
	int count=0;
	int vs = 0;
	//QCIF支持的码流
	
	//CIF支持的码流
	unsigned long cifBitArr[] ={256,384,512,768,1024,1536,2048,2560,3072,4096,5120,6144,8192,10240,12288};
	
	switch(productID)
	{
	case TD_2304SS_SDI:
	case TD_2308SS_SDI:
	case TD_2508HE_SDI:
	case TD_2512HE_SDI:
	case TD_2524HE_SDI:
		{
			if(0 != (resolution & DVRVIDEO_SIZE_HD720))
			{
				vs = VS_HD720;
				minBit = 1024;
				maxBit = 6144;
			}
			else if(0 != (resolution & DVRVIDEO_SIZE_960H ))
			{
				vs = VS_960H;
				minBit = 768;
				maxBit = 2560;
			}
			else if(0 != (resolution & DVRVIDEO_SIZE_D1 ))
			{
				vs = VS_D1;
				minBit = 768;
				maxBit = 2048;
			}
			else if(0 != (resolution & DVRVIDEO_SIZE_HD1))
			{
				vs = VS_HD1;
				minBit = 768;
				maxBit = 1536;
			}
			else if(0 != (resolution & DVRVIDEO_SIZE_CIF))
			{
				vs = VS_CIF;
				minBit = 768;
				maxBit = 1536;
			}
			else
			{
				return;//说明该产品没有该分辨率
			}
		}
		break;
	default://说明不支持该产品
		return;
		break;
	}
	
				
	for(index=0;index<14;index++)//CIF
	{
		if((cifBitArr[index] >= minBit)&&(cifBitArr[index] <= maxBit))
		{
			m_pvsBrr[vs].vsforbrr[count] = cifBitArr[index];
			m_pvsBrr[vs].resolution = resolution;
			++count;
		}
		
	}

}

bool CProduct::CanChangLocalVideoSize()
{
	if ((TD_2704TS_S == m_productType) || (TD_2708TS_S == m_productType) || (TD_2716TS_S == m_productType) || (TD_2704TS_PL == m_productType) || (TD_2716TS_PL == m_productType)
		|| (TD_2704TD_P == m_productType) || (TD_2708TD_P == m_productType) || (TD_2716TD_P == m_productType) || (TD_2704TD_PL == m_productType) || (TD_2708TD_PL == m_productType) || (TD_2716TD_PL == m_productType) || (TD_2732TD_PL == m_productType)
		|| (TD_2704AS_S == m_productType) || (TD_2708AS_S == m_productType) || (TD_2708AS_S_A == m_productType) || (TD_2716AS_S == m_productType)
		|| (TD_2704AS_SL == m_productType) || (TD_2704AS_SL_A == m_productType) || (TD_2704AS_PL == m_productType) || (TD_2708AS_SL == m_productType) || (TD_2716AS_SL == m_productType)
		|| (TD_2704TD_P == m_productType) || (TD_2708TD_P == m_productType) || (TD_2716TD_P == m_productType) 
		|| (TD_2704TD_PL == m_productType) || (TD_2708TD_PL == m_productType) || (TD_2716TD_PL == m_productType) 
		|| (TD_2704AS_S == m_productType) || (TD_2708AS_S == m_productType) || (TD_2716AS_S == m_productType)
		|| (TD_2704AS_S_A == m_productType) || (TD_2708AS_S_A == m_productType) || (TD_2716AS_S_A == m_productType)
		|| (TD_2704AS_SL == m_productType) || (TD_2708AS_SL == m_productType) || (TD_2716AS_SL == m_productType)
		|| (TD_2704AS_SL_A == m_productType) || (TD_2708AS_SL_A == m_productType) || (TD_2716AS_SL_A == m_productType)
		|| (TD_2704TE_M == m_productType) || (TD_2708TE_M == m_productType) || (TD_2716TE_M == m_productType) 
		|| (TD_2704AE_SL == m_productType) || (TD_2708AE_SL == m_productType) || (TD_2716AE_SL == m_productType)
		|| (TD_2004AL == m_productType) || (TD_2008AS == m_productType)
		|| (TD_2732TD_PL == m_productType)
		|| (TD_2704AS_PL == m_productType) || (TD_2708AS_PL == m_productType) || (TD_2716AS_PL == m_productType)
		|| (TD_2716AC_PL == m_productType)
		|| (TD_2704AE_PL == m_productType) || (TD_2708AE_PL == m_productType) || (TD_2716AE_PL == m_productType))
	{
		return false;
	}

#if defined(__CHIPGM__)
	if (TD_2708TS_PL == m_productType)
	{
		return true;
	}
	else
	{
		return false;
	}
#else
	if (TD_2708TS_PL == m_productType)
	{
		return false;
	}
#endif

	return m_bCanChangLocalVideoInfo;
}
unsigned long CProduct::GetSplitMode(unsigned char chnnNum)
{
	unsigned long splitMode;
	if (4 == chnnNum)
	{
		splitMode= VIEW_SPLIT_2X2;
	}
	else if (8 == chnnNum)
	{
		splitMode= VIEW_SPLIT_3X3;
	}
	else if (16 == chnnNum)
	{
		splitMode= VIEW_SPLIT_4X4;
	}
	else if ((16 < chnnNum) && (chnnNum <= 25))
	{
		splitMode= VIEW_SPLIT_5X5;
	}
	else
	{
		splitMode= VIEW_SPLIT_6X6;
	}
	return splitMode;
}

void CProduct::SetStaticVideoBitrate(VIDEO_SIZE vs, unsigned long ulBitrate)
{
	for (int i=0; DVRVIDEO_SIZE_NONE != g_vsBitRateInfo[i].videoSize; i++)
	{
		if (vs == g_vsBitRateInfo[i].videoSize)
		{
			g_vsBitRateInfo[i].bitRate = ulBitrate;
		}
	}
}

bool CProduct::CVBS_ChangeParam(unsigned long productID,unsigned long status)
{
	if( (TD_2708AS_S_A == productID)||(TD_2704AS_SL_A == productID) )
	{
		if ( (0==status)||(1==status) )
		{
			m_pEncodeCheck->ClearData();
			if ( (TD_2708AS_S_A == productID)||(TD_2704AS_SL_A == productID) )
			{
				//major
				if (VIDEO_FORMAT_NTSC == g_video_format)
				{
					m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 15 * 4, 15, 6144 * 4);
					m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 15 * 4, 15, 6144 * 4);
				}
				else
				{
					m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 12 * 4, 12, 6144 * 4);
					m_pEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 12 * 4, 12, 6144 * 4);
				}
				m_pSubEncodeCheck->ClearData();
				//mirror
				{
					if (VIDEO_FORMAT_NTSC == g_video_format)
					{			
						m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF,  15 * 4, 15, 6144 * 4);
						m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1,  15 * 4, 15, 6144 * 4);
						m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 15 * 4, 15, 6144 * 4);
						m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 15 * 4, 15, 6144 * 4);
					} 
					else
					{
						m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_CIF,  12 * 4, 12, 6144 * 4);
						m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_D1,  12 * 4, 12, 6144 * 4);
						m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_960H, 12 * 4, 12, 6144 * 4);
						m_pSubEncodeCheck->AddEncodeInfo(DVRVIDEO_SIZE_HD720, 12 * 4, 12, 6144 * 4);
					}
				}
				//default param
				m_localDefaChnnRateNumPal			= 12;
				m_localDefaChnnRateNumNtsc			= 15;

				if(TD_2704AS_SL_A == productID)
				{
					m_local_rate.rate_total_pal_on_cif	= 4*12*8; 
					m_local_rate.rate_chnn_pal_on_cif  	= 12*8;  		
					m_local_rate.rate_total_ntsc_on_cif	= 4*15*8; 
					m_local_rate.rate_chnn_ntsc_on_cif 	= 15*8; 
				}
				if (TD_2708AS_S_A == productID)
				{
					m_local_rate.rate_total_pal_on_cif	= 8*12*8; 
					m_local_rate.rate_chnn_pal_on_cif  	= 12*8;  		
					m_local_rate.rate_total_ntsc_on_cif	= 8*15*8; 
					m_local_rate.rate_chnn_ntsc_on_cif 	= 15*8; 
				}
			}
		} 
	}
	return true;
}

bool CProduct::IsDispD1Device()
{
	if (0 < m_localVideoInputNum)
	{
		return false;
	}
	
#if defined(__CHIP3520D__) || defined(__CHIP3535__)
	return true;
#else
	return false;
#endif
}

//////////////////////////////////////////////////////////////////////////

