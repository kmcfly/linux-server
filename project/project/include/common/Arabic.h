/***********************************************************************
** Copyright (C) Tongwei Video Technology Co.,Ltd. All rights reserved.
** Author       : 
** Date         : 2011-08-12
** Name         : Arabic.h
** Version      : 1.0
** Description  : 阿拉伯语 排版规则
** Modify Record:
***********************************************************************/
#ifndef _ARABIC_H_
#define _ARABIC_H_


//[0x0620 ~ 0x0652]
const unsigned long ARABIC_MAP[][4] = /* alone, last, first, middle */
{
	{ 0x0000, 0x0000, 0x0000, 0x0000},	/* 0x0620 未使用 */
	{ 0x0621, 0x0621, 0x0621, 0x0621},	/* 0x0621 字母, 喉塞音符 */
	{ 0xFE81, 0xFE82, 0x0622, 0x0622},	/* 0x0622 字母, 带上Madda的字母Alef */
	{ 0xFE83, 0xFE84, 0x0623, 0x0623},	/* 0x0623 字母, 带上喉塞音符的字母Alef */
	{ 0xFE85, 0xFE86, 0x0624, 0x0624},	/* 0x0624 字母, 带上喉塞音符的字母Waw */
	{ 0xFE87, 0xFE88, 0x0625, 0x0625},	/* 0x0625 字母, 带下喉塞音符的字母Alef */
	{ 0xFE89, 0xFE8A, 0xFE8B, 0xFE8C},	/* 0x0626 字母, 带上喉塞音符的字母Yeh */
	{ 0xFE8D, 0xFE8E, 0x0627, 0x0627},	/* 0x0627 字母, Alef */
	{ 0xFE8F, 0xFE90, 0xFE91, 0xFE92},	/* 0x0628 字母, Beh */
	{ 0xFE93, 0xFE94, 0x0629, 0x0629},	/* 0x0629 字母, Teh Marbuta */ 
	{ 0xFE95, 0xFE96, 0xFE97, 0xFE98},	/* 0x062A 字母, Teh */ 
	{ 0xFE99, 0xFE9A, 0xFE9B, 0xFE9C},	/* 0x062B 字母, Theh */ 
	{ 0xFE9D, 0xFE9E, 0xFE9F, 0xFEA0},	/* 0x062C 字母, Jeem */ 
	{ 0xFEA1, 0xFEA2, 0xFEA3, 0xFEA4},	/* 0x062D 字母, Hah */ 
	{ 0xFEA5, 0xFEA6, 0xFEA7, 0xFEA8},	/* 0x062E 字母, Khah */ 
	{ 0xFEA9, 0xFEAA, 0x062F, 0x062F},	/* 0x062F 字母, Dal */ 
	{ 0xFEAB, 0xFEAC, 0x0630, 0x0630},	/* 0x0630 字母, Thal */ 
	{ 0xFEAD, 0xFEAE, 0x0631, 0x0631},	/* 0x0631 字母, Reh */ 
	{ 0xFEAF, 0xFEB0, 0x0632, 0x0632},	/* 0x0632 字母, Zain */ 
	{ 0xFEB1, 0xFEB2, 0xFEB3, 0xFEB4},	/* 0x0633 字母, Seen */ 
	{ 0xFEB5, 0xFEB6, 0xFEB7, 0xFEB8},	/* 0x0634 字母, Sheen */ 
	{ 0xFEB9, 0xFEBA, 0xFEBB, 0xFEBC},	/* 0x0635 字母, Sad */ 
	{ 0xFEBD, 0xFEBE, 0xFEBF, 0xFEC0},	/* 0x0636 字母, Dad */ 
	{ 0xFEC1, 0xFEC2, 0xFEC3, 0xFEC4},	/* 0x0637 字母, Tah */ 
	{ 0xFEC5, 0xFEC6, 0xFEC7, 0xFEC8},	/* 0x0638 字母, Zah */ 
	{ 0xFEC9, 0xFECA, 0xFECB, 0xFECC},	/* 0x0639 字母, Ain */ 
	{ 0xFECD, 0xFECE, 0xFECF, 0xFED0},	/* 0x063A 字母, Ghain */ 
	{ 0x0000, 0x0000, 0x0000, 0x0000},	/* 0x063B 未使用 */ 
	{ 0x0000, 0x0000, 0x0000, 0x0000},	/* 0x063C 未使用 */ 
	{ 0x0000, 0x0000, 0x0000, 0x0000},	/* 0x063D 未使用 */ 
	{ 0x0000, 0x0000, 0x0000, 0x0000},	/* 0x063E 未使用 */ 
	{ 0x0000, 0x0000, 0x0000, 0x0000},	/* 0x063F 未使用 */ 
	{ 0x0640, 0x0640, 0x0640, 0x0640},	/* 0x0640 文字, Tatweel */ 
	{ 0xFED1, 0xFED2, 0xFED3, 0xFED4},	/* 0x0641 字母, Feh */ 
	{ 0xFED5, 0xFED6, 0xFED7, 0xFED8},	/* 0x0642 字母, Qaf */ 
	{ 0xFED9, 0xFEDA, 0xFEDB, 0xFEDC},	/* 0x0643 字母, Kaf */ 
	{ 0xFEDD, 0xFEDE, 0xFEDF, 0xFEE0},	/* 0x0644 字母, Lam */ 
	{ 0xFEE1, 0xFEE2, 0xFEE3, 0xFEE4},	/* 0x0645 字母, Meem */ 
	{ 0xFEE5, 0xFEE6, 0xFEE7, 0xFEE8},	/* 0x0646 字母, Noon */ 
	{ 0xFEE9, 0xFEEA, 0xFEEB, 0xFEEC},	/* 0x0647 字母, Heh */ 
	{ 0xFEED, 0xFEEE, 0x0648, 0x0648},	/* 0x0648 字母, Waw */ 
	{ 0xFEEF, 0xFEF0, 0x0649, 0x0649},	/* 0x0649 字母, Alef Maksura */ 
	{ 0xFEF1, 0xFEF2, 0xFEF3, 0xFEF4},	/* 0x064A 字母, Yeh */
	{ 0x064B, 0x064B, 0x064B, 0x064B},	/* 0x064B 文字, Fathatan */
	{ 0x064C, 0x064C, 0x064C, 0x064C},	/* 0x064C 文字, Dammatan */
	{ 0x064D, 0x064D, 0x064D, 0x064D},	/* 0x064D 文字, Kasratan */
	{ 0x064E, 0x064E, 0x064E, 0x064E},	/* 0x064E 文字, Fatha */
	{ 0x064F, 0x064F, 0x064F, 0x064F},	/* 0x064F 文字, Damma */
	{ 0x0650, 0x0650, 0x0650, 0x0650},	/* 0x0650 文字, Kasra */
	{ 0x0651, 0x0651, 0x0651, 0x0651},	/* 0x0651 文字, Shadda */
	{ 0x0652, 0x0652, 0x0652, 0x0652}	/* 0x0652 文字, Sukun */

	//miss
	//0xFC5E, 0xFC5F, 0xFC60, 0xFC61, 0xFC62,
	//0xFDF2, 0xFEF5, 0xFEF6, 0xFEF7, 0xFEF8,
	//0xFEF9, 0xFEFA, 0xFEFB, 0xFEFC, 
};

const unsigned long ARABIC_MAP_EX[][5] = /* alone, last, first, middle, char */
{
	{ 0xFB56, 0xFB57, 0xFB58, 0xFB59, 0x067E},	/* 0x067E 字母, Peh */
	{ 0xFB7A, 0xFB7B, 0xFB7C, 0xFB7D, 0x0686},	/* 0x0686 字母, Tcheh */
	{ 0xFB8A, 0xFB8B, 0x0698, 0x0698, 0x0698},	/* 0x0698 字母, Jeh */
	{ 0xFB8E, 0xFB8F, 0xFB90, 0xFB91, 0x06A9},	/* 0x06A9 字母, Keheh */
	{ 0xFB92, 0xFB93, 0xFB94, 0xFB95, 0x06AF},	/* 0x06AF 字母, Gaf */
	{ 0xFBA4, 0xFBA5, 0x06C0, 0x06C0, 0x06C0},	/* 0x06C0 字母, 带上Yeh的字母Heh */
	{ 0xFBFC, 0xFBFD, 0xFBFE, 0xFBFF, 0x06CC}	/* 0x06CC 字母, 波斯语Yeh */
};

//前一个字符是否在集合SET1中。如果在，则是有连接前面的
const unsigned long ARABIC_SET1[] = 
{
	0x0626, 0x0628, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x0633,
	0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063A, 0x0641,
	0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x064A,	0x067E,
	0x0686, 0x06A9, 0x06AF, 0x06CC
};

//后一个字符是否在集合SET2中。如果在，则是有连接后面的
const unsigned long ARABIC_SET2[] =
{
	0x0626, 0x0628, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x0633,
	0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063A, 0x0641,
	0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x064A,	0x067E,
	0x0686, 0x06A9, 0x06AF, 0x06CC,
	0x0622, 0x0623, 0x0624, 0x0625, 0x0627, 0x0629, 0x062F, 0x0630,
	0x0631, 0x0632, 0x0648, 0x0649, 0x0698, 0x06C0
};

// 连词规则 0x644 + [0x622,0x623,0x625,0x627]
const unsigned long ARABIC_JOIN[][2]=
{
	{0xFEF5,0xFEF6},
	{0xFEF7,0xFEF8},
	{0xFEF9,0xFEFA},
	{0xFEFB,0xFEFC}
};


//阿拉伯语言范围[0x0600 ~ 0x06FF]
inline unsigned long ArabicCharRule(unsigned long ucs_pre_code, unsigned long ucs_cur_code, unsigned long ucs_next_code, bool& bIgnore)
{
	bIgnore = false;

	//连词规则 --- ARABIC_JOIN
	//连字符是以0x644开头,后面跟的是0x622,0x623,0x625,0x627,
	//并根据情况取下面的字符数组ARABIC_JOIN的 0 或 1,
	//如果0x644前一个字符是在集合1(同上面的集合1)中间,那么取数组1,否则取数组0
	if(ucs_cur_code == 0x644)
	{
		unsigned long join_next[4] = {0x622, 0x623, 0x625, 0x627};

		for(long i = 0; i < 4; i++)
		{
			if(ucs_next_code == join_next[i])
			{
				for(int k = 0; k < sizeof(ARABIC_SET1) / sizeof(ARABIC_SET1[0]); k++)
				{
					if(ARABIC_SET1[k] == ucs_pre_code)
					{
						bIgnore = true;
						return ARABIC_JOIN[i][1];
					}
				}

				bIgnore = true;
				return ARABIC_JOIN[i][0];
			}
		}
	}


	//变形规则  ---  ARABIC_MAP
	//语言词法分析, 分成alone, last, first, middle,
	//并根据判断是否是词的前面,后面,中间或单独一个词,进行变形
	const unsigned long* pArbic = NULL;

	if((ucs_cur_code >= 0x0620) && (ucs_cur_code <= 0x0652))
	{
		int index = ucs_cur_code - 0x0620;

		pArbic = reinterpret_cast<const unsigned long*>(ARABIC_MAP) + index * 4;
	}
	else
	{
		for(long i = 0; i < sizeof(ARABIC_MAP_EX) / sizeof(ARABIC_MAP_EX[0]); i++)
		{
			if(ARABIC_MAP_EX[i][4] == ucs_cur_code)
			{
				pArbic = reinterpret_cast<const unsigned long*>(ARABIC_MAP_EX) + i * 5;
			}
		}
	}

	if(pArbic != NULL)
	{
		bool bInSet1 = false, bInSet2 = false;

		//判断是否有连接前面的
		for(int i = 0; i < sizeof(ARABIC_SET1) / sizeof(ARABIC_SET1[0]); i++)
		{
			if(ARABIC_SET1[i] == ucs_pre_code)
			{
				bInSet1 = true;
				break;
			}
		}

		//判断是否连接后面的
		for(int i = 0; i < sizeof(ARABIC_SET2) / sizeof(ARABIC_SET2[0]); i++)
		{
			if(ARABIC_SET2[i] == ucs_next_code)
			{
				bInSet2 = true;
				break;
			}
		}

		if(bInSet1 && bInSet2)
		{
			//middle
			return pArbic[3];
		}
		else if(!bInSet1 && bInSet2)
		{
			//first
			return pArbic[2];
		}
		else if(!bInSet1 && !bInSet2)
		{
			//alone
			return pArbic[0];
		}
		else if(bInSet1 && !bInSet2)
		{
			//last
			return pArbic[1];
		}
	}
	
	return ucs_cur_code;
}

#endif

//end
